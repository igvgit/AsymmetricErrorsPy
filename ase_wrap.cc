/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03030000
  return (char *)PyUnicode_AsUTF8(str);
#elif PY_VERSION_HEX >= 0x03000000
  char *newstr = 0;
  str = PyUnicode_AsUTF8String(str);
  if (str) {
    char *cstr;
    Py_ssize_t len;
    if (PyBytes_AsStringAndSize(str, &cstr, &len) != -1) {
      newstr = (char *) malloc(len+1);
      if (newstr)
        memcpy(newstr, cstr, len+1);
    }
    Py_XDECREF(str);
  }
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03030000 || PY_VERSION_HEX < 0x03000000
#  define SWIG_Python_str_DelForPy3(x)
#else
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

// SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user
// interface files check for it.
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    Py_XDECREF(value);
    PyErr_Restore(type, newvalue, traceback);
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03020000
# error "This version of SWIG only supports Python 3 >= 3.2"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
      data->delargs = !(flags & (METH_O));
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        SwigPyObject_acquire(v,args);
      } else {
        SwigPyObject_disown(v,args);
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
        inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    return PyDict_SetItem(dict, SWIG_This(), swig_this);
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, "type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        return -1;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifdef __cplusplus
extern "C" {
#endif

/* Method creation and docstring support functions */

SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name);
SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);

#ifdef __cplusplus
}
#endif


  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Base swig_types[0]
#define SWIGTYPE_p_Transform swig_types[1]
#define SWIGTYPE_p_allocator_type swig_types[2]
#define SWIGTYPE_p_ase__AbsDistributionModel1D swig_types[3]
#define SWIGTYPE_p_ase__AbsLocationScaleFamily swig_types[4]
#define SWIGTYPE_p_ase__AbsLogLikelihoodCurve swig_types[5]
#define SWIGTYPE_p_ase__AbsRNG swig_types[6]
#define SWIGTYPE_p_ase__AbsShiftableLogli swig_types[7]
#define SWIGTYPE_p_ase__AsymmetricEstimate swig_types[8]
#define SWIGTYPE_p_ase__BrokenParabola swig_types[9]
#define SWIGTYPE_p_ase__CdfFunctor1D swig_types[10]
#define SWIGTYPE_p_ase__ConservativeSigma05 swig_types[11]
#define SWIGTYPE_p_ase__ConservativeSigma10 swig_types[12]
#define SWIGTYPE_p_ase__ConservativeSigma15 swig_types[13]
#define SWIGTYPE_p_ase__ConservativeSigma20 swig_types[14]
#define SWIGTYPE_p_ase__ConservativeSigmaMax swig_types[15]
#define SWIGTYPE_p_ase__ConservativeSpline swig_types[16]
#define SWIGTYPE_p_ase__ConstrainedQuartic swig_types[17]
#define SWIGTYPE_p_ase__CubicHermiteInterpolatorEG swig_types[18]
#define SWIGTYPE_p_ase__DensityDerivativeFunctor1D swig_types[19]
#define SWIGTYPE_p_ase__DensityFunctor1D swig_types[20]
#define SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__DoubleCubicInner_t swig_types[21]
#define SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t swig_types[22]
#define SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__QuinticInner_t swig_types[23]
#define SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t swig_types[24]
#define SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t swig_types[25]
#define SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t swig_types[26]
#define SWIGTYPE_p_ase__DimidiatedGaussian swig_types[27]
#define SWIGTYPE_p_ase__DiscretizedConvolution swig_types[28]
#define SWIGTYPE_p_ase__DistortedGaussian swig_types[29]
#define SWIGTYPE_p_ase__DistributionLogli swig_types[30]
#define SWIGTYPE_p_ase__DistributionModel1DCopy swig_types[31]
#define SWIGTYPE_p_ase__DoubleCubicGaussian swig_types[32]
#define SWIGTYPE_p_ase__DoubleCubicInner swig_types[33]
#define SWIGTYPE_p_ase__DoubleCubicLogSigma swig_types[34]
#define SWIGTYPE_p_ase__DoubleFunctor1 swig_types[35]
#define SWIGTYPE_p_ase__DoubleQuartic swig_types[36]
#define SWIGTYPE_p_ase__DoubleQuintic swig_types[37]
#define SWIGTYPE_p_ase__EdgeworthExpansion3 swig_types[38]
#define SWIGTYPE_p_ase__EmpiricalDistribution swig_types[39]
#define SWIGTYPE_p_ase__EntropyFunctor1D swig_types[40]
#define SWIGTYPE_p_ase__EquidistantGrid swig_types[41]
#define SWIGTYPE_p_ase__ExceedanceFunctor1D swig_types[42]
#define SWIGTYPE_p_ase__ExponentialDistribution swig_types[43]
#define SWIGTYPE_p_ase__FechnerDistribution swig_types[44]
#define SWIGTYPE_p_ase__FunctorTimesShiftedXHelperT_ase__GaussianConvolution_t swig_types[45]
#define SWIGTYPE_p_ase__FunctorTimesShiftedXHelperT_ase__NumericalConvolution_t swig_types[46]
#define SWIGTYPE_p_ase__FunctorTimesShiftedXRatioHelperT_ase__GaussianConvolution_t swig_types[47]
#define SWIGTYPE_p_ase__FunctorTimesShiftedXRatioHelperT_ase__NumericalConvolution_t swig_types[48]
#define SWIGTYPE_p_ase__GammaDistribution swig_types[49]
#define SWIGTYPE_p_ase__GaussHermiteQuadrature swig_types[50]
#define SWIGTYPE_p_ase__GaussLegendreQuadrature swig_types[51]
#define SWIGTYPE_p_ase__Gaussian swig_types[52]
#define SWIGTYPE_p_ase__GaussianConvolution swig_types[53]
#define SWIGTYPE_p_ase__GeneralisedPoisson swig_types[54]
#define SWIGTYPE_p_ase__Interpolated7thDegree swig_types[55]
#define SWIGTYPE_p_ase__InterpolatedDensity1D swig_types[56]
#define SWIGTYPE_p_ase__IntervalT_double_t swig_types[57]
#define SWIGTYPE_p_ase__InvExceedanceFunctor1D swig_types[58]
#define SWIGTYPE_p_ase__JohnsonSb swig_types[59]
#define SWIGTYPE_p_ase__JohnsonSu swig_types[60]
#define SWIGTYPE_p_ase__JohnsonSystem swig_types[61]
#define SWIGTYPE_p_ase__LegendreDistro1D swig_types[62]
#define SWIGTYPE_p_ase__LikelihoodAccumulator swig_types[63]
#define SWIGTYPE_p_ase__LikelihoodCurveCopy swig_types[64]
#define SWIGTYPE_p_ase__LogDensityFunctor1D swig_types[65]
#define SWIGTYPE_p_ase__LogLikelihoodDerivative swig_types[66]
#define SWIGTYPE_p_ase__LogLikelihoodSecondDerivative swig_types[67]
#define SWIGTYPE_p_ase__LogLogisticBeta swig_types[68]
#define SWIGTYPE_p_ase__LogNormal swig_types[69]
#define SWIGTYPE_p_ase__LogarithmicLogli swig_types[70]
#define SWIGTYPE_p_ase__LongDoubleFunctor1 swig_types[71]
#define SWIGTYPE_p_ase__MatchedQuintic swig_types[72]
#define SWIGTYPE_p_ase__MixtureModel1D swig_types[73]
#define SWIGTYPE_p_ase__MoldedCubicLogSigma swig_types[74]
#define SWIGTYPE_p_ase__MoldedDoubleQuartic swig_types[75]
#define SWIGTYPE_p_ase__MoldedDoubleQuintic swig_types[76]
#define SWIGTYPE_p_ase__MoldedQuartic swig_types[77]
#define SWIGTYPE_p_ase__MomentFunctor1D swig_types[78]
#define SWIGTYPE_p_ase__NumericalConvolution swig_types[79]
#define SWIGTYPE_p_ase__OPATGaussianT_ase__ParabolicRailwayCurveT_long_double_t_t swig_types[80]
#define SWIGTYPE_p_ase__OPATGaussianT_ase__SmoothDoubleCubicT_long_double_t_t swig_types[81]
#define SWIGTYPE_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t swig_types[82]
#define SWIGTYPE_p_ase__PDGLogli swig_types[83]
#define SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t swig_types[84]
#define SWIGTYPE_p_ase__ParabolicRailwayCurveT_long_double_t swig_types[85]
#define SWIGTYPE_p_ase__PoissonLogli swig_types[86]
#define SWIGTYPE_p_ase__Poly1D swig_types[87]
#define SWIGTYPE_p_ase__Poly1DShifted swig_types[88]
#define SWIGTYPE_p_ase__QVWGaussian swig_types[89]
#define SWIGTYPE_p_ase__QuantileFunctor1D swig_types[90]
#define SWIGTYPE_p_ase__QuinticInner swig_types[91]
#define SWIGTYPE_p_ase__QuinticLogSigma swig_types[92]
#define SWIGTYPE_p_ase__RailwayGaussian swig_types[93]
#define SWIGTYPE_p_ase__RailwayZoneFunctorT_double_t swig_types[94]
#define SWIGTYPE_p_ase__RailwayZoneFunctorT_long_double_t swig_types[95]
#define SWIGTYPE_p_ase__RatioMomentFunctor1D swig_types[96]
#define SWIGTYPE_p_ase__SDCZoneFunctorT_double_t swig_types[97]
#define SWIGTYPE_p_ase__SDCZoneFunctorT_long_double_t swig_types[98]
#define SWIGTYPE_p_ase__SDIZoneFunctorT_double_t swig_types[99]
#define SWIGTYPE_p_ase__SDIZoneFunctorT_long_double_t swig_types[100]
#define SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__DoubleCubicInner_t swig_types[101]
#define SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t swig_types[102]
#define SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__QuinticInner_t swig_types[103]
#define SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t swig_types[104]
#define SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t swig_types[105]
#define SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t swig_types[106]
#define SWIGTYPE_p_ase__ShiftedDensityFunctor1D swig_types[107]
#define SWIGTYPE_p_ase__SimpleDoubleQuartic swig_types[108]
#define SWIGTYPE_p_ase__SimpleDoubleQuintic swig_types[109]
#define SWIGTYPE_p_ase__SkewNormal swig_types[110]
#define SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t swig_types[111]
#define SWIGTYPE_p_ase__SmoothDoubleCubicT_long_double_t swig_types[112]
#define SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t swig_types[113]
#define SWIGTYPE_p_ase__SymbetaDoubleIntegralT_long_double_t swig_types[114]
#define SWIGTYPE_p_ase__SymmetricBetaGaussian swig_types[115]
#define SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_10U_t swig_types[116]
#define SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_15U_t swig_types[117]
#define SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_20U_t swig_types[118]
#define SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_25U_t swig_types[119]
#define SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_30U_t swig_types[120]
#define SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_10U_t swig_types[121]
#define SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_15U_t swig_types[122]
#define SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_20U_t swig_types[123]
#define SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_25U_t swig_types[124]
#define SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_30U_t swig_types[125]
#define SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_10U_t swig_types[126]
#define SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_15U_t swig_types[127]
#define SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_20U_t swig_types[128]
#define SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_25U_t swig_types[129]
#define SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_30U_t swig_types[130]
#define SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_10U_t swig_types[131]
#define SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_15U_t swig_types[132]
#define SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_20U_t swig_types[133]
#define SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_25U_t swig_types[134]
#define SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_30U_t swig_types[135]
#define SWIGTYPE_p_ase__SymmetrizedParabola swig_types[136]
#define SWIGTYPE_p_ase__TabulatedDensity1D swig_types[137]
#define SWIGTYPE_p_ase__TransitionCubicT_double_t swig_types[138]
#define SWIGTYPE_p_ase__TruncatedCubicLogli swig_types[139]
#define SWIGTYPE_p_ase__TruncatedDistribution1D swig_types[140]
#define SWIGTYPE_p_ase__UniformDistribution swig_types[141]
#define SWIGTYPE_p_ase__UnscaledCdfFunctor1D swig_types[142]
#define SWIGTYPE_p_ase__UnscaledDensityDerivativeFunctor1D swig_types[143]
#define SWIGTYPE_p_ase__UnscaledDensityFunctor1D swig_types[144]
#define SWIGTYPE_p_ase__UnscaledEntropyFunctor1D swig_types[145]
#define SWIGTYPE_p_ase__UnscaledExceedanceFunctor1D swig_types[146]
#define SWIGTYPE_p_ase__UnscaledInvExceedanceFunctor1D swig_types[147]
#define SWIGTYPE_p_ase__UnscaledMomentFunctor1D swig_types[148]
#define SWIGTYPE_p_ase__UnscaledQuantileFunctor1D swig_types[149]
#define SWIGTYPE_p_ase__VariableLogSigma swig_types[150]
#define SWIGTYPE_p_ase__VariableSigmaLogli swig_types[151]
#define SWIGTYPE_p_ase__VariableVarianceLogli swig_types[152]
#define SWIGTYPE_p_asepy__DRand48 swig_types[153]
#define SWIGTYPE_p_asepy__MersenneTwister32 swig_types[154]
#define SWIGTYPE_p_asepy__MersenneTwister64 swig_types[155]
#define SWIGTYPE_p_asepy__PyFunctor1 swig_types[156]
#define SWIGTYPE_p_bool swig_types[157]
#define SWIGTYPE_p_char swig_types[158]
#define SWIGTYPE_p_char_type swig_types[159]
#define SWIGTYPE_p_const_reference swig_types[160]
#define SWIGTYPE_p_difference_type swig_types[161]
#define SWIGTYPE_p_double swig_types[162]
#define SWIGTYPE_p_f_double__double swig_types[163]
#define SWIGTYPE_p_f_enum_std__ios_base__event_r_std__ios_base_int__void swig_types[164]
#define SWIGTYPE_p_f_long_double__long_double swig_types[165]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[166]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[167]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[168]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[169]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[170]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[171]
#define SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[172]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[173]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[174]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[175]
#define SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[176]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[177]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[178]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[179]
#define SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[180]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[181]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[182]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[183]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[184]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[185]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[186]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[187]
#define SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base swig_types[188]
#define SWIGTYPE_p_first_type swig_types[189]
#define SWIGTYPE_p_float swig_types[190]
#define SWIGTYPE_p_fmtflags swig_types[191]
#define SWIGTYPE_p_int swig_types[192]
#define SWIGTYPE_p_int_type swig_types[193]
#define SWIGTYPE_p_iostate swig_types[194]
#define SWIGTYPE_p_long swig_types[195]
#define SWIGTYPE_p_long_double swig_types[196]
#define SWIGTYPE_p_long_long swig_types[197]
#define SWIGTYPE_p_off_type swig_types[198]
#define SWIGTYPE_p_openmode swig_types[199]
#define SWIGTYPE_p_p_PyObject swig_types[200]
#define SWIGTYPE_p_p_void swig_types[201]
#define SWIGTYPE_p_pos_type swig_types[202]
#define SWIGTYPE_p_reference swig_types[203]
#define SWIGTYPE_p_second_type swig_types[204]
#define SWIGTYPE_p_seekdir swig_types[205]
#define SWIGTYPE_p_short swig_types[206]
#define SWIGTYPE_p_size_t swig_types[207]
#define SWIGTYPE_p_size_type swig_types[208]
#define SWIGTYPE_p_state_type swig_types[209]
#define SWIGTYPE_p_std__allocatorT_char_t swig_types[210]
#define SWIGTYPE_p_std__allocatorT_double_t swig_types[211]
#define SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t swig_types[212]
#define SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t swig_types[213]
#define SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[214]
#define SWIGTYPE_p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[215]
#define SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[216]
#define SWIGTYPE_p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[217]
#define SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t swig_types[218]
#define SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[219]
#define SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator swig_types[220]
#define SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__reverse_iterator swig_types[221]
#define SWIGTYPE_p_std__basic_stringbufT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[222]
#define SWIGTYPE_p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[223]
#define SWIGTYPE_p_std__invalid_argument swig_types[224]
#define SWIGTYPE_p_std__ios_base swig_types[225]
#define SWIGTYPE_p_std__locale swig_types[226]
#define SWIGTYPE_p_std__pairT_bool_double_t swig_types[227]
#define SWIGTYPE_p_std__pairT_double_double_t swig_types[228]
#define SWIGTYPE_p_std__pairT_long_double_long_double_t swig_types[229]
#define SWIGTYPE_p_std__pairT_unsigned_int_double_t swig_types[230]
#define SWIGTYPE_p_std__vectorT_ase__AsymmetricEstimate_std__allocatorT_ase__AsymmetricEstimate_t_t swig_types[231]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[232]
#define SWIGTYPE_p_std__vectorT_long_double_std__allocatorT_long_double_t_t swig_types[233]
#define SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t swig_types[234]
#define SWIGTYPE_p_streamoff swig_types[235]
#define SWIGTYPE_p_streampos swig_types[236]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[237]
#define SWIGTYPE_p_traits_type swig_types[238]
#define SWIGTYPE_p_unsigned_int swig_types[239]
#define SWIGTYPE_p_unsigned_long swig_types[240]
#define SWIGTYPE_p_unsigned_long_long swig_types[241]
#define SWIGTYPE_p_unsigned_short swig_types[242]
#define SWIGTYPE_p_value_type swig_types[243]
static swig_type_info *swig_types[245];
static swig_module_info swig_module = {swig_types, 244, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _asepy.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__asepy

#else
#  define SWIG_init    init_asepy

#endif
#define SWIG_name    "_asepy"

#define SWIGVERSION 0x040002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#define SWIG_FILE_WITH_INIT


#ifndef SWIG_FILE_WITH_INIT
#define NO_IMPORT_ARRAY
#endif
#include "stdio.h"
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include <numpy/arrayobject.h>


#include <complex> 


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    if (PyString_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      int res = SWIG_ERROR;
      swig_type_info *descriptor = type_info<Type>();
      if (val) {
        Type *p = 0;
        int newmem = 0;
        res = descriptor ? SWIG_ConvertPtrAndOwn(obj, (void **)&p, descriptor, 0, &newmem) : SWIG_ERROR;
        if (SWIG_IsOK(res)) {
          if (newmem & SWIG_CAST_NEW_MEMORY) {
            res |= SWIG_NEWOBJMASK;
          }
          *val = p;
        }
      } else {
        res = descriptor ? SWIG_ConvertPtr(obj, 0, descriptor, 0) : SWIG_ERROR;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj) {
    return traits_as<Type, typename traits<Type>::category>::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


namespace swig {
  template <> struct traits< char > {
    typedef value_category category;
    static const char* type_name() { return"char"; }
  };
  template <>  struct traits_asval< char > {
    typedef char value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_char (obj, val);
    }
  };
  template <>  struct traits_from< char > {
    typedef char value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_char  (val);
    }
  };
}





SWIGINTERN int
SWIG_AsPtr_std_basic_string_Sl_char_Sg_ (PyObject* obj, std::string **val) {
  static swig_type_info* string_info = SWIG_TypeQuery("std::basic_string<char> *");
  std::string *vptr;
  if (SWIG_IsOK(SWIG_ConvertPtr(obj, (void**)&vptr, string_info, 0))) {
    if (val) *val = vptr;
    return SWIG_OLDOBJ;
  } else {
    PyErr_Clear();
    char* buf = 0 ; size_t size = 0; int alloc = 0;
    if (SWIG_IsOK(SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc))) {
      if (buf) {
	if (val) *val = new std::string(buf, size - 1);
	if (alloc == SWIG_NEWOBJ) delete[] buf;
	return SWIG_NEWOBJ;
      } else {
        if (val) *val = 0;
        return SWIG_OLDOBJ;
      }
    }
    return SWIG_ERROR;
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_std_basic_string_Sl_char_Sg_  (const std::string& s) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  }

SWIGINTERN std::basic_string< char >::iterator std_basic_string_Sl_char_Sg__erase__SWIG_3(std::basic_string< char > *self,std::basic_string< char >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::basic_string< char >::iterator std_basic_string_Sl_char_Sg__erase__SWIG_4(std::basic_string< char > *self,std::basic_string< char >::iterator first,std::basic_string< char >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::basic_string< char >::iterator std_basic_string_Sl_char_Sg__insert__SWIG_4(std::basic_string< char > *self,std::basic_string< char >::iterator pos,std::basic_string< char >::value_type x){ return self->insert(pos, x); }
SWIGINTERN void std_basic_string_Sl_char_Sg__insert__SWIG_5(std::basic_string< char > *self,std::basic_string< char >::iterator pos,std::basic_string< char >::size_type n,std::basic_string< char >::value_type x){ self->insert(pos, n, x); }

#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount && it != self->end(); ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount && it != self->rend(); ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyForwardIteratorOpen_T<OutIterator>(curr, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

  protected:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> base0;
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == base0::begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }
  };


  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorOpen_T<OutIter>(current, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item);
      } catch (const std::invalid_argument& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check() const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item))
	  return false;
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}

SWIGINTERN swig::SwigPyIterator *std_basic_string_Sl_char_Sg__iterator(std::basic_string< char > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_basic_string_Sl_char_Sg____nonzero__(std::basic_string< char > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_basic_string_Sl_char_Sg____bool__(std::basic_string< char > const *self){
      return !(self->empty());
    }
SWIGINTERN std::basic_string< char >::size_type std_basic_string_Sl_char_Sg____len__(std::basic_string< char > const *self){
      return self->size();
    }
SWIGINTERN std::basic_string< char,std::char_traits< char >,std::allocator< char > > *std_basic_string_Sl_char_Sg____getslice__(std::basic_string< char > *self,std::basic_string< char >::difference_type i,std::basic_string< char >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_basic_string_Sl_char_Sg____setslice____SWIG_0(std::basic_string< char > *self,std::basic_string< char >::difference_type i,std::basic_string< char >::difference_type j){
      swig::setslice(self, i, j, 1, std::basic_string< char,std::char_traits< char >,std::allocator< char > >());
    }
SWIGINTERN void std_basic_string_Sl_char_Sg____setslice____SWIG_1(std::basic_string< char > *self,std::basic_string< char >::difference_type i,std::basic_string< char >::difference_type j,std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_basic_string_Sl_char_Sg____delslice__(std::basic_string< char > *self,std::basic_string< char >::difference_type i,std::basic_string< char >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_basic_string_Sl_char_Sg____delitem____SWIG_0(std::basic_string< char > *self,std::basic_string< char >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::basic_string< char,std::char_traits< char >,std::allocator< char > > *std_basic_string_Sl_char_Sg____getitem____SWIG_0(std::basic_string< char > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::basic_string< char,std::char_traits< char >,std::allocator< char > >::difference_type id = i;
      std::basic_string< char,std::char_traits< char >,std::allocator< char > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_basic_string_Sl_char_Sg____setitem____SWIG_0(std::basic_string< char > *self,PySliceObject *slice,std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::basic_string< char,std::char_traits< char >,std::allocator< char > >::difference_type id = i;
      std::basic_string< char,std::char_traits< char >,std::allocator< char > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_basic_string_Sl_char_Sg____setitem____SWIG_1(std::basic_string< char > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::basic_string< char,std::char_traits< char >,std::allocator< char > >::difference_type id = i;
      std::basic_string< char,std::char_traits< char >,std::allocator< char > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_basic_string_Sl_char_Sg____delitem____SWIG_1(std::basic_string< char > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::basic_string< char,std::char_traits< char >,std::allocator< char > >::difference_type id = i;
      std::basic_string< char,std::char_traits< char >,std::allocator< char > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::basic_string< char >::value_type std_basic_string_Sl_char_Sg____getitem____SWIG_1(std::basic_string< char > *self,std::basic_string< char >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_basic_string_Sl_char_Sg____setitem____SWIG_2(std::basic_string< char > *self,std::basic_string< char >::difference_type i,std::basic_string< char >::value_type x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::basic_string< char,std::char_traits< char >,std::allocator< char > > *std_basic_string_Sl_char_Sg____add__(std::basic_string< char > *self,std::basic_string< char > const &v){
	std::basic_string< char,std::char_traits< char >,std::allocator< char > >* res = new std::basic_string< char,std::char_traits< char >,std::allocator< char > >(*self);
	*res += v;      
	return res;
      }
SWIGINTERN std::basic_string< char,std::char_traits< char >,std::allocator< char > > *std_basic_string_Sl_char_Sg____radd__(std::basic_string< char > *self,std::basic_string< char > const &v){
	std::basic_string< char,std::char_traits< char >,std::allocator< char > >* res = new std::basic_string< char,std::char_traits< char >,std::allocator< char > >(v);
	*res += *self;      
	return res;
      }
SWIGINTERN std::basic_string< char,std::char_traits< char >,std::allocator< char > > std_basic_string_Sl_char_Sg____str__(std::basic_string< char > *self){
	return *self;
      }
SWIGINTERN std::basic_ostream< char,std::char_traits< char > > &std_basic_string_Sl_char_Sg____rlshift__(std::basic_string< char > *self,std::basic_ostream< char,std::char_traits< char > > &out){
	out << *self;
	return out;
      }
SWIGINTERN bool std_basic_string_Sl_char_Sg__operator_Se__Se_(std::basic_string< char > *self,std::basic_string< char > const &v){
    return *self == v;
  }
SWIGINTERN bool std_basic_string_Sl_char_Sg__operator_SN__Se_(std::basic_string< char > *self,std::basic_string< char > const &v){
    return *self != v;
  }
SWIGINTERN bool std_basic_string_Sl_char_Sg__operator_Sg_(std::basic_string< char > *self,std::basic_string< char > const &v){
    return *self > v;
  }
SWIGINTERN bool std_basic_string_Sl_char_Sg__operator_Sl_(std::basic_string< char > *self,std::basic_string< char > const &v){
    return *self < v;
  }
SWIGINTERN bool std_basic_string_Sl_char_Sg__operator_Sg__Se_(std::basic_string< char > *self,std::basic_string< char > const &v){
    return *self >= v;
  }
SWIGINTERN bool std_basic_string_Sl_char_Sg__operator_Sl__Se_(std::basic_string< char > *self,std::basic_string< char > const &v){
    return *self <= v;
  }

#ifndef SWIG_STD_NOMODERN_STL
# include <ios>
#else
# include <streambuf.h>
#endif


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


#ifndef SWIG_STD_NOMODERN_STL
#include <streambuf>
#else
#include <streambuf.h>
#endif


#include <iostream>


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(__cplusplus) && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#  define SWIG_isfinite(X) (__builtin_isfinite(X))
# elif defined(__clang__) && defined(__has_builtin)
#  if __has_builtin(__builtin_isfinite)
#   define SWIG_isfinite(X) (__builtin_isfinite(X))
#  endif
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}

SWIGINTERN std::basic_ostream< char,std::char_traits< char > > &std_basic_ostream_Sl_char_Sg__operator_Sl__Sl___SWIG_17(std::basic_ostream< char > *self,std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &s){
	  *self << s;
	  return *self;
	}

#include <sstream>


#include <vector>


#include <utility>


#include <vector>
#include <utility>


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


namespace swig {
  template <> struct traits< unsigned int > {
    typedef value_category category;
    static const char* type_name() { return"unsigned int"; }
  };
  template <>  struct traits_asval< unsigned int > {
    typedef unsigned int value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_unsigned_SS_int (obj, val);
    }
  };
  template <>  struct traits_from< unsigned int > {
    typedef unsigned int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_unsigned_SS_int  (val);
    }
  };
}


  #define SWIG_From_double   PyFloat_FromDouble 


namespace swig {
  template <> struct traits< double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };
  template <>  struct traits_asval< double > {
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from< double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


  namespace swig {


















































    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      typedef std::pair<T,U> value_type;

      static int get_pair(PyObject* first, PyObject* second,
			  std::pair<T,U> **val) 
      {
	if (val) {
	  value_type *vp = (new std::pair<T,U>());
	  T *pfirst = &(vp->first);
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) {
	    delete vp;
	    return res1;
	  }
	  U *psecond = &(vp->second);
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) {
	    delete vp;
	    return res2;
	  }
	  *val = vp;
	  return SWIG_AddNewMask(res1 > res2 ? res1 : res2);
	} else {
	  T *pfirst = 0;
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = 0;
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  return res1 > res2 ? res1 : res2;
	}
      }

      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	int res = SWIG_ERROR;
	if (PyTuple_Check(obj)) {
	  if (PyTuple_GET_SIZE(obj) == 2) {
	    res = get_pair(PyTuple_GET_ITEM(obj,0),PyTuple_GET_ITEM(obj,1), val);
	  }
	} else if (PySequence_Check(obj)) {
	  if (PySequence_Size(obj) == 2) {
	    swig::SwigVar_PyObject first = PySequence_GetItem(obj,0);
	    swig::SwigVar_PyObject second = PySequence_GetItem(obj,1);
	    res = get_pair(first, second, val);
	  }
	} else {
	  value_type *p = 0;
	  swig_type_info *descriptor = swig::type_info<value_type>();
	  res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	return res;
      }
    };


    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }





































      namespace swig {
	template <>  struct traits<std::pair< unsigned int, double > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "unsigned int" "," "double" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::pair< double, double > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "double" "," "double" " >";
	  }
	};
      }
    

namespace swig {
  template <> struct traits< bool > {
    typedef value_category category;
    static const char* type_name() { return"bool"; }
  };
  template <>  struct traits_asval< bool > {
    typedef bool value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_bool (obj, val);
    }
  };
  template <>  struct traits_from< bool > {
    typedef bool value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_bool  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::pair< bool, double > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "bool" "," "double" " >";
	  }
	};
      }
    

namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_double_Sg__iterator(std::vector< double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_double_Sg____bool__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< double >::size_type std_vector_Sl_double_Sg____len__(std::vector< double > const *self){
      return self->size();
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< double,std::allocator< double > >());
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_1(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getitem____SWIG_0(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_0(std::vector< double > *self,PySliceObject *slice,std::vector< double,std::allocator< double > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg____getitem____SWIG_1(std::vector< double > const *self,std::vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }

namespace swig {
  static PyObject* container_owner_attribute() {
    static PyObject* attr = SWIG_Python_str_FromChar("__swig_container");
    return attr;
  }

  template <typename T>
  struct container_owner {
    // By default, do not add the back-reference (for value types)
    // Specialization below will check the reference for pointer types.
    static bool back_reference(PyObject* /*child*/, PyObject* /*owner*/) {
      return false;
    }
  };

  template <>
  struct container_owner<swig::pointer_category> {  
    /*
     * Call to add a back-reference to the owning object when returning a 
     * reference from a container.  Will only set the reference if child
     * is a SWIG wrapper object that does not own the pointer.
     *
     * returns whether the reference was set or not
     */
    static bool back_reference(PyObject* child, PyObject* owner) {
      SwigPyObject* swigThis = SWIG_Python_GetSwigThis(child);
      if (swigThis && (swigThis->own & SWIG_POINTER_OWN) != SWIG_POINTER_OWN) {
        return PyObject_SetAttr(child, container_owner_attribute(), owner) != -1;
      }
      return false;
    }
  };
}

SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_2(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,std::vector< double >::iterator first,std::vector< double >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__insert__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_double_Sg__insert__SWIG_1(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::size_type n,std::vector< double >::value_type const &x){ self->insert(pos, n, x); }

#include "PyFunctor1.hh"


#include "ase/AbsRNG.hh"

SWIGINTERN std::vector< double,std::allocator< double > > ase_AbsRNG_generate(ase::AbsRNG *self,unsigned int const npoints){
             std::vector<double> result(npoints);
             for (unsigned i=0; i<npoints; ++i)
                 result[i] = (*self)();
             return result;
         }

#include "ase/AbsDistributionModel1D.hh"

SWIGINTERN std::vector< double,std::allocator< double > > ase_AbsDistributionModel1D_generate(ase::AbsDistributionModel1D *self,ase::AbsRNG &g,unsigned int const npoints){
             std::vector<double> result(npoints);
             for (unsigned i=0; i<npoints; ++i)
                 result[i] = self->random(g);
             return result;
         }

#include "ase/AbsLocationScaleFamily.hh"


#include "ase/DistributionFunctors1D.hh"


#include "ase/NumericalConvolution.hh"


#include "ase/GaussianConvolution.hh"


#include "ase/FunctorTimesShiftedX.hh"


#include "ase/GaussHermiteQuadrature.hh"


#include "ase/mathUtils.hh"


#include "ase/Gaussian.hh"


#include "ase/SymbetaDoubleIntegral.hh"


#include "ase/ParabolicRailwayCurve.hh"


#include "ase/SmoothDoubleCubic.hh"


#include "ase/OPATGaussian.hh"


#include "ase/DistributionModels1D.hh"


#include "ase/specialFunctions.hh"


#include "ase/LegendreDistro1D.hh"


#include "ase/LikelihoodCurveCopy.hh"

SWIGINTERN ase::LikelihoodCurveCopy ase_AbsLogLikelihoodCurve___add__(ase::AbsLogLikelihoodCurve *self,ase::AbsLogLikelihoodCurve const &r){
             return *(self) + r;
         }
SWIGINTERN ase::LikelihoodCurveCopy ase_AbsLogLikelihoodCurve___sub__(ase::AbsLogLikelihoodCurve *self,ase::AbsLogLikelihoodCurve const &r){
             return *(self) - r;
         }
SWIGINTERN ase::LikelihoodCurveCopy ase_AbsLogLikelihoodCurve___mul__(ase::AbsLogLikelihoodCurve *self,double const &r){
             return *(self)*r;
         }
SWIGINTERN ase::LikelihoodCurveCopy ase_AbsLogLikelihoodCurve___rmul__(ase::AbsLogLikelihoodCurve *self,double const &r){
             return *(self)*r;
         }
SWIGINTERN ase::LikelihoodCurveCopy ase_AbsLogLikelihoodCurve___truediv__(ase::AbsLogLikelihoodCurve *self,double const &r){
             return *(self)/r;
         }

#include "ase/CubicHermiteInterpolatorEG.hh"


#include "ase/InterpolatedDensity1D.hh"


#include "ase/TransitionCubic.hh"


#include "ase/DoubleCubicInner.hh"


#include "ase/Poly1D.hh"


#include "ase/QuinticInner.hh"


#include "ase/DerivativeFunctors.hh"


#include "ase/PoissonLogli.hh"


#include "ase/SymmetricBetaGaussian.hh"


#include "ase/arrayStats.hh"


#if NPY_API_VERSION < 0x00000007
#define NPY_ARRAY_DEFAULT NPY_DEFAULT
#define NPY_ARRAY_FARRAY  NPY_FARRAY
#define NPY_FORTRANORDER  NPY_FORTRAN
#endif


/* Macros to extract array attributes.
 */
#if NPY_API_VERSION < 0x00000007
#define is_array(a)            ((a) && PyArray_Check((PyArrayObject*)a))
#define array_type(a)          (int)(PyArray_TYPE((PyArrayObject*)a))
#define array_numdims(a)       (((PyArrayObject*)a)->nd)
#define array_dimensions(a)    (((PyArrayObject*)a)->dimensions)
#define array_size(a,i)        (((PyArrayObject*)a)->dimensions[i])
#define array_strides(a)       (((PyArrayObject*)a)->strides)
#define array_stride(a,i)      (((PyArrayObject*)a)->strides[i])
#define array_data(a)          (((PyArrayObject*)a)->data)
#define array_descr(a)         (((PyArrayObject*)a)->descr)
#define array_flags(a)         (((PyArrayObject*)a)->flags)
#define array_enableflags(a,f) (((PyArrayObject*)a)->flags) = f
#else
#define is_array(a)            ((a) && PyArray_Check(a))
#define array_type(a)          PyArray_TYPE((PyArrayObject*)a)
#define array_numdims(a)       PyArray_NDIM((PyArrayObject*)a)
#define array_dimensions(a)    PyArray_DIMS((PyArrayObject*)a)
#define array_strides(a)       PyArray_STRIDES((PyArrayObject*)a)
#define array_stride(a,i)      PyArray_STRIDE((PyArrayObject*)a,i)
#define array_size(a,i)        PyArray_DIM((PyArrayObject*)a,i)
#define array_data(a)          PyArray_DATA((PyArrayObject*)a)
#define array_descr(a)         PyArray_DESCR((PyArrayObject*)a)
#define array_flags(a)         PyArray_FLAGS((PyArrayObject*)a)
#define array_enableflags(a,f) PyArray_ENABLEFLAGS((PyArrayObject*)a,f)
#endif
#define array_is_contiguous(a) (PyArray_ISCONTIGUOUS((PyArrayObject*)a))
#define array_is_native(a)     (PyArray_ISNOTSWAPPED((PyArrayObject*)a))
#define array_is_fortran(a)    (PyArray_IS_F_CONTIGUOUS((PyArrayObject*)a))


  /* Given a PyObject, return a string describing its type.
   */
  const char* pytype_string(PyObject* py_obj)
  {
    if (py_obj == NULL          ) return "C NULL value";
    if (py_obj == Py_None       ) return "Python None" ;
    if (PyCallable_Check(py_obj)) return "callable"    ;
    if (PyInt_Check(     py_obj)) return "int"         ;
    if (PyFloat_Check(   py_obj)) return "float"       ;
    if (PyDict_Check(    py_obj)) return "dict"        ;
    if (PyList_Check(    py_obj)) return "list"        ;
    if (PyTuple_Check(   py_obj)) return "tuple"       ;
#if PY_MAJOR_VERSION < 3
    if (PyFile_Check(    py_obj)) return "file"        ;
    if (PyModule_Check(  py_obj)) return "module"      ;
    if (PyInstance_Check(py_obj)) return "instance"    ;
    if (PyString_Check(  py_obj)) return "string"      ;
#else
    if (PyBytes_Check(   py_obj)) return "bytes"       ;
    if (PyUnicode_Check( py_obj)) return "string"      ;
#endif

    return "unkown type";
  }

  /* Given a NumPy typecode, return a string describing the type.
   */
  const char* typecode_string(int typecode)
  {
    static const char* type_names[25] = {"bool",
                                         "byte",
                                         "unsigned byte",
                                         "short",
                                         "unsigned short",
                                         "int",
                                         "unsigned int",
                                         "long",
                                         "unsigned long",
                                         "long long",
                                         "unsigned long long",
                                         "float",
                                         "double",
                                         "long double",
                                         "complex float",
                                         "complex double",
                                         "complex long double",
                                         "object",
                                         "string",
                                         "unicode",
                                         "void",
                                         "ntypes",
                                         "notype",
                                         "char",
                                         "unknown"};
    return typecode < 24 ? type_names[typecode] : type_names[24];
  }

  /* Make sure input has correct numpy type.  This now just calls
     PyArray_EquivTypenums().
   */
  int type_match(int actual_type,
                 int desired_type)
  {
    return PyArray_EquivTypenums(actual_type, desired_type);
  }

#ifdef SWIGPY_USE_CAPSULE
  void free_cap(PyObject * cap)
  {
    void* array = (void*) PyCapsule_GetPointer(cap,SWIGPY_CAPSULE_NAME);
    if (array != NULL) free(array);
  }
#endif




  /* Given a PyObject pointer, cast it to a PyArrayObject pointer if
   * legal.  If not, set the python error string appropriately and
   * return NULL.
   */
  PyArrayObject* obj_to_array_no_conversion(PyObject* input,
                                            int        typecode)
  {
    PyArrayObject* ary = NULL;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input), typecode)))
    {
      ary = (PyArrayObject*) input;
    }
    else if is_array(input)
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = typecode_string(array_type(input));
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  Array of type '%s' given",
                   desired_type, actual_type);
      ary = NULL;
    }
    else
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = pytype_string(input);
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  A '%s' was given",
                   desired_type,
                   actual_type);
      ary = NULL;
    }
    return ary;
  }

  /* Convert the given PyObject to a NumPy array with the given
   * typecode.  On success, return a valid PyArrayObject* with the
   * correct type.  On failure, the python error string will be set and
   * the routine returns NULL.
   */
  PyArrayObject* obj_to_array_allow_conversion(PyObject* input,
                                               int       typecode,
                                               int*      is_new_object)
  {
    PyArrayObject* ary = NULL;
    PyObject*      py_obj;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input),typecode)))
    {
      ary = (PyArrayObject*) input;
      *is_new_object = 0;
    }
    else
    {
      py_obj = PyArray_FROMANY(input, typecode, 0, 0, NPY_ARRAY_DEFAULT);
      /* If NULL, PyArray_FromObject will have set python error value.*/
      ary = (PyArrayObject*) py_obj;
      *is_new_object = 1;
    }
    return ary;
  }

  /* Given a PyArrayObject, check to see if it is contiguous.  If so,
   * return the input pointer and flag it as not a new object.  If it is
   * not contiguous, create a new PyArrayObject using the original data,
   * flag it as a new object and return the pointer.
   */
  PyArrayObject* make_contiguous(PyArrayObject* ary,
                                 int*           is_new_object,
                                 int            min_dims,
                                 int            max_dims)
  {
    PyArrayObject* result;
    if (array_is_contiguous(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      result = (PyArrayObject*) PyArray_ContiguousFromObject((PyObject*)ary,
                                                              array_type(ary),
                                                              min_dims,
                                                              max_dims);
      *is_new_object = 1;
    }
    return result;
  }

  /* Given a PyArrayObject, check to see if it is Fortran-contiguous.
   * If so, return the input pointer, but do not flag it as not a new
   * object.  If it is not Fortran-contiguous, create a new
   * PyArrayObject using the original data, flag it as a new object
   * and return the pointer.
   */
  PyArrayObject* make_fortran(PyArrayObject* ary,
                              int*           is_new_object)
  {
    PyArrayObject* result;
    if (array_is_fortran(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      Py_INCREF(array_descr(ary));
      result = (PyArrayObject*) PyArray_FromArray(ary,
                                                  array_descr(ary),
                                                  NPY_ARRAY_F_CONTIGUOUS);
      *is_new_object = 1;
    }
    return result;
  }

  /* Convert a given PyObject to a contiguous PyArrayObject of the
   * specified type.  If the input object is not a contiguous
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_contiguous_allow_conversion(PyObject* input,
                                                          int       typecode,
                                                          int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_contiguous(ary1, &is_new2, 0, 0);
      if ( is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }

  /* Convert a given PyObject to a Fortran-ordered PyArrayObject of the
   * specified type.  If the input object is not a Fortran-ordered
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_fortran_allow_conversion(PyObject* input,
                                                       int       typecode,
                                                       int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_fortran(ary1, &is_new2);
      if (is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }


  /* Test whether a python object is contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!array_is_contiguous(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous.  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Test whether a python object is (C_ or F_) contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_c_or_f_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!(array_is_contiguous(ary) || array_is_fortran(ary)))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous (C_ or F_).  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Require that a numpy array is not byte-swapped.  If the array is
   * not byte-swapped, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_native(PyArrayObject* ary)
  {
    int native = 1;
    if (!array_is_native(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must have native byteorder.  "
                      "A byte-swapped array was given");
      native = 0;
    }
    return native;
  }

  /* Require the given PyArrayObject to have a specified number of
   * dimensions.  If the array has the specified number of dimensions,
   * return 1.  Otherwise, set the python error string and return 0.
   */
  int require_dimensions(PyArrayObject* ary,
                         int            exact_dimensions)
  {
    int success = 1;
    if (array_numdims(ary) != exact_dimensions)
    {
      PyErr_Format(PyExc_TypeError,
                   "Array must have %d dimensions.  Given array has %d dimensions",
                   exact_dimensions,
                   array_numdims(ary));
      success = 0;
    }
    return success;
  }

  /* Require the given PyArrayObject to have one of a list of specified
   * number of dimensions.  If the array has one of the specified number
   * of dimensions, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_dimensions_n(PyArrayObject* ary,
                           int*           exact_dimensions,
                           int            n)
  {
    int success = 0;
    int i;
    char dims_str[255] = "";
    char s[255];
    for (i = 0; i < n && !success; i++)
    {
      if (array_numdims(ary) == exact_dimensions[i])
      {
        success = 1;
      }
    }
    if (!success)
    {
      for (i = 0; i < n-1; i++)
      {
        sprintf(s, "%d, ", exact_dimensions[i]);
        strcat(dims_str,s);
      }
      sprintf(s, " or %d", exact_dimensions[n-1]);
      strcat(dims_str,s);
      PyErr_Format(PyExc_TypeError,
                   "Array must have %s dimensions.  Given array has %d dimensions",
                   dims_str,
                   array_numdims(ary));
    }
    return success;
  }

  /* Require the given PyArrayObject to have a specified shape.  If the
   * array has the specified shape, return 1.  Otherwise, set the python
   * error string and return 0.
   */
  int require_size(PyArrayObject* ary,
                   npy_intp*      size,
                   int            n)
  {
    int i;
    int success = 1;
    int len;
    char desired_dims[255] = "[";
    char s[255];
    char actual_dims[255] = "[";
    for(i=0; i < n;i++)
    {
      if (size[i] != -1 &&  size[i] != array_size(ary,i))
      {
        success = 0;
      }
    }
    if (!success)
    {
      for (i = 0; i < n; i++)
      {
        if (size[i] == -1)
        {
          sprintf(s, "*,");
        }
        else
        {
          sprintf(s, "%ld,", (long int)size[i]);
        }
        strcat(desired_dims,s);
      }
      len = strlen(desired_dims);
      desired_dims[len-1] = ']';
      for (i = 0; i < n; i++)
      {
        sprintf(s, "%ld,", (long int)array_size(ary,i));
        strcat(actual_dims,s);
      }
      len = strlen(actual_dims);
      actual_dims[len-1] = ']';
      PyErr_Format(PyExc_TypeError,
                   "Array must have shape of %s.  Given array has shape of %s",
                   desired_dims,
                   actual_dims);
    }
    return success;
  }

  /* Require the given PyArrayObject to to be Fortran ordered.  If the
   * the PyArrayObject is already Fortran ordered, do nothing.  Else,
   * set the Fortran ordering flag and recompute the strides.
   */
  int require_fortran(PyArrayObject* ary)
  {
    int success = 1;
    int nd = array_numdims(ary);
    int i;
    npy_intp * strides = array_strides(ary);
    if (array_is_fortran(ary)) return success;
    /* Set the Fortran ordered flag */
    array_enableflags(ary,NPY_ARRAY_FARRAY);
    /* Recompute the strides */
    strides[0] = strides[nd-1];
    for (i=1; i < nd; ++i)
      strides[i] = strides[i-1] * array_size(ary,i-1);
    return success;
  }




#include "ase/densityIntegralGL.hh"


#include "ase/TabulatedDensity1D.hh"


#include "ase/LikelihoodAccumulator.hh"


#include "ase/AbsShiftableLogli.hh"


#include "ase/LogLikelihoodCurves.hh"


#include "ase/EquidistantGrid.hh"


#include "ase/kullbackLeiblerDivergence.hh"


#include "ase/GaussLegendreQuadrature.hh"


#include "ase/DiscretizedConvolution.hh"


#include "ase/TruncatedDistribution1D.hh"


#include "ase/Interval.hh"


#include "ase/MixtureModel1D.hh"


#include "ase/DoubleFunctor1.hh"


#include "ase/AsymmetricEstimate.hh"

SWIGINTERN std::string ase_AsymmetricEstimate___repr__(ase::AsymmetricEstimate const *self){
             std::ostringstream os;
             os << *self;
             return os.str();
         }
SWIGINTERN bool ase_AsymmetricEstimate___eq__(ase::AsymmetricEstimate const *self,ase::AsymmetricEstimate const &other){
             return *self == other;
         }
SWIGINTERN bool ase_AsymmetricEstimate___ne__(ase::AsymmetricEstimate const *self,ase::AsymmetricEstimate const &other){
             return *self != other;
         }

#include "ase/DistributionModel1DCopy.hh"


#include "RandomGenerators.hh"


#include "scanFunctor1D.hh"


#include "empiricalCdfOutline.hh"

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_incr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_decr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ptrdiff_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_distance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_equal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_advance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___iadd__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___isub__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___add__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ptrdiff_t result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator___sub__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_string_npos_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable string_npos is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_string_npos_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_size_t(static_cast< size_t >(std::basic_string< char >::npos));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_string__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_string" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_string" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  result = (std::basic_string< char > *)new std::basic_string< char >((char const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_string< char >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_length" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  result = ((std::basic_string< char > const *)arg1)->length();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_max_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_string< char >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_max_size" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  result = ((std::basic_string< char > const *)arg1)->max_size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_string< char >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_capacity" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  result = ((std::basic_string< char > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_reserve__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_reserve" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_reserve" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_reserve__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_reserve" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  (arg1)->reserve();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_reserve(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_reserve", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_string_reserve__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string_reserve__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_reserve'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::reserve(std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::reserve()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_assign__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_assign" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_assign" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_assign" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::basic_string< char > *) &(arg1)->assign((std::basic_string< char > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_assign__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char >::size_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_assign" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_assign" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_assign" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_assign" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_assign" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  result = (std::basic_string< char > *) &(arg1)->assign((std::basic_string< char > const &)*arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_assign__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char *arg2 = (char *) 0 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_assign" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_assign" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_assign" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  result = (std::basic_string< char > *) &(arg1)->assign((char const *)arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_insert" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_insert" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res3 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "string_insert" "', argument " "3"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_insert" "', argument " "3"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (std::basic_string< char > *) &(arg1)->insert(arg2,(std::basic_string< char > const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char > *arg3 = 0 ;
  std::basic_string< char >::size_type arg4 ;
  std::basic_string< char >::size_type arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  size_t val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_insert" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_insert" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res3 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "string_insert" "', argument " "3"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_insert" "', argument " "3"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_insert" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  ecode5 = SWIG_AsVal_size_t(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "string_insert" "', argument " "5"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg5 = static_cast< std::basic_string< char >::size_type >(val5);
  result = (std::basic_string< char > *) &(arg1)->insert(arg2,(std::basic_string< char > const &)*arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_insert__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  char *arg3 = (char *) 0 ;
  std::basic_string< char >::size_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_insert" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_insert" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "string_insert" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_insert" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  result = (std::basic_string< char > *) &(arg1)->insert(arg2,(char const *)arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_insert__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char >::size_type arg3 ;
  char arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_insert" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_insert" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_insert" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_char(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_insert" "', argument " "4"" of type '" "char""'");
  } 
  arg4 = static_cast< char >(val4);
  result = (std::basic_string< char > *) &(arg1)->insert(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_erase" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_erase" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_erase" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  result = (std::basic_string< char > *) &(arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_erase" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_erase" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  result = (std::basic_string< char > *) &(arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_erase" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  result = (std::basic_string< char > *) &(arg1)->erase();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_replace__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_replace" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res4 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "string_replace" "', argument " "4"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_replace" "', argument " "4"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg4 = ptr;
  }
  result = (std::basic_string< char > *) &(arg1)->replace(arg2,arg3,(std::basic_string< char > const &)*arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_replace__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char > *arg4 = 0 ;
  std::basic_string< char >::size_type arg5 ;
  std::basic_string< char >::size_type arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  size_t val5 ;
  int ecode5 = 0 ;
  size_t val6 ;
  int ecode6 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_replace" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res4 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "string_replace" "', argument " "4"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_replace" "', argument " "4"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_size_t(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "string_replace" "', argument " "5"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg5 = static_cast< std::basic_string< char >::size_type >(val5);
  ecode6 = SWIG_AsVal_size_t(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "string_replace" "', argument " "6"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg6 = static_cast< std::basic_string< char >::size_type >(val6);
  result = (std::basic_string< char > *) &(arg1)->replace(arg2,arg3,(std::basic_string< char > const &)*arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_replace__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char >::size_type arg3 ;
  char *arg4 = (char *) 0 ;
  std::basic_string< char >::size_type arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_replace" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "string_replace" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_size_t(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "string_replace" "', argument " "5"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg5 = static_cast< std::basic_string< char >::size_type >(val5);
  result = (std::basic_string< char > *) &(arg1)->replace(arg2,arg3,(char const *)arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_replace__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char >::size_type arg4 ;
  char arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  char val5 ;
  int ecode5 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_replace" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_replace" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  ecode5 = SWIG_AsVal_char(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "string_replace" "', argument " "5"" of type '" "char""'");
  } 
  arg5 = static_cast< char >(val5);
  result = (std::basic_string< char > *) &(arg1)->replace(arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_copy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char *arg2 = (char *) 0 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char >::size_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_copy" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_copy" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_copy" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_copy" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  result = ((std::basic_string< char > const *)arg1)->copy(arg2,arg3,arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_copy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char *arg2 = (char *) 0 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_copy" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_copy" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_copy" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  result = ((std::basic_string< char > const *)arg1)->copy(arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_copy(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_copy", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_copy__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_copy__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_copy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::copy(char *,std::basic_string< char >::size_type,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::copy(char *,std::basic_string< char >::size_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_c_str(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_c_str" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  result = (char *)((std::basic_string< char > const *)arg1)->c_str();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char *arg2 = (char *) 0 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char >::size_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_find" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  result = ((std::basic_string< char > const *)arg1)->find((char const *)arg2,arg3,arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_find" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  result = ((std::basic_string< char > const *)arg1)->find((std::basic_string< char > const &)*arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_find" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((std::basic_string< char > const *)arg1)->find((std::basic_string< char > const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_find" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  result = ((std::basic_string< char > const *)arg1)->find(arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_find" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = ((std::basic_string< char > const *)arg1)->find(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_find", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string_find__SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_string_find__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_find__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_find__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_find__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_find'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::find(char const *,std::basic_string< char >::size_type,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find(std::basic_string< char > const &,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find(std::basic_string< char > const &) const\n"
    "    std::basic_string< char >::find(char,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find(char) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_rfind__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_rfind" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_rfind" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_rfind" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_rfind" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  result = ((std::basic_string< char > const *)arg1)->rfind((std::basic_string< char > const &)*arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_rfind__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_rfind" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_rfind" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_rfind" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((std::basic_string< char > const *)arg1)->rfind((std::basic_string< char > const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_rfind__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char *arg2 = (char *) 0 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char >::size_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_rfind" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_rfind" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_rfind" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_rfind" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  result = ((std::basic_string< char > const *)arg1)->rfind((char const *)arg2,arg3,arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_rfind__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_rfind" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_rfind" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_rfind" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  result = ((std::basic_string< char > const *)arg1)->rfind(arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_rfind__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_rfind" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_rfind" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = ((std::basic_string< char > const *)arg1)->rfind(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_rfind(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_rfind", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string_rfind__SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_string_rfind__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_rfind__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_rfind__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_rfind__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_rfind'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::rfind(std::basic_string< char > const &,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::rfind(std::basic_string< char > const &) const\n"
    "    std::basic_string< char >::rfind(char const *,std::basic_string< char >::size_type,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::rfind(char,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::rfind(char) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_find_first_of__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_first_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_first_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_find_first_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_first_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  result = ((std::basic_string< char > const *)arg1)->find_first_of((std::basic_string< char > const &)*arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_first_of__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_first_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_first_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_find_first_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((std::basic_string< char > const *)arg1)->find_first_of((std::basic_string< char > const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_first_of__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char *arg2 = (char *) 0 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char >::size_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_first_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_first_of" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_first_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_find_first_of" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  result = ((std::basic_string< char > const *)arg1)->find_first_of((char const *)arg2,arg3,arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_first_of__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_first_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_find_first_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_first_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  result = ((std::basic_string< char > const *)arg1)->find_first_of(arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_first_of__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_first_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_find_first_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = ((std::basic_string< char > const *)arg1)->find_first_of(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_first_of(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_find_first_of", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string_find_first_of__SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_string_find_first_of__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_find_first_of__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_find_first_of__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_find_first_of__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_find_first_of'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::find_first_of(std::basic_string< char > const &,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_first_of(std::basic_string< char > const &) const\n"
    "    std::basic_string< char >::find_first_of(char const *,std::basic_string< char >::size_type,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_first_of(char,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_first_of(char) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_find_last_of__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_last_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_last_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_find_last_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_last_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  result = ((std::basic_string< char > const *)arg1)->find_last_of((std::basic_string< char > const &)*arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_last_of__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_last_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_last_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_find_last_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((std::basic_string< char > const *)arg1)->find_last_of((std::basic_string< char > const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_last_of__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char *arg2 = (char *) 0 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char >::size_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_last_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_last_of" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_last_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_find_last_of" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  result = ((std::basic_string< char > const *)arg1)->find_last_of((char const *)arg2,arg3,arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_last_of__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_last_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_find_last_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_last_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  result = ((std::basic_string< char > const *)arg1)->find_last_of(arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_last_of__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_last_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_find_last_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = ((std::basic_string< char > const *)arg1)->find_last_of(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_last_of(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_find_last_of", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string_find_last_of__SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_string_find_last_of__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_find_last_of__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_find_last_of__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_find_last_of__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_find_last_of'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::find_last_of(std::basic_string< char > const &,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_last_of(std::basic_string< char > const &) const\n"
    "    std::basic_string< char >::find_last_of(char const *,std::basic_string< char >::size_type,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_last_of(char,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_last_of(char) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_find_first_not_of__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_first_not_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_first_not_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_find_first_not_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_first_not_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  result = ((std::basic_string< char > const *)arg1)->find_first_not_of((std::basic_string< char > const &)*arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_first_not_of__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_first_not_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_first_not_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_find_first_not_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((std::basic_string< char > const *)arg1)->find_first_not_of((std::basic_string< char > const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_first_not_of__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char *arg2 = (char *) 0 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char >::size_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_first_not_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_first_not_of" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_first_not_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_find_first_not_of" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  result = ((std::basic_string< char > const *)arg1)->find_first_not_of((char const *)arg2,arg3,arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_first_not_of__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_first_not_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_find_first_not_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_first_not_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  result = ((std::basic_string< char > const *)arg1)->find_first_not_of(arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_first_not_of__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_first_not_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_find_first_not_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = ((std::basic_string< char > const *)arg1)->find_first_not_of(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_first_not_of(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_find_first_not_of", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string_find_first_not_of__SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_string_find_first_not_of__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_find_first_not_of__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_find_first_not_of__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_find_first_not_of__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_find_first_not_of'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::find_first_not_of(std::basic_string< char > const &,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_first_not_of(std::basic_string< char > const &) const\n"
    "    std::basic_string< char >::find_first_not_of(char const *,std::basic_string< char >::size_type,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_first_not_of(char,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_first_not_of(char) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_find_last_not_of__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_last_not_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_last_not_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_find_last_not_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_last_not_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  result = ((std::basic_string< char > const *)arg1)->find_last_not_of((std::basic_string< char > const &)*arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_last_not_of__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_last_not_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_last_not_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_find_last_not_of" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((std::basic_string< char > const *)arg1)->find_last_not_of((std::basic_string< char > const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_last_not_of__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char *arg2 = (char *) 0 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char >::size_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_last_not_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_find_last_not_of" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_last_not_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_find_last_not_of" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  result = ((std::basic_string< char > const *)arg1)->find_last_not_of((char const *)arg2,arg3,arg4);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_last_not_of__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_last_not_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_find_last_not_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_find_last_not_of" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  result = ((std::basic_string< char > const *)arg1)->find_last_not_of(arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_last_not_of__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::basic_string< char >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_find_last_not_of" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_find_last_not_of" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = ((std::basic_string< char > const *)arg1)->find_last_not_of(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_find_last_not_of(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_find_last_not_of", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string_find_last_not_of__SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_string_find_last_not_of__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_find_last_not_of__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_find_last_not_of__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_find_last_not_of__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_find_last_not_of'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::find_last_not_of(std::basic_string< char > const &,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_last_not_of(std::basic_string< char > const &) const\n"
    "    std::basic_string< char >::find_last_not_of(char const *,std::basic_string< char >::size_type,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_last_not_of(char,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::find_last_not_of(char) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_substr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char >::size_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_string< char > result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_substr" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_substr" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_substr" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  result = ((std::basic_string< char > const *)arg1)->substr(arg2,arg3);
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_substr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::basic_string< char > result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_substr" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_substr" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  result = ((std::basic_string< char > const *)arg1)->substr(arg2);
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_substr__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_string< char > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_substr" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  result = ((std::basic_string< char > const *)arg1)->substr();
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_substr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_substr", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_string_substr__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string_substr__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_substr__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_substr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::substr(std::basic_string< char >::size_type,std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::substr(std::basic_string< char >::size_type) const\n"
    "    std::basic_string< char >::substr() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_string__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::basic_string< char > *)new std::basic_string< char >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_string__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res1 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_string" "', argument " "1"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_string" "', argument " "1"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::basic_string< char > *)new std::basic_string< char >((std::basic_string< char > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_empty" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  result = (bool)((std::basic_string< char > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_string< char >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_size" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  result = ((std::basic_string< char > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "string_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_swap" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_swap" "', argument " "2"" of type '" "std::basic_string< char > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_swap" "', argument " "2"" of type '" "std::basic_string< char > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_string< char > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_string< char >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_begin" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj((new std::basic_string< char >::iterator(static_cast< const std::basic_string< char >::iterator& >(result))), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_string< char >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_end" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj((new std::basic_string< char >::iterator(static_cast< const std::basic_string< char >::iterator& >(result))), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_string< char >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_rbegin" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj((new std::basic_string< char >::reverse_iterator(static_cast< const std::basic_string< char >::reverse_iterator& >(result))), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__reverse_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_string< char >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_rend" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj((new std::basic_string< char >::reverse_iterator(static_cast< const std::basic_string< char >::reverse_iterator& >(result))), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__reverse_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< char > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_get_allocator" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  result = ((std::basic_string< char > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::basic_string< char >::allocator_type(static_cast< const std::basic_string< char >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_char_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_resize" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_resize" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_erase__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::basic_string< char >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_erase" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_erase" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_erase" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
    } else {
      std::basic_string< char >::iterator * temp = reinterpret_cast< std::basic_string< char >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = std_basic_string_Sl_char_Sg__erase__SWIG_3(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new std::basic_string< char >::iterator(static_cast< const std::basic_string< char >::iterator& >(result))), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_erase__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::iterator arg2 ;
  std::basic_string< char >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::basic_string< char >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_erase" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_erase" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_erase" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
    } else {
      std::basic_string< char >::iterator * temp = reinterpret_cast< std::basic_string< char >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "string_erase" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_erase" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
    } else {
      std::basic_string< char >::iterator * temp = reinterpret_cast< std::basic_string< char >::iterator * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = std_basic_string_Sl_char_Sg__erase__SWIG_4(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new std::basic_string< char >::iterator(static_cast< const std::basic_string< char >::iterator& >(result))), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_string_erase__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_string_erase__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string_erase__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_string_erase__SWIG_4(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_erase__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::erase(std::basic_string< char >::size_type,std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::erase(std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::erase()\n"
    "    std::basic_string< char >::erase(std::basic_string< char >::iterator)\n"
    "    std::basic_string< char >::erase(std::basic_string< char >::iterator,std::basic_string< char >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_string__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char >::size_type arg1 ;
  std::basic_string< char >::value_type arg2 ;
  size_t val1 ;
  int ecode1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_string" "', argument " "1"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg1 = static_cast< std::basic_string< char >::size_type >(val1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_string" "', argument " "2"" of type '" "std::basic_string< char >::value_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::value_type >(val2);
  result = (std::basic_string< char > *)new std::basic_string< char >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_string(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_string", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_string__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_string__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_string__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_string__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_string'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::basic_string(char const *,std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::basic_string()\n"
    "    std::basic_string< char >::basic_string(std::basic_string< char > const &)\n"
    "    std::basic_string< char >::basic_string(std::basic_string< char >::size_type,std::basic_string< char >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_assign__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char >::value_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_assign" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_assign" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_assign" "', argument " "3"" of type '" "std::basic_string< char >::value_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::value_type >(val3);
  (arg1)->assign(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_assign(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_assign", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_string_assign__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_assign__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_assign__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_assign__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_assign'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::assign(std::basic_string< char > const &)\n"
    "    std::basic_string< char >::assign(std::basic_string< char > const &,std::basic_string< char >::size_type,std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::assign(char const *,std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::assign(std::basic_string< char >::size_type,std::basic_string< char >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::size_type arg2 ;
  std::basic_string< char >::value_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_resize" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_resize" "', argument " "2"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_resize" "', argument " "3"" of type '" "std::basic_string< char >::value_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::value_type >(val3);
  (arg1)->resize(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::resize(std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::resize(std::basic_string< char >::size_type,std::basic_string< char >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_insert__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::iterator arg2 ;
  std::basic_string< char >::value_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  std::basic_string< char >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_insert" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_insert" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_insert" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
    } else {
      std::basic_string< char >::iterator * temp = reinterpret_cast< std::basic_string< char >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_insert" "', argument " "3"" of type '" "std::basic_string< char >::value_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::value_type >(val3);
  result = std_basic_string_Sl_char_Sg__insert__SWIG_4(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new std::basic_string< char >::iterator(static_cast< const std::basic_string< char >::iterator& >(result))), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_insert__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::iterator arg2 ;
  std::basic_string< char >::size_type arg3 ;
  std::basic_string< char >::value_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_insert" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_insert" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_insert" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
    } else {
      std::basic_string< char >::iterator * temp = reinterpret_cast< std::basic_string< char >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_insert" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_char(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_insert" "', argument " "4"" of type '" "std::basic_string< char >::value_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::value_type >(val4);
  std_basic_string_Sl_char_Sg__insert__SWIG_5(arg1,arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_iterator" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  result = (swig::SwigPyIterator *)std_basic_string_Sl_char_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___nonzero__" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  result = (bool)std_basic_string_Sl_char_Sg____nonzero__((std::basic_string< char > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___bool__" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  result = (bool)std_basic_string_Sl_char_Sg____bool__((std::basic_string< char > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_string< char >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___len__" "', argument " "1"" of type '" "std::basic_string< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  result = std_basic_string_Sl_char_Sg____len__((std::basic_string< char > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::difference_type arg2 ;
  std::basic_string< char >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "string___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___getslice__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string___getslice__" "', argument " "2"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string___getslice__" "', argument " "3"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::difference_type >(val3);
  try {
    result = (std::basic_string< char,std::char_traits< char >,std::allocator< char > > *)std_basic_string_Sl_char_Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::difference_type arg2 ;
  std::basic_string< char >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___setslice__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string___setslice__" "', argument " "2"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string___setslice__" "', argument " "3"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::difference_type >(val3);
  try {
    std_basic_string_Sl_char_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::difference_type arg2 ;
  std::basic_string< char >::difference_type arg3 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___setslice__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string___setslice__" "', argument " "2"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string___setslice__" "', argument " "3"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::difference_type >(val3);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res4 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "string___setslice__" "', argument " "4"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___setslice__" "', argument " "4"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_basic_string_Sl_char_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "string___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[3], (std::basic_string<char>**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_string___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::__setslice__(std::basic_string< char >::difference_type,std::basic_string< char >::difference_type)\n"
    "    std::basic_string< char >::__setslice__(std::basic_string< char >::difference_type,std::basic_string< char >::difference_type,std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::difference_type arg2 ;
  std::basic_string< char >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "string___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___delslice__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string___delslice__" "', argument " "2"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string___delslice__" "', argument " "3"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::difference_type >(val3);
  try {
    std_basic_string_Sl_char_Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___delitem__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string___delitem__" "', argument " "2"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::difference_type >(val2);
  try {
    std_basic_string_Sl_char_Sg____delitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___getitem__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::basic_string< char,std::char_traits< char >,std::allocator< char > > *)std_basic_string_Sl_char_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___setitem__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res3 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "string___setitem__" "', argument " "3"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___setitem__" "', argument " "3"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_basic_string_Sl_char_Sg____setitem____SWIG_0(arg1,arg2,(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___setitem__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_basic_string_Sl_char_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___delitem__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_basic_string_Sl_char_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "string___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_string___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::__delitem__(std::basic_string< char >::difference_type)\n"
    "    std::basic_string< char >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::basic_string< char >::value_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___getitem__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string___getitem__" "', argument " "2"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::difference_type >(val2);
  try {
    result = (std::basic_string< char >::value_type)std_basic_string_Sl_char_Sg____getitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "string___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_string___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_string___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::__getitem__(PySliceObject *)\n"
    "    std::basic_string< char >::__getitem__(std::basic_string< char >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::difference_type arg2 ;
  std::basic_string< char >::value_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___setitem__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string___setitem__" "', argument " "2"" of type '" "std::basic_string< char >::difference_type""'");
  } 
  arg2 = static_cast< std::basic_string< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string___setitem__" "', argument " "3"" of type '" "std::basic_string< char >::value_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::value_type >(val3);
  try {
    std_basic_string_Sl_char_Sg____setitem____SWIG_2(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "string___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_string___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[2], (std::basic_string<char>**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_string___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::__setitem__(PySliceObject *,std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)\n"
    "    std::basic_string< char >::__setitem__(PySliceObject *)\n"
    "    std::basic_string< char >::__setitem__(std::basic_string< char >::difference_type,std::basic_string< char >::value_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_insert__SWIG_6(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::iterator arg2 ;
  std::basic_string< char >::size_type arg3 ;
  char arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_insert" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_insert" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_insert" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_insert" "', argument " "3"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg3 = static_cast< std::basic_string< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_char(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_insert" "', argument " "4"" of type '" "char""'");
  } 
  arg4 = static_cast< char >(val4);
  (arg1)->insert(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_insert", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_string_insert__SWIG_4(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[2], (std::basic_string<char>**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_string_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_insert__SWIG_5(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_insert__SWIG_6(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_insert__SWIG_3(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_string_insert__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[2], (std::basic_string<char>**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_string_insert__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::insert(std::basic_string< char >::size_type,std::basic_string< char > const &)\n"
    "    std::basic_string< char >::insert(std::basic_string< char >::size_type,std::basic_string< char > const &,std::basic_string< char >::size_type,std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::insert(std::basic_string< char >::size_type,char const *,std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::insert(std::basic_string< char >::size_type,std::basic_string< char >::size_type,char)\n"
    "    std::basic_string< char >::insert(std::basic_string< char >::iterator,std::basic_string< char >::value_type)\n"
    "    std::basic_string< char >::insert(std::basic_string< char >::iterator,std::basic_string< char >::size_type,std::basic_string< char >::value_type)\n"
    "    std::basic_string< char >::insert(std::basic_string< char >::iterator,std::basic_string< char >::size_type,char)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string_replace__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::iterator arg2 ;
  std::basic_string< char >::iterator arg3 ;
  std::basic_string< char > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  int res4 = SWIG_OLDOBJ ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_replace" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res4 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "string_replace" "', argument " "4"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_replace" "', argument " "4"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg4 = ptr;
  }
  result = (std::basic_string< char > *) &(arg1)->replace(arg2,arg3,(std::basic_string< char > const &)*arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_replace__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::iterator arg2 ;
  std::basic_string< char >::iterator arg3 ;
  char *arg4 = (char *) 0 ;
  std::basic_string< char >::size_type arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_replace" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "string_replace" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_size_t(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "string_replace" "', argument " "5"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg5 = static_cast< std::basic_string< char >::size_type >(val5);
  result = (std::basic_string< char > *) &(arg1)->replace(arg2,arg3,(char const *)arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_replace__SWIG_6(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::iterator arg2 ;
  std::basic_string< char >::iterator arg3 ;
  std::basic_string< char >::size_type arg4 ;
  char arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  size_t val4 ;
  int ecode4 = 0 ;
  char val5 ;
  int ecode5 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_replace" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  ecode4 = SWIG_AsVal_size_t(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "string_replace" "', argument " "4"" of type '" "std::basic_string< char >::size_type""'");
  } 
  arg4 = static_cast< std::basic_string< char >::size_type >(val4);
  ecode5 = SWIG_AsVal_char(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "string_replace" "', argument " "5"" of type '" "char""'");
  } 
  arg5 = static_cast< char >(val5);
  result = (std::basic_string< char > *) &(arg1)->replace(arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_replace__SWIG_7(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::iterator arg2 ;
  std::basic_string< char >::iterator arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_replace" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  res4 = SWIG_AsCharPtrAndSize(swig_obj[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "string_replace" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(swig_obj[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "string_replace" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  result = (std::basic_string< char > *) &(arg1)->replace(arg2,arg3,(char const *)arg4,(char const *)arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_replace__SWIG_8(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char >::iterator arg2 ;
  std::basic_string< char >::iterator arg3 ;
  std::basic_string< char >::const_iterator arg4 ;
  std::basic_string< char >::const_iterator arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  swig::SwigPyIterator *iter4 = 0 ;
  int res4 ;
  swig::SwigPyIterator *iter5 = 0 ;
  int res5 ;
  std::basic_string< char > *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_replace" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "2"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "3"" of type '" "std::basic_string< char >::iterator""'");
    }
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], SWIG_as_voidptrptr(&iter4), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res4) || !iter4) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "4"" of type '" "std::basic_string< char >::const_iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::const_iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::const_iterator > *>(iter4);
    if (iter_t) {
      arg4 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "4"" of type '" "std::basic_string< char >::const_iterator""'");
    }
  }
  res5 = SWIG_ConvertPtr(swig_obj[4], SWIG_as_voidptrptr(&iter5), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res5) || !iter5) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "5"" of type '" "std::basic_string< char >::const_iterator""'");
  } else {
    swig::SwigPyIterator_T<std::basic_string< char >::const_iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::const_iterator > *>(iter5);
    if (iter_t) {
      arg5 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_replace" "', argument " "5"" of type '" "std::basic_string< char >::const_iterator""'");
    }
  }
  result = (std::basic_string< char > *) &(arg1)->replace(arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_replace(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "string_replace", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
        if (_v) {
          int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[3], (std::basic_string<char>**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_string_replace__SWIG_4(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[3], (std::basic_string<char>**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_string_replace__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
        if (_v) {
          swig::SwigPyIterator *iter = 0;
          int res = SWIG_ConvertPtr(argv[3], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
          _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::const_iterator > *>(iter) != 0));
          if (_v) {
            swig::SwigPyIterator *iter = 0;
            int res = SWIG_ConvertPtr(argv[4], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
            _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::const_iterator > *>(iter) != 0));
            if (_v) {
              return _wrap_string_replace__SWIG_8(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_string_replace__SWIG_6(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_string_replace__SWIG_5(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::basic_string< char >::iterator > *>(iter) != 0));
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_string_replace__SWIG_7(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_string_replace__SWIG_3(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_string_replace__SWIG_2(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[3], (std::basic_string<char>**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_size_t(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_size_t(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_string_replace__SWIG_1(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'string_replace'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_string< char >::replace(std::basic_string< char >::size_type,std::basic_string< char >::size_type,std::basic_string< char > const &)\n"
    "    std::basic_string< char >::replace(std::basic_string< char >::size_type,std::basic_string< char >::size_type,std::basic_string< char > const &,std::basic_string< char >::size_type,std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::replace(std::basic_string< char >::size_type,std::basic_string< char >::size_type,char const *,std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::replace(std::basic_string< char >::size_type,std::basic_string< char >::size_type,std::basic_string< char >::size_type,char)\n"
    "    std::basic_string< char >::replace(std::basic_string< char >::iterator,std::basic_string< char >::iterator,std::basic_string< char > const &)\n"
    "    std::basic_string< char >::replace(std::basic_string< char >::iterator,std::basic_string< char >::iterator,char const *,std::basic_string< char >::size_type)\n"
    "    std::basic_string< char >::replace(std::basic_string< char >::iterator,std::basic_string< char >::iterator,std::basic_string< char >::size_type,char)\n"
    "    std::basic_string< char >::replace(std::basic_string< char >::iterator,std::basic_string< char >::iterator,char const *,char const *)\n"
    "    std::basic_string< char >::replace(std::basic_string< char >::iterator,std::basic_string< char >::iterator,std::basic_string< char >::const_iterator,std::basic_string< char >::const_iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_string___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::basic_string< char > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "string___iadd__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___iadd__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string___iadd__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___iadd__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::basic_string< char > *) &(arg1)->operator +=((std::basic_string< char > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "string___add__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___add__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string___add__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___add__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::basic_string< char,std::char_traits< char >,std::allocator< char > > *)std_basic_string_Sl_char_Sg____add__(arg1,(std::basic_string< char > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_string___radd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "string___radd__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___radd__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string___radd__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___radd__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::basic_string< char,std::char_traits< char >,std::allocator< char > > *)std_basic_string_Sl_char_Sg____radd__(arg1,(std::basic_string< char > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_string___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___str__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  result = std_basic_string_Sl_char_Sg____str__(arg1);
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_string___rlshift__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "string___rlshift__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___rlshift__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string___rlshift__" "', argument " "2"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___rlshift__" "', argument " "2"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &std_basic_string_Sl_char_Sg____rlshift__(arg1,*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_string___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "string___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___eq__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string___eq__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___eq__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_basic_string_Sl_char_Sg__operator_Se__Se_(arg1,(std::basic_string< char > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_string___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "string___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___ne__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string___ne__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___ne__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_basic_string_Sl_char_Sg__operator_SN__Se_(arg1,(std::basic_string< char > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_string___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "string___gt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___gt__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string___gt__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___gt__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_basic_string_Sl_char_Sg__operator_Sg_(arg1,(std::basic_string< char > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_string___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "string___lt__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___lt__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string___lt__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___lt__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_basic_string_Sl_char_Sg__operator_Sl_(arg1,(std::basic_string< char > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_string___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "string___ge__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___ge__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string___ge__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___ge__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_basic_string_Sl_char_Sg__operator_Sg__Se_(arg1,(std::basic_string< char > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_string___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  std::basic_string< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "string___le__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string___le__" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string___le__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string___le__" "', argument " "2"" of type '" "std::basic_string< char > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_basic_string_Sl_char_Sg__operator_Sl__Se_(arg1,(std::basic_string< char > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_delete_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_string< char > *arg1 = (std::basic_string< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_string" "', argument " "1"" of type '" "std::basic_string< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_string< char > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *string_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *string_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_ios_base_boolalpha_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_boolalpha is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_boolalpha_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::boolalpha));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_dec_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_dec is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_dec_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::dec));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_fixed_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_fixed is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_fixed_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::fixed));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_hex_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_hex is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_hex_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::hex));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_internal_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_internal is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_internal_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::internal));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_left_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_left is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_left_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::left));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_oct_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_oct is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_oct_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::oct));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_right_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_right is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_right_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::right));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_scientific_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_scientific is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_scientific_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::scientific));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_showbase_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showbase is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showbase_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showbase));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_showpoint_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showpoint is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showpoint_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showpoint));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_showpos_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_showpos is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_showpos_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::showpos));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_skipws_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_skipws is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_skipws_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::skipws));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_unitbuf_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_unitbuf is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_unitbuf_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::unitbuf));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_uppercase_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_uppercase is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_uppercase_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::uppercase));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_adjustfield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_adjustfield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_adjustfield_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::adjustfield));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_basefield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_basefield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_basefield_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::basefield));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_floatfield_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_floatfield is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_floatfield_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::floatfield));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_badbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_badbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_badbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::badbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_eofbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_eofbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_eofbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::eofbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_failbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_failbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_failbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::failbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_goodbit_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_goodbit is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_goodbit_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::goodbit));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_app_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_app is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_app_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::app));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_ate_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_ate is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_ate_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::ate));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_binary_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_binary is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_binary_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::binary));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_ios_base_in_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_ios_base_in is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_ios_base_in_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::in));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_out_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_out is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_out_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::out));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_trunc_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_trunc is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_trunc_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::trunc));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_beg_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_beg is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_beg_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::beg));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_cur_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_cur is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_cur_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::cur));
  return pyobj;
}


SWIGINTERN int Swig_var_ios_base_end_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ios_base_end is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ios_base_end_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(std::ios_base::end));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_ios_base_register_callback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::event_callback arg2 = (std::ios_base::event_callback) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_base_register_callback", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_register_callback" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_enum_std__ios_base__event_r_std__ios_base_int__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ios_base_register_callback" "', argument " "2"" of type '" "std::ios_base::event_callback""'"); 
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_base_register_callback" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->register_callback(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::ios_base::fmtflags result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_flags" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = (std::ios_base::fmtflags)((std::ios_base const *)arg1)->flags();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::ios_base::fmtflags result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_flags" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_flags" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  result = (std::ios_base::fmtflags)(arg1)->flags(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_flags(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_base_flags", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_flags__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_flags__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_base_flags'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::flags() const\n"
    "    std::ios_base::flags(std::ios_base::fmtflags)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_setf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::ios_base::fmtflags result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_setf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_setf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  result = (std::ios_base::fmtflags)(arg1)->setf(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  std::ios_base::fmtflags arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::ios_base::fmtflags result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_setf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_setf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_base_setf" "', argument " "3"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg3 = static_cast< std::ios_base::fmtflags >(val3);
  result = (std::ios_base::fmtflags)(arg1)->setf(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_setf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_base_setf", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_setf__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ios_base_setf__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_base_setf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::setf(std::ios_base::fmtflags)\n"
    "    std::ios_base::setf(std::ios_base::fmtflags,std::ios_base::fmtflags)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_unsetf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::ios_base::fmtflags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_base_unsetf", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_unsetf" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_unsetf" "', argument " "2"" of type '" "std::ios_base::fmtflags""'");
  } 
  arg2 = static_cast< std::ios_base::fmtflags >(val2);
  (arg1)->unsetf(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::streamsize result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_precision" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->precision();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::streamsize result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_precision" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_precision" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  result = (arg1)->precision(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_precision(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_base_precision", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_precision__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_precision__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_base_precision'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::precision() const\n"
    "    std::ios_base::precision(std::streamsize)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_width__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::streamsize result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_width" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->width();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::streamsize result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_width" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_width" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  result = (arg1)->width(arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_width(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_base_width", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_base_width__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ios_base, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_base_width__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_base_width'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::width() const\n"
    "    std::ios_base::width(std::streamsize)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ios_base_sync_with_stdio" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (bool)std::ios_base::sync_with_stdio(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  bool result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (bool)std::ios_base::sync_with_stdio();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_sync_with_stdio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_base_sync_with_stdio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_ios_base_sync_with_stdio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ios_base_sync_with_stdio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_base_sync_with_stdio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::ios_base::sync_with_stdio(bool)\n"
    "    std::ios_base::sync_with_stdio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_base_imbue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  std::locale *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::locale result;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_base_imbue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_imbue" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__locale,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_base_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_base_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  arg2 = reinterpret_cast< std::locale * >(argp2);
  result = (arg1)->imbue((std::locale const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_getloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::locale result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_getloc" "', argument " "1"" of type '" "std::ios_base const *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  result = ((std::ios_base const *)arg1)->getloc();
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_xalloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_base_xalloc", 0, 0, 0)) SWIG_fail;
  result = (int)std::ios_base::xalloc();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_iword(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  long *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_base_iword", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_iword" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_iword" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (long *) &(arg1)->iword(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_long, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_base_pword(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  void **result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_base_pword", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_base_pword" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_base_pword" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (void **) &(arg1)->pword(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ios_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ios_base *arg1 = (std::ios_base *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__ios_base, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ios_base" "', argument " "1"" of type '" "std::ios_base *""'"); 
  }
  arg1 = reinterpret_cast< std::ios_base * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ios_base_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__ios_base, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ios_rdstate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::ios_base::iostate result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdstate" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::ios_base::iostate)((std::basic_ios< char > const *)arg1)->rdstate();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_clear" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_clear" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->clear(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_clear" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_clear(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_clear", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_clear__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_clear__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_clear'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::clear(std::ios_base::iostate)\n"
    "    std::basic_ios< char >::clear()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_setstate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_setstate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_setstate" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_setstate" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->setstate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_good(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_good" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->good();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_eof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_eof" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->eof();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fail" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->fail();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_bad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_bad" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (bool)((std::basic_ios< char > const *)arg1)->bad();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::ios_base::iostate result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_exceptions" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::ios_base::iostate)((std::basic_ios< char > const *)arg1)->exceptions();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::ios_base::iostate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_exceptions" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_exceptions" "', argument " "2"" of type '" "std::ios_base::iostate""'");
  } 
  arg2 = static_cast< std::ios_base::iostate >(val2);
  (arg1)->exceptions(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_exceptions(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_exceptions", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_exceptions__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_exceptions__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_exceptions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::exceptions() const\n"
    "    std::basic_ios< char >::exceptions(std::ios_base::iostate)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ios(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ios< char > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ios" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ios< char > *)new std::basic_ios< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ios(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ios" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_tie" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *)((std::basic_ios< char > const *)arg1)->tie();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = (std::basic_ostream< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_tie" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_tie" "', argument " "2"" of type '" "std::basic_ostream< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_ostream< char,std::char_traits< char > > *)(arg1)->tie(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_tie(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_tie", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_tie__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ios_tie__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_tie'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::tie() const\n"
    "    std::basic_ios< char >::tie(std::basic_ostream< char,std::char_traits< char > > *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdbuf" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::basic_streambuf< char,std::char_traits< char > > *)((std::basic_ios< char > const *)arg1)->rdbuf();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_rdbuf" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_rdbuf" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_streambuf< char,std::char_traits< char > > *)(arg1)->rdbuf(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_rdbuf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_rdbuf", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_rdbuf__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ios_rdbuf__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_rdbuf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::rdbuf() const\n"
    "    std::basic_ios< char >::rdbuf(std::basic_streambuf< char,std::char_traits< char > > *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_copyfmt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_ios< char > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_copyfmt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_copyfmt" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_copyfmt" "', argument " "2"" of type '" "std::basic_ios< char > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_copyfmt" "', argument " "2"" of type '" "std::basic_ios< char > const &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_ios< char > * >(argp2);
  result = (std::basic_ios< char > *) &(arg1)->copyfmt((std::basic_ios< char > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ios< char >::char_type result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fill" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  result = (std::basic_ios< char >::char_type)((std::basic_ios< char > const *)arg1)->fill();
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  std::basic_ios< char >::char_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_fill" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_fill" "', argument " "2"" of type '" "std::basic_ios< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ios< char >::char_type >(val2);
  result = (std::basic_ios< char >::char_type)(arg1)->fill(arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_fill(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ios_fill", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ios_fill__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ios_fill__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ios_fill'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ios< char >::fill() const\n"
    "    std::basic_ios< char >::fill(std::basic_ios< char >::char_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ios_imbue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::locale *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::locale result;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_imbue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_imbue" "', argument " "1"" of type '" "std::basic_ios< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__locale,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ios_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ios_imbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  arg2 = reinterpret_cast< std::locale * >(argp2);
  result = (arg1)->imbue((std::locale const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_narrow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  std::basic_ios< char >::char_type arg2 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  char result;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_narrow", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_narrow" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_narrow" "', argument " "2"" of type '" "std::basic_ios< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ios< char >::char_type >(val2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ios_narrow" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  result = (char)((std::basic_ios< char > const *)arg1)->narrow(arg2,arg3);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ios_widen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ios< char > *arg1 = (std::basic_ios< char > *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_ios< char >::char_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "ios_widen", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ios_widen" "', argument " "1"" of type '" "std::basic_ios< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ios< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ios_widen" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  result = (std::basic_ios< char >::char_type)((std::basic_ios< char > const *)arg1)->widen(arg2);
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ios_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_iosT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ios_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_streambuf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_streambuf" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_pubimbue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  std::locale *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::locale result;
  
  if (!SWIG_Python_UnpackTuple(args, "streambuf_pubimbue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_pubimbue" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__locale,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "streambuf_pubimbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "streambuf_pubimbue" "', argument " "2"" of type '" "std::locale const &""'"); 
  }
  arg2 = reinterpret_cast< std::locale * >(argp2);
  result = (arg1)->pubimbue((std::locale const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_getloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::locale result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_getloc" "', argument " "1"" of type '" "std::basic_streambuf< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  result = ((std::basic_streambuf< char > const *)arg1)->getloc();
  resultobj = SWIG_NewPointerObj((new std::locale(static_cast< const std::locale& >(result))), SWIGTYPE_p_std__locale, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_pubsetbuf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  std::basic_streambuf< char >::char_type *arg2 = (std::basic_streambuf< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::basic_streambuf< char,std::char_traits< char > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "streambuf_pubsetbuf", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_pubsetbuf" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "streambuf_pubsetbuf" "', argument " "2"" of type '" "std::basic_streambuf< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "streambuf_pubsetbuf" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_streambuf< char,std::char_traits< char > > *)(arg1)->pubsetbuf(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_pubseekoff__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  std::basic_streambuf< char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  std::ios_base::openmode arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  std::basic_streambuf< char >::pos_type result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_pubseekoff" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streamoff,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "streambuf_pubseekoff" "', argument " "2"" of type '" "std::basic_streambuf< char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "streambuf_pubseekoff" "', argument " "2"" of type '" "std::basic_streambuf< char >::off_type""'");
    } else {
      std::basic_streambuf< char >::off_type * temp = reinterpret_cast< std::basic_streambuf< char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "streambuf_pubseekoff" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "streambuf_pubseekoff" "', argument " "4"" of type '" "std::ios_base::openmode""'");
  } 
  arg4 = static_cast< std::ios_base::openmode >(val4);
  result = (arg1)->pubseekoff(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new std::basic_streambuf< char >::pos_type(static_cast< const std::basic_streambuf< char >::pos_type& >(result))), SWIGTYPE_p_streampos, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_pubseekoff__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  std::basic_streambuf< char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::basic_streambuf< char >::pos_type result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_pubseekoff" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streamoff,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "streambuf_pubseekoff" "', argument " "2"" of type '" "std::basic_streambuf< char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "streambuf_pubseekoff" "', argument " "2"" of type '" "std::basic_streambuf< char >::off_type""'");
    } else {
      std::basic_streambuf< char >::off_type * temp = reinterpret_cast< std::basic_streambuf< char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "streambuf_pubseekoff" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  result = (arg1)->pubseekoff(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new std::basic_streambuf< char >::pos_type(static_cast< const std::basic_streambuf< char >::pos_type& >(result))), SWIGTYPE_p_streampos, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_pubseekoff(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "streambuf_pubseekoff", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streamoff, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_streambuf_pubseekoff__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streamoff, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_streambuf_pubseekoff__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'streambuf_pubseekoff'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_streambuf< char >::pubseekoff(std::basic_streambuf< char >::off_type,std::ios_base::seekdir,std::ios_base::openmode)\n"
    "    std::basic_streambuf< char >::pubseekoff(std::basic_streambuf< char >::off_type,std::ios_base::seekdir)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_streambuf_pubseekpos__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  std::basic_streambuf< char >::pos_type arg2 ;
  std::ios_base::openmode arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::basic_streambuf< char >::pos_type result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_pubseekpos" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streampos,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "streambuf_pubseekpos" "', argument " "2"" of type '" "std::basic_streambuf< char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "streambuf_pubseekpos" "', argument " "2"" of type '" "std::basic_streambuf< char >::pos_type""'");
    } else {
      std::basic_streambuf< char >::pos_type * temp = reinterpret_cast< std::basic_streambuf< char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "streambuf_pubseekpos" "', argument " "3"" of type '" "std::ios_base::openmode""'");
  } 
  arg3 = static_cast< std::ios_base::openmode >(val3);
  result = (arg1)->pubseekpos(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new std::basic_streambuf< char >::pos_type(static_cast< const std::basic_streambuf< char >::pos_type& >(result))), SWIGTYPE_p_streampos, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_pubseekpos__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  std::basic_streambuf< char >::pos_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::basic_streambuf< char >::pos_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_pubseekpos" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streampos,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "streambuf_pubseekpos" "', argument " "2"" of type '" "std::basic_streambuf< char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "streambuf_pubseekpos" "', argument " "2"" of type '" "std::basic_streambuf< char >::pos_type""'");
    } else {
      std::basic_streambuf< char >::pos_type * temp = reinterpret_cast< std::basic_streambuf< char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->pubseekpos(arg2);
  resultobj = SWIG_NewPointerObj((new std::basic_streambuf< char >::pos_type(static_cast< const std::basic_streambuf< char >::pos_type& >(result))), SWIGTYPE_p_streampos, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_pubseekpos(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "streambuf_pubseekpos", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streampos, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_streambuf_pubseekpos__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streampos, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_streambuf_pubseekpos__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'streambuf_pubseekpos'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_streambuf< char >::pubseekpos(std::basic_streambuf< char >::pos_type,std::ios_base::openmode)\n"
    "    std::basic_streambuf< char >::pubseekpos(std::basic_streambuf< char >::pos_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_streambuf_pubsync(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_pubsync" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  result = (int)(arg1)->pubsync();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_in_avail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::streamsize result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_in_avail" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  result = (arg1)->in_avail();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_snextc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_streambuf< char >::int_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_snextc" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  result = (std::basic_streambuf< char >::int_type)(arg1)->snextc();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_sbumpc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_streambuf< char >::int_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_sbumpc" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  result = (std::basic_streambuf< char >::int_type)(arg1)->sbumpc();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_sgetc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_streambuf< char >::int_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_sgetc" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  result = (std::basic_streambuf< char >::int_type)(arg1)->sgetc();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_sgetn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  std::basic_streambuf< char >::char_type *arg2 = (std::basic_streambuf< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::streamsize result;
  
  if (!SWIG_Python_UnpackTuple(args, "streambuf_sgetn", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_sgetn" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "streambuf_sgetn" "', argument " "2"" of type '" "std::basic_streambuf< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "streambuf_sgetn" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (arg1)->sgetn(arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_sputbackc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  std::basic_streambuf< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_streambuf< char >::int_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "streambuf_sputbackc", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_sputbackc" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "streambuf_sputbackc" "', argument " "2"" of type '" "std::basic_streambuf< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_streambuf< char >::char_type >(val2);
  result = (std::basic_streambuf< char >::int_type)(arg1)->sputbackc(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_sungetc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_streambuf< char >::int_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_sungetc" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  result = (std::basic_streambuf< char >::int_type)(arg1)->sungetc();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_sputc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  std::basic_streambuf< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_streambuf< char >::int_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "streambuf_sputc", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_sputc" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "streambuf_sputc" "', argument " "2"" of type '" "std::basic_streambuf< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_streambuf< char >::char_type >(val2);
  result = (std::basic_streambuf< char >::int_type)(arg1)->sputc(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_streambuf_sputn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char > *arg1 = (std::basic_streambuf< char > *) 0 ;
  std::basic_streambuf< char >::char_type *arg2 = (std::basic_streambuf< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::streamsize result;
  
  if (!SWIG_Python_UnpackTuple(args, "streambuf_sputn", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "streambuf_sputn" "', argument " "1"" of type '" "std::basic_streambuf< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "streambuf_sputn" "', argument " "2"" of type '" "std::basic_streambuf< char >::char_type const *""'");
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "streambuf_sputn" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (arg1)->sputn((std::basic_streambuf< char >::char_type const *)arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *streambuf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_cin_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cin is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cin_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cin), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_cout_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cout is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cout_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cout), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_cerr_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable cerr is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_cerr_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::cerr), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_clog_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable clog is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_clog_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&std::clog), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_ostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ostream< char > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ostream" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ostream< char > *)new std::basic_ostream< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ostream" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > &(*arg2)(std::basic_ostream< char,std::char_traits< char > > &) = (std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)""'"); 
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ios< char,std::char_traits< char > > &(*arg2)(std::basic_ios< char,std::char_traits< char > > &) = (std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)""'"); 
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::ios_base &(*arg2)(std::ios_base &) = (std::ios_base &(*)(std::ios_base &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::ios_base &(*)(std::ios_base &)""'"); 
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_6(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_7(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_8(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_9(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_10(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_11(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  unsigned long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "unsigned long long""'");
  } 
  arg2 = static_cast< unsigned long long >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_12(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_13(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_14(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long double""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream___lshift__" "', argument " "2"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_15(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "void const *""'"); 
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<((void const *)arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_16(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->operator <<(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift____SWIG_17(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream___lshift__" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream___lshift__" "', argument " "2"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &std_basic_ostream_Sl_char_Sg__operator_Sl__Sl___SWIG_17(arg1,(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream___lshift__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ostream___lshift__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_14(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_16(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_15(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_5(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_7(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_6(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_9(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_8(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_11(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_10(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_13(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ostream___lshift____SWIG_12(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream___lshift____SWIG_17(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_ostream_put(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ostream_put", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_put" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ostream_put" "', argument " "2"" of type '" "std::basic_ostream< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_ostream< char >::char_type >(val2);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->put(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::char_type *arg2 = (std::basic_ostream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ostream_write", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_write" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_write" "', argument " "2"" of type '" "std::basic_ostream< char >::char_type const *""'");
  }
  arg2 = reinterpret_cast< std::basic_ostream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ostream_write" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->write((std::basic_ostream< char >::char_type const *)arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_flush(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_flush" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->flush();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_tellp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ostream< char >::pos_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_tellp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  result = (arg1)->tellp();
  resultobj = SWIG_NewPointerObj((new std::basic_ostream< char >::pos_type(static_cast< const std::basic_ostream< char >::pos_type& >(result))), SWIGTYPE_p_streampos, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::pos_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_seekp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streampos,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::pos_type""'");
    } else {
      std::basic_ostream< char >::pos_type * temp = reinterpret_cast< std::basic_ostream< char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->seekp(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_ostream< char > *arg1 = (std::basic_ostream< char > *) 0 ;
  std::basic_ostream< char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostream_seekp" "', argument " "1"" of type '" "std::basic_ostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streamoff,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ostream_seekp" "', argument " "2"" of type '" "std::basic_ostream< char >::off_type""'");
    } else {
      std::basic_ostream< char >::off_type * temp = reinterpret_cast< std::basic_ostream< char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ostream_seekp" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &(arg1)->seekp(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostream_seekp(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ostream_seekp", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streampos, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ostream_seekp__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streamoff, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ostream_seekp__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ostream_seekp'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ostream< char >::seekp(std::basic_ostream< char >::pos_type)\n"
    "    std::basic_ostream< char >::seekp(std::basic_ostream< char >::off_type,std::ios_base::seekdir)\n");
  return 0;
}


SWIGINTERN PyObject *ostream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ostream_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_istream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_istream< char > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_istream" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_istream< char > *)new std::basic_istream< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_istream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_istream" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char,std::char_traits< char > > &(*arg2)(std::basic_istream< char,std::char_traits< char > > &) = (std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)""'"); 
    }
  }
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_ios< char,std::char_traits< char > > &(*arg2)(std::basic_ios< char,std::char_traits< char > > &) = (std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)""'"); 
    }
  }
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::ios_base &(*arg2)(std::ios_base &) = (std::ios_base &(*)(std::ios_base &)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[1], (void**)(&arg2), SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::ios_base &(*)(std::ios_base &)""'"); 
    }
  }
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  bool *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_bool,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "bool &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "bool &""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "short &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "short &""'"); 
  }
  arg2 = reinterpret_cast< short * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned short *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned short &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned short &""'"); 
  }
  arg2 = reinterpret_cast< unsigned short * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_6(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "int &""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_7(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned int &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned int &""'"); 
  }
  arg2 = reinterpret_cast< unsigned int * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_8(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long &""'"); 
  }
  arg2 = reinterpret_cast< long * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_9(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_unsigned_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long &""'"); 
  }
  arg2 = reinterpret_cast< unsigned long * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_10(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long long &""'"); 
  }
  arg2 = reinterpret_cast< long long * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_11(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  unsigned long long *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_unsigned_long_long,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long long &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "unsigned long long &""'"); 
  }
  arg2 = reinterpret_cast< unsigned long long * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_12(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "float &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "float &""'"); 
  }
  arg2 = reinterpret_cast< float * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_13(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "double &""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_14(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  long double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "long double &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "long double &""'"); 
  }
  arg2 = reinterpret_cast< long double * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_15(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_p_void,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "void *&""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream___rshift__" "', argument " "2"" of type '" "void *&""'"); 
  }
  arg2 = reinterpret_cast< void ** >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift____SWIG_16(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream___rshift__" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream___rshift__" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->operator >>(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream___rshift__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "istream___rshift__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertFunctionPtr(argv[1], &ptr, SWIGTYPE_p_f_r_std__ios_base__r_std__ios_base);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_bool, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_short, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_4(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_short, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_5(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_6(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_int, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_7(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_8(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_long, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_9(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long_long, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_10(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_long_long, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_11(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_12(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_13(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_14(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_void, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_15(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream___rshift____SWIG_16(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_istream_gcount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::streamsize result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_gcount" "', argument " "1"" of type '" "std::basic_istream< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = ((std::basic_istream< char > const *)arg1)->gcount();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char >::int_type result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char >::int_type)(arg1)->get();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_char,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_istream< char >::char_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  ecode4 = SWIG_AsVal_char(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "istream_get" "', argument " "4"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg4 = static_cast< std::basic_istream< char >::char_type >(val4);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = 0 ;
  std::basic_istream< char >::char_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_get" "', argument " "3"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg3 = static_cast< std::basic_istream< char >::char_type >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_streambuf< char,std::char_traits< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_get" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_get" "', argument " "2"" of type '" "std::basic_streambuf< char,std::char_traits< char > > &""'"); 
  }
  arg2 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->get(*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_get(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "istream_get", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_istream_get__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_char, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_get__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_get__SWIG_5(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_get__SWIG_4(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_get__SWIG_3(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_istream_get__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'istream_get'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istream< char >::get()\n"
    "    std::basic_istream< char >::get(std::basic_istream< char >::char_type &)\n"
    "    std::basic_istream< char >::get(std::basic_istream< char >::char_type *,std::streamsize,std::basic_istream< char >::char_type)\n"
    "    std::basic_istream< char >::get(std::basic_istream< char >::char_type *,std::streamsize)\n"
    "    std::basic_istream< char >::get(std::basic_streambuf< char,std::char_traits< char > > &,std::basic_istream< char >::char_type)\n"
    "    std::basic_istream< char >::get(std::basic_streambuf< char,std::char_traits< char > > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_istream_getline__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  std::basic_istream< char >::char_type arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  char val4 ;
  int ecode4 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_getline" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_getline" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_getline" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  ecode4 = SWIG_AsVal_char(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "istream_getline" "', argument " "4"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg4 = static_cast< std::basic_istream< char >::char_type >(val4);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->getline(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_getline" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_getline" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_getline" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->getline(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_getline(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "istream_getline", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_getline__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_istream_getline__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'istream_getline'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istream< char >::getline(std::basic_istream< char >::char_type *,std::streamsize,std::basic_istream< char >::char_type)\n"
    "    std::basic_istream< char >::getline(std::basic_istream< char >::char_type *,std::streamsize)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::streamsize arg2 ;
  std::basic_istream< char >::int_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_ignore" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_ignore" "', argument " "3"" of type '" "std::basic_istream< char >::int_type""'");
  } 
  arg3 = static_cast< std::basic_istream< char >::int_type >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->ignore(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::streamsize arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_ignore" "', argument " "2"" of type '" "std::streamsize""'");
  } 
  arg2 = static_cast< std::streamsize >(val2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->ignore(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_ignore" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->ignore();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_ignore(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "istream_ignore", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_istream_ignore__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_istream_ignore__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_ignore__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'istream_ignore'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istream< char >::ignore(std::streamsize,std::basic_istream< char >::int_type)\n"
    "    std::basic_istream< char >::ignore(std::streamsize)\n"
    "    std::basic_istream< char >::ignore()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_istream_peek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_istream< char >::int_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_peek" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char >::int_type)(arg1)->peek();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "istream_read", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_read" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_read" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_read" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->read(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_readsome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type *arg2 = (std::basic_istream< char >::char_type *) 0 ;
  std::streamsize arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::streamsize result;
  
  if (!SWIG_Python_UnpackTuple(args, "istream_readsome", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_readsome" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_readsome" "', argument " "2"" of type '" "std::basic_istream< char >::char_type *""'");
  }
  arg2 = reinterpret_cast< std::basic_istream< char >::char_type * >(buf2);
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_readsome" "', argument " "3"" of type '" "std::streamsize""'");
  } 
  arg3 = static_cast< std::streamsize >(val3);
  result = (arg1)->readsome(arg2,arg3);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_putback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::char_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "istream_putback", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_putback" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "istream_putback" "', argument " "2"" of type '" "std::basic_istream< char >::char_type""'");
  } 
  arg2 = static_cast< std::basic_istream< char >::char_type >(val2);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->putback(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_unget(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_unget" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->unget();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_sync(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_sync" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (int)(arg1)->sync();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_tellg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_istream< char >::pos_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_tellg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  result = (arg1)->tellg();
  resultobj = SWIG_NewPointerObj((new std::basic_istream< char >::pos_type(static_cast< const std::basic_istream< char >::pos_type& >(result))), SWIGTYPE_p_streampos, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::pos_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_seekg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streampos,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::pos_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::pos_type""'");
    } else {
      std::basic_istream< char >::pos_type * temp = reinterpret_cast< std::basic_istream< char >::pos_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->seekg(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istream< char > *arg1 = (std::basic_istream< char > *) 0 ;
  std::basic_istream< char >::off_type arg2 ;
  std::ios_base::seekdir arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::basic_istream< char,std::char_traits< char > > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istream_seekg" "', argument " "1"" of type '" "std::basic_istream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istream< char > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_streamoff,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::off_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istream_seekg" "', argument " "2"" of type '" "std::basic_istream< char >::off_type""'");
    } else {
      std::basic_istream< char >::off_type * temp = reinterpret_cast< std::basic_istream< char >::off_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "istream_seekg" "', argument " "3"" of type '" "std::ios_base::seekdir""'");
  } 
  arg3 = static_cast< std::ios_base::seekdir >(val3);
  result = (std::basic_istream< char,std::char_traits< char > > *) &(arg1)->seekg(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istream_seekg(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "istream_seekg", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streampos, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istream_seekg__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_streamoff, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_istream_seekg__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'istream_seekg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istream< char >::seekg(std::basic_istream< char >::pos_type)\n"
    "    std::basic_istream< char >::seekg(std::basic_istream< char >::off_type,std::ios_base::seekdir)\n");
  return 0;
}


SWIGINTERN PyObject *istream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *istream_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_iostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_streambuf< char,std::char_traits< char > > *arg1 = (std::basic_streambuf< char,std::char_traits< char > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_iostream< char > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_iostream" "', argument " "1"" of type '" "std::basic_streambuf< char,std::char_traits< char > > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_streambuf< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_iostream< char > *)new std::basic_iostream< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_iostream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_iostream< char > *arg1 = (std::basic_iostream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_iostream" "', argument " "1"" of type '" "std::basic_iostream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_iostream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *iostream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *iostream_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_endl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "endl" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "endl" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &std::SWIGTEMPLATEDISAMBIGUATOR endl< char,std::char_traits< char > >(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ends(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ends" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ends" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &std::SWIGTEMPLATEDISAMBIGUATOR ends< char,std::char_traits< char > >(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_flush(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_ostream< char,std::char_traits< char > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "flush" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "flush" "', argument " "1"" of type '" "std::basic_ostream< char,std::char_traits< char > > &""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  result = (std::basic_ostream< char,std::char_traits< char > > *) &std::SWIGTEMPLATEDISAMBIGUATOR flush< char,std::char_traits< char > >(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_istringstream__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base::openmode arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::basic_istringstream< char > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_istringstream" "', argument " "1"" of type '" "std::ios_base::openmode""'");
  } 
  arg1 = static_cast< std::ios_base::openmode >(val1);
  result = (std::basic_istringstream< char > *)new std::basic_istringstream< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_istringstream__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::basic_istringstream< char > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::basic_istringstream< char > *)new std::basic_istringstream< char >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_istringstream__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg1 = 0 ;
  std::ios_base::openmode arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  std::basic_istringstream< char > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res1 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_istringstream" "', argument " "1"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_istringstream" "', argument " "1"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_istringstream" "', argument " "2"" of type '" "std::ios_base::openmode""'");
  } 
  arg2 = static_cast< std::ios_base::openmode >(val2);
  result = (std::basic_istringstream< char > *)new std::basic_istringstream< char >((std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_istringstream__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::basic_istringstream< char > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res1 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_istringstream" "', argument " "1"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_istringstream" "', argument " "1"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::basic_istringstream< char > *)new std::basic_istringstream< char >((std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_istringstream(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_istringstream", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_istringstream__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_istringstream__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_istringstream__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_istringstream__SWIG_2(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_istringstream'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istringstream< char >::basic_istringstream(std::ios_base::openmode)\n"
    "    std::basic_istringstream< char >::basic_istringstream()\n"
    "    std::basic_istringstream< char >::basic_istringstream(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &,std::ios_base::openmode)\n"
    "    std::basic_istringstream< char >::basic_istringstream(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_istringstream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istringstream< char > *arg1 = (std::basic_istringstream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_istringstream" "', argument " "1"" of type '" "std::basic_istringstream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istringstream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istringstream_rdbuf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_istringstream< char > *arg1 = (std::basic_istringstream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_stringbuf< char,std::char_traits< char >,std::allocator< char > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istringstream_rdbuf" "', argument " "1"" of type '" "std::basic_istringstream< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istringstream< char > * >(argp1);
  result = (std::basic_stringbuf< char,std::char_traits< char >,std::allocator< char > > *)((std::basic_istringstream< char > const *)arg1)->rdbuf();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringbufT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istringstream_str__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istringstream< char > *arg1 = (std::basic_istringstream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istringstream_str" "', argument " "1"" of type '" "std::basic_istringstream< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istringstream< char > * >(argp1);
  result = ((std::basic_istringstream< char > const *)arg1)->str();
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_istringstream_str__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_istringstream< char > *arg1 = (std::basic_istringstream< char > *) 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "istringstream_str" "', argument " "1"" of type '" "std::basic_istringstream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_istringstream< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "istringstream_str" "', argument " "2"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "istringstream_str" "', argument " "2"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->str((std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_istringstream_str(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "istringstream_str", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_istringstream_str__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_istringstream_str__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'istringstream_str'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_istringstream< char >::str() const\n"
    "    std::basic_istringstream< char >::str(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *istringstream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *istringstream_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ostringstream__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base::openmode arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::basic_ostringstream< char > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ostringstream" "', argument " "1"" of type '" "std::ios_base::openmode""'");
  } 
  arg1 = static_cast< std::ios_base::openmode >(val1);
  result = (std::basic_ostringstream< char > *)new std::basic_ostringstream< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ostringstream__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::basic_ostringstream< char > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::basic_ostringstream< char > *)new std::basic_ostringstream< char >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ostringstream__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg1 = 0 ;
  std::ios_base::openmode arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  std::basic_ostringstream< char > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res1 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ostringstream" "', argument " "1"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ostringstream" "', argument " "1"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ostringstream" "', argument " "2"" of type '" "std::ios_base::openmode""'");
  } 
  arg2 = static_cast< std::ios_base::openmode >(val2);
  result = (std::basic_ostringstream< char > *)new std::basic_ostringstream< char >((std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ostringstream__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::basic_ostringstream< char > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res1 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ostringstream" "', argument " "1"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ostringstream" "', argument " "1"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::basic_ostringstream< char > *)new std::basic_ostringstream< char >((std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ostringstream(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ostringstream", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_ostringstream__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ostringstream__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ostringstream__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ostringstream__SWIG_2(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ostringstream'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_ostringstream< char >::basic_ostringstream(std::ios_base::openmode)\n"
    "    std::basic_ostringstream< char >::basic_ostringstream()\n"
    "    std::basic_ostringstream< char >::basic_ostringstream(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &,std::ios_base::openmode)\n"
    "    std::basic_ostringstream< char >::basic_ostringstream(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ostringstream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostringstream< char > *arg1 = (std::basic_ostringstream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ostringstream" "', argument " "1"" of type '" "std::basic_ostringstream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostringstream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostringstream_rdbuf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostringstream< char > *arg1 = (std::basic_ostringstream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_stringbuf< char,std::char_traits< char >,std::allocator< char > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostringstream_rdbuf" "', argument " "1"" of type '" "std::basic_ostringstream< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostringstream< char > * >(argp1);
  result = (std::basic_stringbuf< char,std::char_traits< char >,std::allocator< char > > *)((std::basic_ostringstream< char > const *)arg1)->rdbuf();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringbufT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ostringstream_str(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_ostringstream< char > *arg1 = (std::basic_ostringstream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ostringstream_str" "', argument " "1"" of type '" "std::basic_ostringstream< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_ostringstream< char > * >(argp1);
  result = ((std::basic_ostringstream< char > const *)arg1)->str();
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ostringstream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ostringstream_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_stringstream__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::ios_base::openmode arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::basic_stringstream< char > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_stringstream" "', argument " "1"" of type '" "std::ios_base::openmode""'");
  } 
  arg1 = static_cast< std::ios_base::openmode >(val1);
  result = (std::basic_stringstream< char > *)new std::basic_stringstream< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_stringstream__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::basic_stringstream< char > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::basic_stringstream< char > *)new std::basic_stringstream< char >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_stringstream__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg1 = 0 ;
  std::ios_base::openmode arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  std::basic_stringstream< char > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res1 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_stringstream" "', argument " "1"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_stringstream" "', argument " "1"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_stringstream" "', argument " "2"" of type '" "std::ios_base::openmode""'");
  } 
  arg2 = static_cast< std::ios_base::openmode >(val2);
  result = (std::basic_stringstream< char > *)new std::basic_stringstream< char >((std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_stringstream__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::basic_stringstream< char > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res1 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_stringstream" "', argument " "1"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_stringstream" "', argument " "1"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::basic_stringstream< char > *)new std::basic_stringstream< char >((std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_stringstream(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_stringstream", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_stringstream__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_stringstream__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_stringstream__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[0], (std::basic_string<char>**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_stringstream__SWIG_2(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_stringstream'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_stringstream< char >::basic_stringstream(std::ios_base::openmode)\n"
    "    std::basic_stringstream< char >::basic_stringstream()\n"
    "    std::basic_stringstream< char >::basic_stringstream(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &,std::ios_base::openmode)\n"
    "    std::basic_stringstream< char >::basic_stringstream(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_stringstream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_stringstream< char > *arg1 = (std::basic_stringstream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_stringstream" "', argument " "1"" of type '" "std::basic_stringstream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_stringstream< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_stringstream_rdbuf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::basic_stringstream< char > *arg1 = (std::basic_stringstream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::basic_stringbuf< char,std::char_traits< char >,std::allocator< char > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stringstream_rdbuf" "', argument " "1"" of type '" "std::basic_stringstream< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_stringstream< char > * >(argp1);
  result = (std::basic_stringbuf< char,std::char_traits< char >,std::allocator< char > > *)((std::basic_stringstream< char > const *)arg1)->rdbuf();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__basic_stringbufT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_stringstream_str__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_stringstream< char > *arg1 = (std::basic_stringstream< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stringstream_str" "', argument " "1"" of type '" "std::basic_stringstream< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_stringstream< char > * >(argp1);
  result = ((std::basic_stringstream< char > const *)arg1)->str();
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_stringstream_str__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::basic_stringstream< char > *arg1 = (std::basic_stringstream< char > *) 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "stringstream_str" "', argument " "1"" of type '" "std::basic_stringstream< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::basic_stringstream< char > * >(argp1);
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res2 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "stringstream_str" "', argument " "2"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "stringstream_str" "', argument " "2"" of type '" "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->str((std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_stringstream_str(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "stringstream_str", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_stringstream_str__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(argv[1], (std::basic_string<char>**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_stringstream_str__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'stringstream_str'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::basic_stringstream< char >::str() const\n"
    "    std::basic_stringstream< char >::str(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *stringstream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *stringstream_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_UIntDoublePair__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< unsigned int,double > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::pair< unsigned int,double > *)new std::pair< unsigned int,double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_unsigned_int_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UIntDoublePair__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  double arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  std::pair< unsigned int,double > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UIntDoublePair" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_UIntDoublePair" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (std::pair< unsigned int,double > *)new std::pair< unsigned int,double >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_unsigned_int_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UIntDoublePair__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::pair< unsigned int,double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::pair< unsigned int,double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::pair< unsigned int,double > *ptr = (std::pair< unsigned int,double > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UIntDoublePair" "', argument " "1"" of type '" "std::pair< unsigned int,double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UIntDoublePair" "', argument " "1"" of type '" "std::pair< unsigned int,double > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::pair< unsigned int,double > *)new std::pair< unsigned int,double >((std::pair< unsigned int,double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_unsigned_int_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UIntDoublePair(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_UIntDoublePair", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_UIntDoublePair__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair< unsigned int,double >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UIntDoublePair__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_UIntDoublePair__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_UIntDoublePair'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< unsigned int,double >::pair()\n"
    "    std::pair< unsigned int,double >::pair(unsigned int,double)\n"
    "    std::pair< unsigned int,double >::pair(std::pair< unsigned int,double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UIntDoublePair_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< unsigned int,double > *arg1 = (std::pair< unsigned int,double > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "UIntDoublePair_first_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_unsigned_int_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntDoublePair_first_set" "', argument " "1"" of type '" "std::pair< unsigned int,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< unsigned int,double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntDoublePair_first_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->first = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntDoublePair_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< unsigned int,double > *arg1 = (std::pair< unsigned int,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_unsigned_int_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntDoublePair_first_get" "', argument " "1"" of type '" "std::pair< unsigned int,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< unsigned int,double > * >(argp1);
  result = (unsigned int) ((arg1)->first);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntDoublePair_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< unsigned int,double > *arg1 = (std::pair< unsigned int,double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "UIntDoublePair_second_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_unsigned_int_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntDoublePair_second_set" "', argument " "1"" of type '" "std::pair< unsigned int,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< unsigned int,double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntDoublePair_second_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->second = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UIntDoublePair_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< unsigned int,double > *arg1 = (std::pair< unsigned int,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_unsigned_int_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntDoublePair_second_get" "', argument " "1"" of type '" "std::pair< unsigned int,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< unsigned int,double > * >(argp1);
  result = (double) ((arg1)->second);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UIntDoublePair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< unsigned int,double > *arg1 = (std::pair< unsigned int,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_unsigned_int_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UIntDoublePair" "', argument " "1"" of type '" "std::pair< unsigned int,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< unsigned int,double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UIntDoublePair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_unsigned_int_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *UIntDoublePair_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_DoubleDoublePair__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< double,double > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::pair< double,double > *)new std::pair< double,double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_double_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleDoublePair__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  std::pair< double,double > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleDoublePair" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DoubleDoublePair" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (std::pair< double,double > *)new std::pair< double,double >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_double_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleDoublePair__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::pair< double,double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::pair< double,double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::pair< double,double > *ptr = (std::pair< double,double > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DoubleDoublePair" "', argument " "1"" of type '" "std::pair< double,double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DoubleDoublePair" "', argument " "1"" of type '" "std::pair< double,double > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::pair< double,double > *)new std::pair< double,double >((std::pair< double,double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_double_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleDoublePair(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_DoubleDoublePair", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_DoubleDoublePair__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair< double,double >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DoubleDoublePair__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DoubleDoublePair__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_DoubleDoublePair'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< double,double >::pair()\n"
    "    std::pair< double,double >::pair(double,double)\n"
    "    std::pair< double,double >::pair(std::pair< double,double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleDoublePair_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > *arg1 = (std::pair< double,double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DoubleDoublePair_first_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_double_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleDoublePair_first_set" "', argument " "1"" of type '" "std::pair< double,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< double,double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleDoublePair_first_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->first = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleDoublePair_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > *arg1 = (std::pair< double,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_double_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleDoublePair_first_get" "', argument " "1"" of type '" "std::pair< double,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< double,double > * >(argp1);
  result = (double) ((arg1)->first);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleDoublePair_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > *arg1 = (std::pair< double,double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DoubleDoublePair_second_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_double_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleDoublePair_second_set" "', argument " "1"" of type '" "std::pair< double,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< double,double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleDoublePair_second_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->second = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleDoublePair_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > *arg1 = (std::pair< double,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_double_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleDoublePair_second_get" "', argument " "1"" of type '" "std::pair< double,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< double,double > * >(argp1);
  result = (double) ((arg1)->second);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DoubleDoublePair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > *arg1 = (std::pair< double,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_double_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleDoublePair" "', argument " "1"" of type '" "std::pair< double,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< double,double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DoubleDoublePair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_double_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DoubleDoublePair_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_BoolDoublePair__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< bool,double > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::pair< bool,double > *)new std::pair< bool,double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_bool_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BoolDoublePair__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  bool arg1 ;
  double arg2 ;
  bool val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  std::pair< bool,double > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BoolDoublePair" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BoolDoublePair" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (std::pair< bool,double > *)new std::pair< bool,double >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_bool_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BoolDoublePair__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::pair< bool,double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::pair< bool,double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::pair< bool,double > *ptr = (std::pair< bool,double > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BoolDoublePair" "', argument " "1"" of type '" "std::pair< bool,double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BoolDoublePair" "', argument " "1"" of type '" "std::pair< bool,double > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::pair< bool,double > *)new std::pair< bool,double >((std::pair< bool,double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_bool_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BoolDoublePair(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_BoolDoublePair", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_BoolDoublePair__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair< bool,double >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BoolDoublePair__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_BoolDoublePair__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_BoolDoublePair'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< bool,double >::pair()\n"
    "    std::pair< bool,double >::pair(bool,double)\n"
    "    std::pair< bool,double >::pair(std::pair< bool,double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BoolDoublePair_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< bool,double > *arg1 = (std::pair< bool,double > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BoolDoublePair_first_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_bool_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoolDoublePair_first_set" "', argument " "1"" of type '" "std::pair< bool,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< bool,double > * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BoolDoublePair_first_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->first = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoolDoublePair_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< bool,double > *arg1 = (std::pair< bool,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_bool_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoolDoublePair_first_get" "', argument " "1"" of type '" "std::pair< bool,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< bool,double > * >(argp1);
  result = (bool) ((arg1)->first);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoolDoublePair_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< bool,double > *arg1 = (std::pair< bool,double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BoolDoublePair_second_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_bool_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoolDoublePair_second_set" "', argument " "1"" of type '" "std::pair< bool,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< bool,double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BoolDoublePair_second_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->second = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoolDoublePair_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< bool,double > *arg1 = (std::pair< bool,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_bool_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoolDoublePair_second_get" "', argument " "1"" of type '" "std::pair< bool,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< bool,double > * >(argp1);
  result = (double) ((arg1)->second);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BoolDoublePair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< bool,double > *arg1 = (std::pair< bool,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_bool_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BoolDoublePair" "', argument " "1"" of type '" "std::pair< bool,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< bool,double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BoolDoublePair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_bool_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *BoolDoublePair_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_DoubleVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_iterator" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_double_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___nonzero__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___bool__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____bool__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___len__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = std_vector_Sl_double_Sg____len__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "DoubleVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___getslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___getslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    std_vector_Sl_double_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DoubleVector___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DoubleVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DoubleVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DoubleVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type)\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DoubleVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___delslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___delslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    std_vector_Sl_double_Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___delitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    std_vector_Sl_double_Sg____delitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_double_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DoubleVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_DoubleVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DoubleVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__delitem__(std::vector< double >::difference_type)\n"
    "    std::vector< double >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getitem__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___getitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg____getitem____SWIG_1((std::vector< double > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::vector< double >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DoubleVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_DoubleVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DoubleVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__getitem__(PySliceObject *)\n"
    "    std::vector< double >::__getitem__(std::vector< double >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_2(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DoubleVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_DoubleVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DoubleVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DoubleVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setitem__(PySliceObject *,std::vector< double,std::allocator< double > > const &)\n"
    "    std::vector< double >::__setitem__(PySliceObject *)\n"
    "    std::vector< double >::__setitem__(std::vector< double >::difference_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  try {
    result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DoubleVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_append" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_append" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< double > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< double > *)new std::vector< double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_empty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)((std::vector< double > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DoubleVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_swap" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DoubleVector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_begin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_end" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_rbegin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_rend" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< double > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_get_allocator" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< double >::allocator_type(static_cast< const std::vector< double >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = std_vector_Sl_double_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< double >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = std_vector_Sl_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DoubleVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_DoubleVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_DoubleVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DoubleVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::erase(std::vector< double >::iterator)\n"
    "    std::vector< double >::erase(std::vector< double >::iterator,std::vector< double >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< double > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DoubleVector" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_DoubleVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_DoubleVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DoubleVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_DoubleVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DoubleVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_push_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_push_back" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_front" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::vector< double >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_back" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::vector< double >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DoubleVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_assign" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_assign" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_assign" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_resize" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DoubleVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DoubleVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::resize(std::vector< double >::size_type)\n"
    "    std::vector< double >::resize(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  std::vector< double >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_insert" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_double_Sg__insert__SWIG_0(arg1,arg2,(double const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::size_type arg3 ;
  std::vector< double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_insert" "', argument " "3"" of type '" "std::vector< double >::size_type""'");
  } 
  arg3 = static_cast< std::vector< double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DoubleVector_insert" "', argument " "4"" of type '" "std::vector< double >::value_type""'");
  } 
  temp4 = static_cast< std::vector< double >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_double_Sg__insert__SWIG_1(arg1,arg2,arg3,(double const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DoubleVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DoubleVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DoubleVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::value_type const &)\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DoubleVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DoubleVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleVector" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DoubleVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DoubleVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PyFunctor1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  asepy::PyFunctor1 *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  {
    try {
      result = (asepy::PyFunctor1 *)new asepy::PyFunctor1(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_asepy__PyFunctor1, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PyFunctor1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  asepy::PyFunctor1 *arg1 = (asepy::PyFunctor1 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_asepy__PyFunctor1, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PyFunctor1" "', argument " "1"" of type '" "asepy::PyFunctor1 *""'"); 
  }
  arg1 = reinterpret_cast< asepy::PyFunctor1 * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyFunctor1___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  asepy::PyFunctor1 *arg1 = (asepy::PyFunctor1 *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "PyFunctor1___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_asepy__PyFunctor1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyFunctor1___call__" "', argument " "1"" of type '" "asepy::PyFunctor1 const *""'"); 
  }
  arg1 = reinterpret_cast< asepy::PyFunctor1 * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PyFunctor1___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((asepy::PyFunctor1 const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PyFunctor1_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_asepy__PyFunctor1, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PyFunctor1_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_AbsRNG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsRNG *arg1 = (ase::AbsRNG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsRNG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AbsRNG" "', argument " "1"" of type '" "ase::AbsRNG *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsRNG * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsRNG___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsRNG *arg1 = (ase::AbsRNG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsRNG___call__", 1, 1, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsRNG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsRNG___call__" "', argument " "1"" of type '" "ase::AbsRNG *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsRNG * >(argp1);
  {
    try {
      result = (double)(arg1)->operator ()();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsRNG_generate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsRNG *arg1 = (ase::AbsRNG *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::vector< double,std::allocator< double > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsRNG_generate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsRNG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsRNG_generate" "', argument " "1"" of type '" "ase::AbsRNG *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsRNG * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsRNG_generate" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ase_AbsRNG_generate(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AbsRNG_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__AbsRNG, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_AbsDistributionModel1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = (ase::AbsDistributionModel1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AbsDistributionModel1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsDistributionModel1D_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = (ase::AbsDistributionModel1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::AbsDistributionModel1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsDistributionModel1D_clone" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  {
    try {
      result = (ase::AbsDistributionModel1D *)((ase::AbsDistributionModel1D const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsDistributionModel1D_density(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = (ase::AbsDistributionModel1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsDistributionModel1D_density", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsDistributionModel1D_density" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsDistributionModel1D_density" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsDistributionModel1D const *)arg1)->density(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsDistributionModel1D_isDensityContinuous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = (ase::AbsDistributionModel1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsDistributionModel1D_isDensityContinuous" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  {
    try {
      result = (bool)((ase::AbsDistributionModel1D const *)arg1)->isDensityContinuous();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsDistributionModel1D_isNonNegative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = (ase::AbsDistributionModel1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsDistributionModel1D_isNonNegative" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  {
    try {
      result = (bool)((ase::AbsDistributionModel1D const *)arg1)->isNonNegative();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsDistributionModel1D_isUnimodal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = (ase::AbsDistributionModel1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsDistributionModel1D_isUnimodal" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  {
    try {
      result = (bool)((ase::AbsDistributionModel1D const *)arg1)->isUnimodal();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsDistributionModel1D_densityDerivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = (ase::AbsDistributionModel1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsDistributionModel1D_densityDerivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsDistributionModel1D_densityDerivative" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsDistributionModel1D_densityDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsDistributionModel1D const *)arg1)->densityDerivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsDistributionModel1D_cdf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = (ase::AbsDistributionModel1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsDistributionModel1D_cdf", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsDistributionModel1D_cdf" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsDistributionModel1D_cdf" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsDistributionModel1D const *)arg1)->cdf(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsDistributionModel1D_exceedance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = (ase::AbsDistributionModel1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsDistributionModel1D_exceedance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsDistributionModel1D_exceedance" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsDistributionModel1D_exceedance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsDistributionModel1D const *)arg1)->exceedance(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsDistributionModel1D_quantile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = (ase::AbsDistributionModel1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsDistributionModel1D_quantile", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsDistributionModel1D_quantile" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsDistributionModel1D_quantile" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsDistributionModel1D const *)arg1)->quantile(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsDistributionModel1D_invExceedance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = (ase::AbsDistributionModel1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsDistributionModel1D_invExceedance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsDistributionModel1D_invExceedance" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsDistributionModel1D_invExceedance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsDistributionModel1D const *)arg1)->invExceedance(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsDistributionModel1D_cumulant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = (ase::AbsDistributionModel1D *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsDistributionModel1D_cumulant", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsDistributionModel1D_cumulant" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsDistributionModel1D_cumulant" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (double)((ase::AbsDistributionModel1D const *)arg1)->cumulant(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsDistributionModel1D_mode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = (ase::AbsDistributionModel1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsDistributionModel1D_mode" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  {
    try {
      result = (double)((ase::AbsDistributionModel1D const *)arg1)->mode();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsDistributionModel1D_descentDelta__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = (ase::AbsDistributionModel1D *) 0 ;
  bool arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsDistributionModel1D_descentDelta" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsDistributionModel1D_descentDelta" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbsDistributionModel1D_descentDelta" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::AbsDistributionModel1D const *)arg1)->descentDelta(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsDistributionModel1D_descentDelta__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = (ase::AbsDistributionModel1D *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsDistributionModel1D_descentDelta" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsDistributionModel1D_descentDelta" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (double)((ase::AbsDistributionModel1D const *)arg1)->descentDelta(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsDistributionModel1D_descentDelta(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AbsDistributionModel1D_descentDelta", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsDistributionModel1D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AbsDistributionModel1D_descentDelta__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsDistributionModel1D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AbsDistributionModel1D_descentDelta__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AbsDistributionModel1D_descentDelta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::AbsDistributionModel1D::descentDelta(bool,double) const\n"
    "    ase::AbsDistributionModel1D::descentDelta(bool) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AbsDistributionModel1D_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = (ase::AbsDistributionModel1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsDistributionModel1D_classname" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  {
    try {
      result = ((ase::AbsDistributionModel1D const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsDistributionModel1D_random(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = (ase::AbsDistributionModel1D *) 0 ;
  ase::AbsRNG *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsDistributionModel1D_random", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsDistributionModel1D_random" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsRNG,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbsDistributionModel1D_random" "', argument " "2"" of type '" "ase::AbsRNG &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbsDistributionModel1D_random" "', argument " "2"" of type '" "ase::AbsRNG &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsRNG * >(argp2);
  {
    try {
      result = (double)((ase::AbsDistributionModel1D const *)arg1)->random(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsDistributionModel1D_qWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = (ase::AbsDistributionModel1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsDistributionModel1D_qWidth" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  {
    try {
      result = (double)((ase::AbsDistributionModel1D const *)arg1)->qWidth();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsDistributionModel1D_qAsymmetry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = (ase::AbsDistributionModel1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsDistributionModel1D_qAsymmetry" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  {
    try {
      result = (double)((ase::AbsDistributionModel1D const *)arg1)->qAsymmetry();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsDistributionModel1D_generate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = (ase::AbsDistributionModel1D *) 0 ;
  ase::AbsRNG *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< double,std::allocator< double > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsDistributionModel1D_generate", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsDistributionModel1D_generate" "', argument " "1"" of type '" "ase::AbsDistributionModel1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsRNG,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbsDistributionModel1D_generate" "', argument " "2"" of type '" "ase::AbsRNG &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbsDistributionModel1D_generate" "', argument " "2"" of type '" "ase::AbsRNG &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsRNG * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbsDistributionModel1D_generate" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = ase_AbsDistributionModel1D_generate(arg1,*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AbsDistributionModel1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_AbsLocationScaleFamily_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = (ase::AbsLocationScaleFamily *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::AbsLocationScaleFamily *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLocationScaleFamily, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLocationScaleFamily_clone" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  {
    try {
      result = (ase::AbsLocationScaleFamily *)((ase::AbsLocationScaleFamily const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__AbsLocationScaleFamily, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AbsLocationScaleFamily(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = (ase::AbsLocationScaleFamily *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLocationScaleFamily, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AbsLocationScaleFamily" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLocationScaleFamily_location(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = (ase::AbsLocationScaleFamily *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLocationScaleFamily, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLocationScaleFamily_location" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  {
    try {
      result = (double)((ase::AbsLocationScaleFamily const *)arg1)->location();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLocationScaleFamily_scale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = (ase::AbsLocationScaleFamily *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLocationScaleFamily, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLocationScaleFamily_scale" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  {
    try {
      result = (double)((ase::AbsLocationScaleFamily const *)arg1)->scale();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLocationScaleFamily_setLocation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = (ase::AbsLocationScaleFamily *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsLocationScaleFamily_setLocation", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLocationScaleFamily, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLocationScaleFamily_setLocation" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLocationScaleFamily_setLocation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setLocation(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLocationScaleFamily_setScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = (ase::AbsLocationScaleFamily *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsLocationScaleFamily_setScale", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLocationScaleFamily, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLocationScaleFamily_setScale" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLocationScaleFamily_setScale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setScale(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLocationScaleFamily_density(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = (ase::AbsLocationScaleFamily *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsLocationScaleFamily_density", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLocationScaleFamily, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLocationScaleFamily_density" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLocationScaleFamily_density" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsLocationScaleFamily const *)arg1)->density(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLocationScaleFamily_densityDerivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = (ase::AbsLocationScaleFamily *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsLocationScaleFamily_densityDerivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLocationScaleFamily, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLocationScaleFamily_densityDerivative" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLocationScaleFamily_densityDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsLocationScaleFamily const *)arg1)->densityDerivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLocationScaleFamily_cdf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = (ase::AbsLocationScaleFamily *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsLocationScaleFamily_cdf", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLocationScaleFamily, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLocationScaleFamily_cdf" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLocationScaleFamily_cdf" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsLocationScaleFamily const *)arg1)->cdf(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLocationScaleFamily_exceedance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = (ase::AbsLocationScaleFamily *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsLocationScaleFamily_exceedance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLocationScaleFamily, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLocationScaleFamily_exceedance" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLocationScaleFamily_exceedance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsLocationScaleFamily const *)arg1)->exceedance(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLocationScaleFamily_quantile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = (ase::AbsLocationScaleFamily *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsLocationScaleFamily_quantile", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLocationScaleFamily, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLocationScaleFamily_quantile" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLocationScaleFamily_quantile" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsLocationScaleFamily const *)arg1)->quantile(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLocationScaleFamily_invExceedance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = (ase::AbsLocationScaleFamily *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsLocationScaleFamily_invExceedance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLocationScaleFamily, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLocationScaleFamily_invExceedance" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLocationScaleFamily_invExceedance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsLocationScaleFamily const *)arg1)->invExceedance(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLocationScaleFamily_cumulant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = (ase::AbsLocationScaleFamily *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsLocationScaleFamily_cumulant", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLocationScaleFamily, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLocationScaleFamily_cumulant" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLocationScaleFamily_cumulant" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (double)((ase::AbsLocationScaleFamily const *)arg1)->cumulant(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLocationScaleFamily_mode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = (ase::AbsLocationScaleFamily *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLocationScaleFamily, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLocationScaleFamily_mode" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  {
    try {
      result = (double)((ase::AbsLocationScaleFamily const *)arg1)->mode();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLocationScaleFamily_descentDelta__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = (ase::AbsLocationScaleFamily *) 0 ;
  bool arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLocationScaleFamily, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLocationScaleFamily_descentDelta" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLocationScaleFamily_descentDelta" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbsLocationScaleFamily_descentDelta" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::AbsLocationScaleFamily const *)arg1)->descentDelta(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLocationScaleFamily_descentDelta__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = (ase::AbsLocationScaleFamily *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLocationScaleFamily, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLocationScaleFamily_descentDelta" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLocationScaleFamily_descentDelta" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (double)((ase::AbsLocationScaleFamily const *)arg1)->descentDelta(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLocationScaleFamily_descentDelta(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AbsLocationScaleFamily_descentDelta", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsLocationScaleFamily, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AbsLocationScaleFamily_descentDelta__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsLocationScaleFamily, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AbsLocationScaleFamily_descentDelta__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AbsLocationScaleFamily_descentDelta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::AbsLocationScaleFamily::descentDelta(bool,double) const\n"
    "    ase::AbsLocationScaleFamily::descentDelta(bool) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AbsLocationScaleFamily_random(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = (ase::AbsLocationScaleFamily *) 0 ;
  ase::AbsRNG *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsLocationScaleFamily_random", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLocationScaleFamily, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLocationScaleFamily_random" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsRNG,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbsLocationScaleFamily_random" "', argument " "2"" of type '" "ase::AbsRNG &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbsLocationScaleFamily_random" "', argument " "2"" of type '" "ase::AbsRNG &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsRNG * >(argp2);
  {
    try {
      result = (double)((ase::AbsLocationScaleFamily const *)arg1)->random(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLocationScaleFamily_qWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = (ase::AbsLocationScaleFamily *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLocationScaleFamily, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLocationScaleFamily_qWidth" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  {
    try {
      result = (double)((ase::AbsLocationScaleFamily const *)arg1)->qWidth();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLocationScaleFamily_qAsymmetry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = (ase::AbsLocationScaleFamily *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLocationScaleFamily, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLocationScaleFamily_qAsymmetry" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  {
    try {
      result = (double)((ase::AbsLocationScaleFamily const *)arg1)->qAsymmetry();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLocationScaleFamily_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = (ase::AbsLocationScaleFamily *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLocationScaleFamily, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLocationScaleFamily_classname" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  {
    try {
      result = ((ase::AbsLocationScaleFamily const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AbsLocationScaleFamily_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__AbsLocationScaleFamily, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DensityFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::DensityFunctor1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DensityFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DensityFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  {
    try {
      result = (ase::DensityFunctor1D *)new ase::DensityFunctor1D((ase::AbsDistributionModel1D const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DensityFunctor1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DensityFunctor1D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DensityFunctor1D *arg1 = (ase::DensityFunctor1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DensityFunctor1D___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DensityFunctor1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DensityFunctor1D___call__" "', argument " "1"" of type '" "ase::DensityFunctor1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DensityFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DensityFunctor1D___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::DensityFunctor1D const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DensityFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DensityFunctor1D *arg1 = (ase::DensityFunctor1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DensityFunctor1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DensityFunctor1D" "', argument " "1"" of type '" "ase::DensityFunctor1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::DensityFunctor1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DensityFunctor1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__DensityFunctor1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DensityFunctor1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_DensityDerivativeFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::DensityDerivativeFunctor1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DensityDerivativeFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DensityDerivativeFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  {
    try {
      result = (ase::DensityDerivativeFunctor1D *)new ase::DensityDerivativeFunctor1D((ase::AbsDistributionModel1D const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DensityDerivativeFunctor1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DensityDerivativeFunctor1D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DensityDerivativeFunctor1D *arg1 = (ase::DensityDerivativeFunctor1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DensityDerivativeFunctor1D___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DensityDerivativeFunctor1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DensityDerivativeFunctor1D___call__" "', argument " "1"" of type '" "ase::DensityDerivativeFunctor1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DensityDerivativeFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DensityDerivativeFunctor1D___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::DensityDerivativeFunctor1D const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DensityDerivativeFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DensityDerivativeFunctor1D *arg1 = (ase::DensityDerivativeFunctor1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DensityDerivativeFunctor1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DensityDerivativeFunctor1D" "', argument " "1"" of type '" "ase::DensityDerivativeFunctor1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::DensityDerivativeFunctor1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DensityDerivativeFunctor1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__DensityDerivativeFunctor1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DensityDerivativeFunctor1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ShiftedDensityFunctor1D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  double arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  ase::ShiftedDensityFunctor1D *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ShiftedDensityFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ShiftedDensityFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ShiftedDensityFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ShiftedDensityFunctor1D" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (ase::ShiftedDensityFunctor1D *)new ase::ShiftedDensityFunctor1D((ase::AbsDistributionModel1D const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ShiftedDensityFunctor1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShiftedDensityFunctor1D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  ase::ShiftedDensityFunctor1D *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ShiftedDensityFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ShiftedDensityFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ShiftedDensityFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (ase::ShiftedDensityFunctor1D *)new ase::ShiftedDensityFunctor1D((ase::AbsDistributionModel1D const &)*arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ShiftedDensityFunctor1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShiftedDensityFunctor1D(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ShiftedDensityFunctor1D", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ShiftedDensityFunctor1D__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ShiftedDensityFunctor1D__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ShiftedDensityFunctor1D'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::ShiftedDensityFunctor1D::ShiftedDensityFunctor1D(ase::AbsDistributionModel1D const &,double const,bool const)\n"
    "    ase::ShiftedDensityFunctor1D::ShiftedDensityFunctor1D(ase::AbsDistributionModel1D const &,double const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShiftedDensityFunctor1D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ShiftedDensityFunctor1D *arg1 = (ase::ShiftedDensityFunctor1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "ShiftedDensityFunctor1D___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ShiftedDensityFunctor1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShiftedDensityFunctor1D___call__" "', argument " "1"" of type '" "ase::ShiftedDensityFunctor1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ShiftedDensityFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShiftedDensityFunctor1D___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::ShiftedDensityFunctor1D const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ShiftedDensityFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ShiftedDensityFunctor1D *arg1 = (ase::ShiftedDensityFunctor1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ShiftedDensityFunctor1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ShiftedDensityFunctor1D" "', argument " "1"" of type '" "ase::ShiftedDensityFunctor1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::ShiftedDensityFunctor1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ShiftedDensityFunctor1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__ShiftedDensityFunctor1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ShiftedDensityFunctor1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_CdfFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::CdfFunctor1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CdfFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CdfFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  {
    try {
      result = (ase::CdfFunctor1D *)new ase::CdfFunctor1D((ase::AbsDistributionModel1D const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__CdfFunctor1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CdfFunctor1D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::CdfFunctor1D *arg1 = (ase::CdfFunctor1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "CdfFunctor1D___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__CdfFunctor1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CdfFunctor1D___call__" "', argument " "1"" of type '" "ase::CdfFunctor1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::CdfFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CdfFunctor1D___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::CdfFunctor1D const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CdfFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::CdfFunctor1D *arg1 = (ase::CdfFunctor1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__CdfFunctor1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CdfFunctor1D" "', argument " "1"" of type '" "ase::CdfFunctor1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::CdfFunctor1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CdfFunctor1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__CdfFunctor1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *CdfFunctor1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ExceedanceFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::ExceedanceFunctor1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExceedanceFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ExceedanceFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  {
    try {
      result = (ase::ExceedanceFunctor1D *)new ase::ExceedanceFunctor1D((ase::AbsDistributionModel1D const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ExceedanceFunctor1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExceedanceFunctor1D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ExceedanceFunctor1D *arg1 = (ase::ExceedanceFunctor1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "ExceedanceFunctor1D___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ExceedanceFunctor1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExceedanceFunctor1D___call__" "', argument " "1"" of type '" "ase::ExceedanceFunctor1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ExceedanceFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExceedanceFunctor1D___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::ExceedanceFunctor1D const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ExceedanceFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ExceedanceFunctor1D *arg1 = (ase::ExceedanceFunctor1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ExceedanceFunctor1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExceedanceFunctor1D" "', argument " "1"" of type '" "ase::ExceedanceFunctor1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::ExceedanceFunctor1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ExceedanceFunctor1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__ExceedanceFunctor1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ExceedanceFunctor1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_InvExceedanceFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::InvExceedanceFunctor1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InvExceedanceFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InvExceedanceFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  {
    try {
      result = (ase::InvExceedanceFunctor1D *)new ase::InvExceedanceFunctor1D((ase::AbsDistributionModel1D const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__InvExceedanceFunctor1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InvExceedanceFunctor1D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::InvExceedanceFunctor1D *arg1 = (ase::InvExceedanceFunctor1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "InvExceedanceFunctor1D___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__InvExceedanceFunctor1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InvExceedanceFunctor1D___call__" "', argument " "1"" of type '" "ase::InvExceedanceFunctor1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::InvExceedanceFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InvExceedanceFunctor1D___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::InvExceedanceFunctor1D const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InvExceedanceFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::InvExceedanceFunctor1D *arg1 = (ase::InvExceedanceFunctor1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__InvExceedanceFunctor1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InvExceedanceFunctor1D" "', argument " "1"" of type '" "ase::InvExceedanceFunctor1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::InvExceedanceFunctor1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InvExceedanceFunctor1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__InvExceedanceFunctor1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *InvExceedanceFunctor1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_QuantileFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::QuantileFunctor1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_QuantileFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_QuantileFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  {
    try {
      result = (ase::QuantileFunctor1D *)new ase::QuantileFunctor1D((ase::AbsDistributionModel1D const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__QuantileFunctor1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuantileFunctor1D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::QuantileFunctor1D *arg1 = (ase::QuantileFunctor1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "QuantileFunctor1D___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__QuantileFunctor1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuantileFunctor1D___call__" "', argument " "1"" of type '" "ase::QuantileFunctor1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::QuantileFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QuantileFunctor1D___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::QuantileFunctor1D const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_QuantileFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::QuantileFunctor1D *arg1 = (ase::QuantileFunctor1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__QuantileFunctor1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_QuantileFunctor1D" "', argument " "1"" of type '" "ase::QuantileFunctor1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::QuantileFunctor1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *QuantileFunctor1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__QuantileFunctor1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *QuantileFunctor1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_EntropyFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::EntropyFunctor1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EntropyFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EntropyFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  {
    try {
      result = (ase::EntropyFunctor1D *)new ase::EntropyFunctor1D((ase::AbsDistributionModel1D const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__EntropyFunctor1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EntropyFunctor1D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EntropyFunctor1D *arg1 = (ase::EntropyFunctor1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "EntropyFunctor1D___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EntropyFunctor1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EntropyFunctor1D___call__" "', argument " "1"" of type '" "ase::EntropyFunctor1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EntropyFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EntropyFunctor1D___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::EntropyFunctor1D const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EntropyFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EntropyFunctor1D *arg1 = (ase::EntropyFunctor1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EntropyFunctor1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EntropyFunctor1D" "', argument " "1"" of type '" "ase::EntropyFunctor1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::EntropyFunctor1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EntropyFunctor1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__EntropyFunctor1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *EntropyFunctor1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LogDensityFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::LogDensityFunctor1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LogDensityFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LogDensityFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  {
    try {
      result = (ase::LogDensityFunctor1D *)new ase::LogDensityFunctor1D((ase::AbsDistributionModel1D const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LogDensityFunctor1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogDensityFunctor1D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LogDensityFunctor1D *arg1 = (ase::LogDensityFunctor1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LogDensityFunctor1D___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LogDensityFunctor1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogDensityFunctor1D___call__" "', argument " "1"" of type '" "ase::LogDensityFunctor1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LogDensityFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LogDensityFunctor1D___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::LogDensityFunctor1D const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LogDensityFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LogDensityFunctor1D *arg1 = (ase::LogDensityFunctor1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LogDensityFunctor1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LogDensityFunctor1D" "', argument " "1"" of type '" "ase::LogDensityFunctor1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::LogDensityFunctor1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LogDensityFunctor1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__LogDensityFunctor1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LogDensityFunctor1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MomentFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  double arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::MomentFunctor1D *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_MomentFunctor1D", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MomentFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MomentFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MomentFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MomentFunctor1D" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (ase::MomentFunctor1D *)new ase::MomentFunctor1D((ase::AbsDistributionModel1D const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__MomentFunctor1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MomentFunctor1D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MomentFunctor1D *arg1 = (ase::MomentFunctor1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "MomentFunctor1D___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MomentFunctor1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MomentFunctor1D___call__" "', argument " "1"" of type '" "ase::MomentFunctor1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MomentFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MomentFunctor1D___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::MomentFunctor1D const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MomentFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MomentFunctor1D *arg1 = (ase::MomentFunctor1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MomentFunctor1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MomentFunctor1D" "', argument " "1"" of type '" "ase::MomentFunctor1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::MomentFunctor1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MomentFunctor1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__MomentFunctor1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MomentFunctor1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_RatioMomentFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  ase::AbsDistributionModel1D *arg2 = 0 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  ase::RatioMomentFunctor1D *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_RatioMomentFunctor1D", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RatioMomentFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RatioMomentFunctor1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RatioMomentFunctor1D" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RatioMomentFunctor1D" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RatioMomentFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RatioMomentFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (ase::RatioMomentFunctor1D *)new ase::RatioMomentFunctor1D((ase::AbsDistributionModel1D const &)*arg1,(ase::AbsDistributionModel1D const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__RatioMomentFunctor1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RatioMomentFunctor1D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::RatioMomentFunctor1D *arg1 = (ase::RatioMomentFunctor1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "RatioMomentFunctor1D___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__RatioMomentFunctor1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RatioMomentFunctor1D___call__" "', argument " "1"" of type '" "ase::RatioMomentFunctor1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::RatioMomentFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RatioMomentFunctor1D___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::RatioMomentFunctor1D const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RatioMomentFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::RatioMomentFunctor1D *arg1 = (ase::RatioMomentFunctor1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__RatioMomentFunctor1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RatioMomentFunctor1D" "', argument " "1"" of type '" "ase::RatioMomentFunctor1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::RatioMomentFunctor1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RatioMomentFunctor1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__RatioMomentFunctor1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RatioMomentFunctor1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_UnscaledCdfFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::UnscaledCdfFunctor1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsLocationScaleFamily,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnscaledCdfFunctor1D" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnscaledCdfFunctor1D" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  {
    try {
      result = (ase::UnscaledCdfFunctor1D *)new ase::UnscaledCdfFunctor1D((ase::AbsLocationScaleFamily const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__UnscaledCdfFunctor1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnscaledCdfFunctor1D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::UnscaledCdfFunctor1D *arg1 = (ase::UnscaledCdfFunctor1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "UnscaledCdfFunctor1D___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__UnscaledCdfFunctor1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnscaledCdfFunctor1D___call__" "', argument " "1"" of type '" "ase::UnscaledCdfFunctor1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::UnscaledCdfFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnscaledCdfFunctor1D___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::UnscaledCdfFunctor1D const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnscaledCdfFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::UnscaledCdfFunctor1D *arg1 = (ase::UnscaledCdfFunctor1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__UnscaledCdfFunctor1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnscaledCdfFunctor1D" "', argument " "1"" of type '" "ase::UnscaledCdfFunctor1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::UnscaledCdfFunctor1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnscaledCdfFunctor1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__UnscaledCdfFunctor1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *UnscaledCdfFunctor1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_UnscaledExceedanceFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::UnscaledExceedanceFunctor1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsLocationScaleFamily,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnscaledExceedanceFunctor1D" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnscaledExceedanceFunctor1D" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  {
    try {
      result = (ase::UnscaledExceedanceFunctor1D *)new ase::UnscaledExceedanceFunctor1D((ase::AbsLocationScaleFamily const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__UnscaledExceedanceFunctor1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnscaledExceedanceFunctor1D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::UnscaledExceedanceFunctor1D *arg1 = (ase::UnscaledExceedanceFunctor1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "UnscaledExceedanceFunctor1D___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__UnscaledExceedanceFunctor1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnscaledExceedanceFunctor1D___call__" "', argument " "1"" of type '" "ase::UnscaledExceedanceFunctor1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::UnscaledExceedanceFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnscaledExceedanceFunctor1D___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::UnscaledExceedanceFunctor1D const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnscaledExceedanceFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::UnscaledExceedanceFunctor1D *arg1 = (ase::UnscaledExceedanceFunctor1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__UnscaledExceedanceFunctor1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnscaledExceedanceFunctor1D" "', argument " "1"" of type '" "ase::UnscaledExceedanceFunctor1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::UnscaledExceedanceFunctor1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnscaledExceedanceFunctor1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__UnscaledExceedanceFunctor1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *UnscaledExceedanceFunctor1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_UnscaledQuantileFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::UnscaledQuantileFunctor1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsLocationScaleFamily,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnscaledQuantileFunctor1D" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnscaledQuantileFunctor1D" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  {
    try {
      result = (ase::UnscaledQuantileFunctor1D *)new ase::UnscaledQuantileFunctor1D((ase::AbsLocationScaleFamily const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__UnscaledQuantileFunctor1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnscaledQuantileFunctor1D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::UnscaledQuantileFunctor1D *arg1 = (ase::UnscaledQuantileFunctor1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "UnscaledQuantileFunctor1D___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__UnscaledQuantileFunctor1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnscaledQuantileFunctor1D___call__" "', argument " "1"" of type '" "ase::UnscaledQuantileFunctor1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::UnscaledQuantileFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnscaledQuantileFunctor1D___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::UnscaledQuantileFunctor1D const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnscaledQuantileFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::UnscaledQuantileFunctor1D *arg1 = (ase::UnscaledQuantileFunctor1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__UnscaledQuantileFunctor1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnscaledQuantileFunctor1D" "', argument " "1"" of type '" "ase::UnscaledQuantileFunctor1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::UnscaledQuantileFunctor1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnscaledQuantileFunctor1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__UnscaledQuantileFunctor1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *UnscaledQuantileFunctor1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_UnscaledInvExceedanceFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::UnscaledInvExceedanceFunctor1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsLocationScaleFamily,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnscaledInvExceedanceFunctor1D" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnscaledInvExceedanceFunctor1D" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  {
    try {
      result = (ase::UnscaledInvExceedanceFunctor1D *)new ase::UnscaledInvExceedanceFunctor1D((ase::AbsLocationScaleFamily const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__UnscaledInvExceedanceFunctor1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnscaledInvExceedanceFunctor1D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::UnscaledInvExceedanceFunctor1D *arg1 = (ase::UnscaledInvExceedanceFunctor1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "UnscaledInvExceedanceFunctor1D___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__UnscaledInvExceedanceFunctor1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnscaledInvExceedanceFunctor1D___call__" "', argument " "1"" of type '" "ase::UnscaledInvExceedanceFunctor1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::UnscaledInvExceedanceFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnscaledInvExceedanceFunctor1D___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::UnscaledInvExceedanceFunctor1D const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnscaledInvExceedanceFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::UnscaledInvExceedanceFunctor1D *arg1 = (ase::UnscaledInvExceedanceFunctor1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__UnscaledInvExceedanceFunctor1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnscaledInvExceedanceFunctor1D" "', argument " "1"" of type '" "ase::UnscaledInvExceedanceFunctor1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::UnscaledInvExceedanceFunctor1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnscaledInvExceedanceFunctor1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__UnscaledInvExceedanceFunctor1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *UnscaledInvExceedanceFunctor1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_UnscaledDensityFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::UnscaledDensityFunctor1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsLocationScaleFamily,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnscaledDensityFunctor1D" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnscaledDensityFunctor1D" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  {
    try {
      result = (ase::UnscaledDensityFunctor1D *)new ase::UnscaledDensityFunctor1D((ase::AbsLocationScaleFamily const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__UnscaledDensityFunctor1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnscaledDensityFunctor1D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::UnscaledDensityFunctor1D *arg1 = (ase::UnscaledDensityFunctor1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "UnscaledDensityFunctor1D___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__UnscaledDensityFunctor1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnscaledDensityFunctor1D___call__" "', argument " "1"" of type '" "ase::UnscaledDensityFunctor1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::UnscaledDensityFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnscaledDensityFunctor1D___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::UnscaledDensityFunctor1D const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnscaledDensityFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::UnscaledDensityFunctor1D *arg1 = (ase::UnscaledDensityFunctor1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__UnscaledDensityFunctor1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnscaledDensityFunctor1D" "', argument " "1"" of type '" "ase::UnscaledDensityFunctor1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::UnscaledDensityFunctor1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnscaledDensityFunctor1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__UnscaledDensityFunctor1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *UnscaledDensityFunctor1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_UnscaledDensityDerivativeFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::UnscaledDensityDerivativeFunctor1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsLocationScaleFamily,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnscaledDensityDerivativeFunctor1D" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnscaledDensityDerivativeFunctor1D" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  {
    try {
      result = (ase::UnscaledDensityDerivativeFunctor1D *)new ase::UnscaledDensityDerivativeFunctor1D((ase::AbsLocationScaleFamily const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__UnscaledDensityDerivativeFunctor1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnscaledDensityDerivativeFunctor1D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::UnscaledDensityDerivativeFunctor1D *arg1 = (ase::UnscaledDensityDerivativeFunctor1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "UnscaledDensityDerivativeFunctor1D___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__UnscaledDensityDerivativeFunctor1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnscaledDensityDerivativeFunctor1D___call__" "', argument " "1"" of type '" "ase::UnscaledDensityDerivativeFunctor1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::UnscaledDensityDerivativeFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnscaledDensityDerivativeFunctor1D___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::UnscaledDensityDerivativeFunctor1D const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnscaledDensityDerivativeFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::UnscaledDensityDerivativeFunctor1D *arg1 = (ase::UnscaledDensityDerivativeFunctor1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__UnscaledDensityDerivativeFunctor1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnscaledDensityDerivativeFunctor1D" "', argument " "1"" of type '" "ase::UnscaledDensityDerivativeFunctor1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::UnscaledDensityDerivativeFunctor1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnscaledDensityDerivativeFunctor1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__UnscaledDensityDerivativeFunctor1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *UnscaledDensityDerivativeFunctor1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_UnscaledMomentFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = 0 ;
  double arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::UnscaledMomentFunctor1D *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_UnscaledMomentFunctor1D", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsLocationScaleFamily,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnscaledMomentFunctor1D" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnscaledMomentFunctor1D" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_UnscaledMomentFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_UnscaledMomentFunctor1D" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (ase::UnscaledMomentFunctor1D *)new ase::UnscaledMomentFunctor1D((ase::AbsLocationScaleFamily const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__UnscaledMomentFunctor1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnscaledMomentFunctor1D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::UnscaledMomentFunctor1D *arg1 = (ase::UnscaledMomentFunctor1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "UnscaledMomentFunctor1D___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__UnscaledMomentFunctor1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnscaledMomentFunctor1D___call__" "', argument " "1"" of type '" "ase::UnscaledMomentFunctor1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::UnscaledMomentFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnscaledMomentFunctor1D___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::UnscaledMomentFunctor1D const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnscaledMomentFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::UnscaledMomentFunctor1D *arg1 = (ase::UnscaledMomentFunctor1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__UnscaledMomentFunctor1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnscaledMomentFunctor1D" "', argument " "1"" of type '" "ase::UnscaledMomentFunctor1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::UnscaledMomentFunctor1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnscaledMomentFunctor1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__UnscaledMomentFunctor1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *UnscaledMomentFunctor1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_UnscaledEntropyFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLocationScaleFamily *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::UnscaledEntropyFunctor1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsLocationScaleFamily,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UnscaledEntropyFunctor1D" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UnscaledEntropyFunctor1D" "', argument " "1"" of type '" "ase::AbsLocationScaleFamily const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLocationScaleFamily * >(argp1);
  {
    try {
      result = (ase::UnscaledEntropyFunctor1D *)new ase::UnscaledEntropyFunctor1D((ase::AbsLocationScaleFamily const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__UnscaledEntropyFunctor1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnscaledEntropyFunctor1D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::UnscaledEntropyFunctor1D *arg1 = (ase::UnscaledEntropyFunctor1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "UnscaledEntropyFunctor1D___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__UnscaledEntropyFunctor1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnscaledEntropyFunctor1D___call__" "', argument " "1"" of type '" "ase::UnscaledEntropyFunctor1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::UnscaledEntropyFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnscaledEntropyFunctor1D___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::UnscaledEntropyFunctor1D const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnscaledEntropyFunctor1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::UnscaledEntropyFunctor1D *arg1 = (ase::UnscaledEntropyFunctor1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__UnscaledEntropyFunctor1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnscaledEntropyFunctor1D" "', argument " "1"" of type '" "ase::UnscaledEntropyFunctor1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::UnscaledEntropyFunctor1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnscaledEntropyFunctor1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__UnscaledEntropyFunctor1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *UnscaledEntropyFunctor1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_NumericalConvolution__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  ase::AbsDistributionModel1D *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  ase::NumericalConvolution *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NumericalConvolution" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NumericalConvolution" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NumericalConvolution" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NumericalConvolution" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NumericalConvolution" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_NumericalConvolution" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (ase::NumericalConvolution *)new ase::NumericalConvolution((ase::AbsDistributionModel1D const &)*arg1,(ase::AbsDistributionModel1D const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__NumericalConvolution, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NumericalConvolution__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  ase::AbsDistributionModel1D *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  ase::NumericalConvolution *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NumericalConvolution" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NumericalConvolution" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NumericalConvolution" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NumericalConvolution" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NumericalConvolution" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (ase::NumericalConvolution *)new ase::NumericalConvolution((ase::AbsDistributionModel1D const &)*arg1,(ase::AbsDistributionModel1D const &)*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__NumericalConvolution, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NumericalConvolution(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_NumericalConvolution", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_NumericalConvolution__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_NumericalConvolution__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_NumericalConvolution'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::NumericalConvolution::NumericalConvolution(ase::AbsDistributionModel1D const &,ase::AbsDistributionModel1D const &,unsigned int,unsigned int)\n"
    "    ase::NumericalConvolution::NumericalConvolution(ase::AbsDistributionModel1D const &,ase::AbsDistributionModel1D const &,unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NumericalConvolution___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::NumericalConvolution *arg1 = (ase::NumericalConvolution *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "NumericalConvolution___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__NumericalConvolution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericalConvolution___call__" "', argument " "1"" of type '" "ase::NumericalConvolution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::NumericalConvolution * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NumericalConvolution___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::NumericalConvolution const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NumericalConvolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::NumericalConvolution *arg1 = (ase::NumericalConvolution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__NumericalConvolution, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NumericalConvolution" "', argument " "1"" of type '" "ase::NumericalConvolution *""'"); 
  }
  arg1 = reinterpret_cast< ase::NumericalConvolution * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NumericalConvolution_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__NumericalConvolution, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *NumericalConvolution_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_GaussianConvolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  ase::GaussianConvolution *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_GaussianConvolution", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GaussianConvolution" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GaussianConvolution" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GaussianConvolution" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GaussianConvolution" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GaussianConvolution" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (ase::GaussianConvolution *)new ase::GaussianConvolution((ase::AbsDistributionModel1D const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__GaussianConvolution, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianConvolution___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::GaussianConvolution *arg1 = (ase::GaussianConvolution *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "GaussianConvolution___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GaussianConvolution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianConvolution___call__" "', argument " "1"" of type '" "ase::GaussianConvolution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussianConvolution * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussianConvolution___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::GaussianConvolution const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GaussianConvolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::GaussianConvolution *arg1 = (ase::GaussianConvolution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GaussianConvolution, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GaussianConvolution" "', argument " "1"" of type '" "ase::GaussianConvolution *""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussianConvolution * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GaussianConvolution_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__GaussianConvolution, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *GaussianConvolution_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_FunctorTimesShiftedXHelperNConv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::NumericalConvolution *arg1 = 0 ;
  double arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_FunctorTimesShiftedXHelperNConv", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__NumericalConvolution,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FunctorTimesShiftedXHelperNConv" "', argument " "1"" of type '" "ase::NumericalConvolution const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FunctorTimesShiftedXHelperNConv" "', argument " "1"" of type '" "ase::NumericalConvolution const &""'"); 
  }
  arg1 = reinterpret_cast< ase::NumericalConvolution * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FunctorTimesShiftedXHelperNConv" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FunctorTimesShiftedXHelperNConv" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > *)new ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution >((ase::NumericalConvolution const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__FunctorTimesShiftedXHelperT_ase__NumericalConvolution_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FunctorTimesShiftedXHelperNConv___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > *arg1 = (ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "FunctorTimesShiftedXHelperNConv___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__FunctorTimesShiftedXHelperT_ase__NumericalConvolution_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctorTimesShiftedXHelperNConv___call__" "', argument " "1"" of type '" "ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FunctorTimesShiftedXHelperNConv___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FunctorTimesShiftedXHelperNConv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > *arg1 = (ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__FunctorTimesShiftedXHelperT_ase__NumericalConvolution_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FunctorTimesShiftedXHelperNConv" "', argument " "1"" of type '" "ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > *""'"); 
  }
  arg1 = reinterpret_cast< ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FunctorTimesShiftedXHelperNConv_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__FunctorTimesShiftedXHelperT_ase__NumericalConvolution_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *FunctorTimesShiftedXHelperNConv_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_FunctorTimesShiftedX__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::NumericalConvolution *arg1 = 0 ;
  double arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > > result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__NumericalConvolution,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctorTimesShiftedX" "', argument " "1"" of type '" "ase::NumericalConvolution const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FunctorTimesShiftedX" "', argument " "1"" of type '" "ase::NumericalConvolution const &""'"); 
  }
  arg1 = reinterpret_cast< ase::NumericalConvolution * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FunctorTimesShiftedX" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FunctorTimesShiftedX" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = ase::SWIGTEMPLATEDISAMBIGUATOR FunctorTimesShiftedX< ase::NumericalConvolution >((ase::NumericalConvolution const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution >(static_cast< const ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution >& >(result))), SWIGTYPE_p_ase__FunctorTimesShiftedXHelperT_ase__NumericalConvolution_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FunctorTimesShiftedXHelperGConv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::GaussianConvolution *arg1 = 0 ;
  double arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_FunctorTimesShiftedXHelperGConv", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__GaussianConvolution,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FunctorTimesShiftedXHelperGConv" "', argument " "1"" of type '" "ase::GaussianConvolution const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FunctorTimesShiftedXHelperGConv" "', argument " "1"" of type '" "ase::GaussianConvolution const &""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussianConvolution * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FunctorTimesShiftedXHelperGConv" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FunctorTimesShiftedXHelperGConv" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > *)new ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution >((ase::GaussianConvolution const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__FunctorTimesShiftedXHelperT_ase__GaussianConvolution_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FunctorTimesShiftedXHelperGConv___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > *arg1 = (ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "FunctorTimesShiftedXHelperGConv___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__FunctorTimesShiftedXHelperT_ase__GaussianConvolution_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctorTimesShiftedXHelperGConv___call__" "', argument " "1"" of type '" "ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FunctorTimesShiftedXHelperGConv___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FunctorTimesShiftedXHelperGConv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > *arg1 = (ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__FunctorTimesShiftedXHelperT_ase__GaussianConvolution_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FunctorTimesShiftedXHelperGConv" "', argument " "1"" of type '" "ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > *""'"); 
  }
  arg1 = reinterpret_cast< ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FunctorTimesShiftedXHelperGConv_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__FunctorTimesShiftedXHelperT_ase__GaussianConvolution_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *FunctorTimesShiftedXHelperGConv_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_FunctorTimesShiftedX__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::GaussianConvolution *arg1 = 0 ;
  double arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > > result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__GaussianConvolution,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctorTimesShiftedX" "', argument " "1"" of type '" "ase::GaussianConvolution const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FunctorTimesShiftedX" "', argument " "1"" of type '" "ase::GaussianConvolution const &""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussianConvolution * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FunctorTimesShiftedX" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FunctorTimesShiftedX" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = ase::SWIGTEMPLATEDISAMBIGUATOR FunctorTimesShiftedX< ase::GaussianConvolution >((ase::GaussianConvolution const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution >(static_cast< const ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution >& >(result))), SWIGTYPE_p_ase__FunctorTimesShiftedXHelperT_ase__GaussianConvolution_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FunctorTimesShiftedX(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FunctorTimesShiftedX", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__NumericalConvolution, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FunctorTimesShiftedX__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__GaussianConvolution, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FunctorTimesShiftedX__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FunctorTimesShiftedX'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::FunctorTimesShiftedX< ase::NumericalConvolution >(ase::NumericalConvolution const &,double const,unsigned int const)\n"
    "    ase::FunctorTimesShiftedX< ase::GaussianConvolution >(ase::GaussianConvolution const &,double const,unsigned int const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_FunctorTimesShiftedXRatioHelperNConv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::NumericalConvolution *arg1 = 0 ;
  ase::AbsDistributionModel1D *arg2 = 0 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_FunctorTimesShiftedXRatioHelperNConv", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__NumericalConvolution,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FunctorTimesShiftedXRatioHelperNConv" "', argument " "1"" of type '" "ase::NumericalConvolution const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FunctorTimesShiftedXRatioHelperNConv" "', argument " "1"" of type '" "ase::NumericalConvolution const &""'"); 
  }
  arg1 = reinterpret_cast< ase::NumericalConvolution * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_FunctorTimesShiftedXRatioHelperNConv" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FunctorTimesShiftedXRatioHelperNConv" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FunctorTimesShiftedXRatioHelperNConv" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_FunctorTimesShiftedXRatioHelperNConv" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution > *)new ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution >((ase::NumericalConvolution const &)*arg1,(ase::AbsDistributionModel1D const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__FunctorTimesShiftedXRatioHelperT_ase__NumericalConvolution_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FunctorTimesShiftedXRatioHelperNConv___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution > *arg1 = (ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "FunctorTimesShiftedXRatioHelperNConv___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__FunctorTimesShiftedXRatioHelperT_ase__NumericalConvolution_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctorTimesShiftedXRatioHelperNConv___call__" "', argument " "1"" of type '" "ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FunctorTimesShiftedXRatioHelperNConv___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FunctorTimesShiftedXRatioHelperNConv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution > *arg1 = (ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__FunctorTimesShiftedXRatioHelperT_ase__NumericalConvolution_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FunctorTimesShiftedXRatioHelperNConv" "', argument " "1"" of type '" "ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution > *""'"); 
  }
  arg1 = reinterpret_cast< ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FunctorTimesShiftedXRatioHelperNConv_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__FunctorTimesShiftedXRatioHelperT_ase__NumericalConvolution_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *FunctorTimesShiftedXRatioHelperNConv_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_FunctorTimesShiftedXRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::NumericalConvolution *arg1 = 0 ;
  ase::AbsDistributionModel1D *arg2 = 0 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  SwigValueWrapper< ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution > > result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__NumericalConvolution,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctorTimesShiftedXRatio" "', argument " "1"" of type '" "ase::NumericalConvolution const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FunctorTimesShiftedXRatio" "', argument " "1"" of type '" "ase::NumericalConvolution const &""'"); 
  }
  arg1 = reinterpret_cast< ase::NumericalConvolution * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FunctorTimesShiftedXRatio" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FunctorTimesShiftedXRatio" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FunctorTimesShiftedXRatio" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FunctorTimesShiftedXRatio" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = ase::SWIGTEMPLATEDISAMBIGUATOR FunctorTimesShiftedXRatio< ase::NumericalConvolution >((ase::NumericalConvolution const &)*arg1,(ase::AbsDistributionModel1D const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution >(static_cast< const ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution >& >(result))), SWIGTYPE_p_ase__FunctorTimesShiftedXRatioHelperT_ase__NumericalConvolution_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FunctorTimesShiftedXRatioHelperGConv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::GaussianConvolution *arg1 = 0 ;
  ase::AbsDistributionModel1D *arg2 = 0 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_FunctorTimesShiftedXRatioHelperGConv", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__GaussianConvolution,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FunctorTimesShiftedXRatioHelperGConv" "', argument " "1"" of type '" "ase::GaussianConvolution const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FunctorTimesShiftedXRatioHelperGConv" "', argument " "1"" of type '" "ase::GaussianConvolution const &""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussianConvolution * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_FunctorTimesShiftedXRatioHelperGConv" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FunctorTimesShiftedXRatioHelperGConv" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FunctorTimesShiftedXRatioHelperGConv" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_FunctorTimesShiftedXRatioHelperGConv" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution > *)new ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution >((ase::GaussianConvolution const &)*arg1,(ase::AbsDistributionModel1D const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__FunctorTimesShiftedXRatioHelperT_ase__GaussianConvolution_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FunctorTimesShiftedXRatioHelperGConv___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution > *arg1 = (ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "FunctorTimesShiftedXRatioHelperGConv___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__FunctorTimesShiftedXRatioHelperT_ase__GaussianConvolution_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctorTimesShiftedXRatioHelperGConv___call__" "', argument " "1"" of type '" "ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FunctorTimesShiftedXRatioHelperGConv___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FunctorTimesShiftedXRatioHelperGConv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution > *arg1 = (ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__FunctorTimesShiftedXRatioHelperT_ase__GaussianConvolution_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FunctorTimesShiftedXRatioHelperGConv" "', argument " "1"" of type '" "ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution > *""'"); 
  }
  arg1 = reinterpret_cast< ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FunctorTimesShiftedXRatioHelperGConv_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__FunctorTimesShiftedXRatioHelperT_ase__GaussianConvolution_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *FunctorTimesShiftedXRatioHelperGConv_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_FunctorTimesShiftedXRatio__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::GaussianConvolution *arg1 = 0 ;
  ase::AbsDistributionModel1D *arg2 = 0 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  SwigValueWrapper< ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution > > result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__GaussianConvolution,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctorTimesShiftedXRatio" "', argument " "1"" of type '" "ase::GaussianConvolution const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FunctorTimesShiftedXRatio" "', argument " "1"" of type '" "ase::GaussianConvolution const &""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussianConvolution * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FunctorTimesShiftedXRatio" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FunctorTimesShiftedXRatio" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FunctorTimesShiftedXRatio" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FunctorTimesShiftedXRatio" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = ase::SWIGTEMPLATEDISAMBIGUATOR FunctorTimesShiftedXRatio< ase::GaussianConvolution >((ase::GaussianConvolution const &)*arg1,(ase::AbsDistributionModel1D const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution >(static_cast< const ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution >& >(result))), SWIGTYPE_p_ase__FunctorTimesShiftedXRatioHelperT_ase__GaussianConvolution_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FunctorTimesShiftedXRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FunctorTimesShiftedXRatio", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__NumericalConvolution, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FunctorTimesShiftedXRatio__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__GaussianConvolution, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FunctorTimesShiftedXRatio__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FunctorTimesShiftedXRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::FunctorTimesShiftedXRatio< ase::NumericalConvolution >(ase::NumericalConvolution const &,ase::AbsDistributionModel1D const &,double const,unsigned int const)\n"
    "    ase::FunctorTimesShiftedXRatio< ase::GaussianConvolution >(ase::GaussianConvolution const &,ase::AbsDistributionModel1D const &,double const,unsigned int const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_GaussHermiteQuadrature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::GaussHermiteQuadrature *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GaussHermiteQuadrature" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (ase::GaussHermiteQuadrature *)new ase::GaussHermiteQuadrature(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__GaussHermiteQuadrature, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussHermiteQuadrature_npoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::GaussHermiteQuadrature *arg1 = (ase::GaussHermiteQuadrature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GaussHermiteQuadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussHermiteQuadrature_npoints" "', argument " "1"" of type '" "ase::GaussHermiteQuadrature const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussHermiteQuadrature * >(argp1);
  {
    try {
      result = (unsigned int)((ase::GaussHermiteQuadrature const *)arg1)->npoints();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussHermiteQuadrature_isAllowed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GaussHermiteQuadrature_isAllowed" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (bool)ase::GaussHermiteQuadrature::isAllowed(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussHermiteQuadrature_allowedNPonts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::vector< unsigned int,std::allocator< unsigned int > > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "GaussHermiteQuadrature_allowedNPonts", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::GaussHermiteQuadrature::allowedNPonts();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< unsigned int,std::allocator< unsigned int > >(static_cast< const std::vector< unsigned int,std::allocator< unsigned int > >& >(result))), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussHermiteQuadrature_minimalExactRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GaussHermiteQuadrature_minimalExactRule" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (unsigned int)ase::GaussHermiteQuadrature::minimalExactRule(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussHermiteQuadrature_integrateProb__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::GaussHermiteQuadrature *arg1 = (ase::GaussHermiteQuadrature *) 0 ;
  double arg2 ;
  double arg3 ;
  ase::RatioMomentFunctor1D *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GaussHermiteQuadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussHermiteQuadrature_integrateProb" "', argument " "1"" of type '" "ase::GaussHermiteQuadrature const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussHermiteQuadrature * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussHermiteQuadrature_integrateProb" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GaussHermiteQuadrature_integrateProb" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_ase__RatioMomentFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GaussHermiteQuadrature_integrateProb" "', argument " "4"" of type '" "ase::RatioMomentFunctor1D const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussHermiteQuadrature_integrateProb" "', argument " "4"" of type '" "ase::RatioMomentFunctor1D const &""'"); 
  }
  arg4 = reinterpret_cast< ase::RatioMomentFunctor1D * >(argp4);
  {
    try {
      result = (double)((ase::GaussHermiteQuadrature const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR integrateProb2< ase::RatioMomentFunctor1D >(arg2,arg3,(ase::RatioMomentFunctor1D const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussHermiteQuadrature_integrateProb__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::GaussHermiteQuadrature *arg1 = (ase::GaussHermiteQuadrature *) 0 ;
  double arg2 ;
  double arg3 ;
  asepy::PyFunctor1 *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GaussHermiteQuadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussHermiteQuadrature_integrateProb" "', argument " "1"" of type '" "ase::GaussHermiteQuadrature const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussHermiteQuadrature * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussHermiteQuadrature_integrateProb" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GaussHermiteQuadrature_integrateProb" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_asepy__PyFunctor1,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GaussHermiteQuadrature_integrateProb" "', argument " "4"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussHermiteQuadrature_integrateProb" "', argument " "4"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  arg4 = reinterpret_cast< asepy::PyFunctor1 * >(argp4);
  {
    try {
      result = (double)((ase::GaussHermiteQuadrature const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR integrateProb2< asepy::PyFunctor1 >(arg2,arg3,(asepy::PyFunctor1 const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussHermiteQuadrature_integrateProb__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::GaussHermiteQuadrature *arg1 = (ase::GaussHermiteQuadrature *) 0 ;
  double arg2 ;
  double arg3 ;
  ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GaussHermiteQuadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussHermiteQuadrature_integrateProb" "', argument " "1"" of type '" "ase::GaussHermiteQuadrature const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussHermiteQuadrature * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussHermiteQuadrature_integrateProb" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GaussHermiteQuadrature_integrateProb" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_ase__FunctorTimesShiftedXRatioHelperT_ase__NumericalConvolution_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GaussHermiteQuadrature_integrateProb" "', argument " "4"" of type '" "ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussHermiteQuadrature_integrateProb" "', argument " "4"" of type '" "ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution > const &""'"); 
  }
  arg4 = reinterpret_cast< ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution > * >(argp4);
  {
    try {
      result = (double)((ase::GaussHermiteQuadrature const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR integrateProb2< ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution > >(arg2,arg3,(ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution > const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussHermiteQuadrature_integrateProb__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::GaussHermiteQuadrature *arg1 = (ase::GaussHermiteQuadrature *) 0 ;
  double arg2 ;
  double arg3 ;
  ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GaussHermiteQuadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussHermiteQuadrature_integrateProb" "', argument " "1"" of type '" "ase::GaussHermiteQuadrature const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussHermiteQuadrature * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussHermiteQuadrature_integrateProb" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GaussHermiteQuadrature_integrateProb" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_ase__FunctorTimesShiftedXRatioHelperT_ase__GaussianConvolution_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "GaussHermiteQuadrature_integrateProb" "', argument " "4"" of type '" "ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussHermiteQuadrature_integrateProb" "', argument " "4"" of type '" "ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution > const &""'"); 
  }
  arg4 = reinterpret_cast< ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution > * >(argp4);
  {
    try {
      result = (double)((ase::GaussHermiteQuadrature const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR integrateProb2< ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution > >(arg2,arg3,(ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution > const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussHermiteQuadrature_integrateProb(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GaussHermiteQuadrature_integrateProb", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__GaussHermiteQuadrature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ase__RatioMomentFunctor1D, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_GaussHermiteQuadrature_integrateProb__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__GaussHermiteQuadrature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_asepy__PyFunctor1, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_GaussHermiteQuadrature_integrateProb__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__GaussHermiteQuadrature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ase__FunctorTimesShiftedXRatioHelperT_ase__NumericalConvolution_t, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_GaussHermiteQuadrature_integrateProb__SWIG_3(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__GaussHermiteQuadrature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ase__FunctorTimesShiftedXRatioHelperT_ase__GaussianConvolution_t, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_GaussHermiteQuadrature_integrateProb__SWIG_4(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GaussHermiteQuadrature_integrateProb'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::GaussHermiteQuadrature::integrateProb2< ase::RatioMomentFunctor1D >(double const,double const,ase::RatioMomentFunctor1D const &) const\n"
    "    ase::GaussHermiteQuadrature::integrateProb2< asepy::PyFunctor1 >(double const,double const,asepy::PyFunctor1 const &) const\n"
    "    ase::GaussHermiteQuadrature::integrateProb2< ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution > >(double const,double const,ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution > const &) const\n"
    "    ase::GaussHermiteQuadrature::integrateProb2< ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution > >(double const,double const,ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution > const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GaussHermiteQuadrature_integrate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::GaussHermiteQuadrature *arg1 = (ase::GaussHermiteQuadrature *) 0 ;
  asepy::PyFunctor1 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "GaussHermiteQuadrature_integrate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GaussHermiteQuadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussHermiteQuadrature_integrate" "', argument " "1"" of type '" "ase::GaussHermiteQuadrature const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussHermiteQuadrature * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_asepy__PyFunctor1,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussHermiteQuadrature_integrate" "', argument " "2"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussHermiteQuadrature_integrate" "', argument " "2"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  arg2 = reinterpret_cast< asepy::PyFunctor1 * >(argp2);
  {
    try {
      result = (double)((ase::GaussHermiteQuadrature const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR integrate2< asepy::PyFunctor1 >((asepy::PyFunctor1 const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GaussHermiteQuadrature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::GaussHermiteQuadrature *arg1 = (ase::GaussHermiteQuadrature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GaussHermiteQuadrature, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GaussHermiteQuadrature" "', argument " "1"" of type '" "ase::GaussHermiteQuadrature *""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussHermiteQuadrature * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GaussHermiteQuadrature_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__GaussHermiteQuadrature, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *GaussHermiteQuadrature_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_factorial(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned long result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "factorial" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (unsigned long)ase::factorial(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ldfactorial(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  long double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ldfactorial" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (long double)ase::ldfactorial(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_logfactorial(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned long arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  long double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_unsigned_SS_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "logfactorial" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    try {
      result = (long double)ase::logfactorial(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveQuadratic__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "solveQuadratic" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "solveQuadratic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "solveQuadratic" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "solveQuadratic" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (unsigned int)ase::solveQuadratic(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveQuadratic__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  long double arg1 ;
  long double arg2 ;
  long double *arg3 = (long double *) 0 ;
  long double *arg4 = (long double *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "solveQuadratic" "', argument " "1"" of type '" "long double""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "solveQuadratic" "', argument " "1"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "solveQuadratic" "', argument " "2"" of type '" "long double""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "solveQuadratic" "', argument " "2"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_long_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "solveQuadratic" "', argument " "3"" of type '" "long double *""'"); 
  }
  arg3 = reinterpret_cast< long double * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_long_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "solveQuadratic" "', argument " "4"" of type '" "long double *""'"); 
  }
  arg4 = reinterpret_cast< long double * >(argp4);
  {
    try {
      result = (unsigned int)ase::solveQuadratic(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_solveQuadratic(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "solveQuadratic", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_long_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_long_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_solveQuadratic__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_double, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_solveQuadratic__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'solveQuadratic'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::solveQuadratic(double,double,double *,double *)\n"
    "    ase::solveQuadratic(long double,long double,long double *,long double *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_solveCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double *arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  unsigned int result;
  
  if (!SWIG_Python_UnpackTuple(args, "solveCubic", 4, 4, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "solveCubic" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "solveCubic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "solveCubic" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "solveCubic" "', argument " "4"" of type '" "double [3]""'"); 
  } 
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (unsigned int)ase::solveCubic(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cubicMinimum01(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "cubicMinimum01", 4, 4, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cubicMinimum01" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cubicMinimum01" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cubicMinimum01" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cubicMinimum01" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = ase::cubicMinimum01(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cubicMaximum01(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "cubicMaximum01", 4, 4, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cubicMaximum01" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cubicMaximum01" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cubicMaximum01" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cubicMaximum01" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = ase::cubicMaximum01(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hermiteSeriesRoots(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long double *arg1 = (long double *) 0 ;
  unsigned int arg2 ;
  long double arg3 ;
  long double arg4 ;
  long double *arg5 = (long double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  unsigned int result;
  
  if (!SWIG_Python_UnpackTuple(args, "hermiteSeriesRoots", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_long_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hermiteSeriesRoots" "', argument " "1"" of type '" "long double const *""'"); 
  }
  arg1 = reinterpret_cast< long double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hermiteSeriesRoots" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "hermiteSeriesRoots" "', argument " "3"" of type '" "long double""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hermiteSeriesRoots" "', argument " "3"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "hermiteSeriesRoots" "', argument " "4"" of type '" "long double""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hermiteSeriesRoots" "', argument " "4"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_long_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "hermiteSeriesRoots" "', argument " "5"" of type '" "long double *""'"); 
  }
  arg5 = reinterpret_cast< long double * >(argp5);
  {
    try {
      result = (unsigned int)ase::hermiteSeriesRoots((long double const *)arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_linearValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "linearValue", 5, 5, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "linearValue" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "linearValue" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "linearValue" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "linearValue" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "linearValue" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (double)ase::linearValue(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Gaussian__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  ase::Gaussian *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Gaussian" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Gaussian" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (ase::Gaussian *)new ase::Gaussian(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__Gaussian, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Gaussian__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::Gaussian *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Gaussian" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Gaussian" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::Gaussian *)new ase::Gaussian((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__Gaussian, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Gaussian(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Gaussian", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Gaussian__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Gaussian__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Gaussian'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::Gaussian::Gaussian(double,double)\n"
    "    ase::Gaussian::Gaussian(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Gaussian_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Gaussian *arg1 = (ase::Gaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::Gaussian *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Gaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gaussian_clone" "', argument " "1"" of type '" "ase::Gaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Gaussian * >(argp1);
  {
    try {
      result = (ase::Gaussian *)((ase::Gaussian const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__Gaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Gaussian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Gaussian *arg1 = (ase::Gaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Gaussian, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Gaussian" "', argument " "1"" of type '" "ase::Gaussian *""'"); 
  }
  arg1 = reinterpret_cast< ase::Gaussian * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Gaussian_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Gaussian *arg1 = (ase::Gaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Gaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gaussian_classname" "', argument " "1"" of type '" "ase::Gaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Gaussian * >(argp1);
  {
    try {
      result = ((ase::Gaussian const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Gaussian_qWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Gaussian *arg1 = (ase::Gaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Gaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gaussian_qWidth" "', argument " "1"" of type '" "ase::Gaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Gaussian * >(argp1);
  {
    try {
      result = (double)((ase::Gaussian const *)arg1)->qWidth();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Gaussian_qAsymmetry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Gaussian *arg1 = (ase::Gaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Gaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gaussian_qAsymmetry" "', argument " "1"" of type '" "ase::Gaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Gaussian * >(argp1);
  {
    try {
      result = (double)((ase::Gaussian const *)arg1)->qAsymmetry();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Gaussian_entropy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Gaussian *arg1 = (ase::Gaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Gaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gaussian_entropy" "', argument " "1"" of type '" "ase::Gaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Gaussian * >(argp1);
  {
    try {
      result = (double)((ase::Gaussian const *)arg1)->entropy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Gaussian_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::Gaussian *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "Gaussian_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Gaussian_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Gaussian_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Gaussian_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::Gaussian *)ase::Gaussian::fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__Gaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Gaussian_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__Gaussian, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Gaussian_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymbetaDoubleIntegral__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< double > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (ase::SymbetaDoubleIntegral< double > *)new ase::SymbetaDoubleIntegral< double >();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymbetaDoubleIntegral__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymbetaDoubleIntegral< double > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymbetaDoubleIntegral" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymbetaDoubleIntegral" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymbetaDoubleIntegral" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SymbetaDoubleIntegral" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SymbetaDoubleIntegral< double > *)new ase::SymbetaDoubleIntegral< double >(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymbetaDoubleIntegral(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymbetaDoubleIntegral", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_SymbetaDoubleIntegral__SWIG_0(self, argc, argv);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_SymbetaDoubleIntegral__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymbetaDoubleIntegral'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymbetaDoubleIntegral< double >::SymbetaDoubleIntegral()\n"
    "    ase::SymbetaDoubleIntegral< double >::SymbetaDoubleIntegral(unsigned int const,double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymbetaDoubleIntegral_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< double > *arg1 = (ase::SymbetaDoubleIntegral< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymbetaDoubleIntegral_p" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< double > * >(argp1);
  {
    try {
      result = (unsigned int)((ase::SymbetaDoubleIntegral< double > const *)arg1)->p();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymbetaDoubleIntegral_h(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< double > *arg1 = (ase::SymbetaDoubleIntegral< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymbetaDoubleIntegral_h" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< double > * >(argp1);
  {
    try {
      result = (double)((ase::SymbetaDoubleIntegral< double > const *)arg1)->h();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymbetaDoubleIntegral_a(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< double > *arg1 = (ase::SymbetaDoubleIntegral< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymbetaDoubleIntegral_a" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< double > * >(argp1);
  {
    try {
      result = (double)((ase::SymbetaDoubleIntegral< double > const *)arg1)->a();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymbetaDoubleIntegral_k(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< double > *arg1 = (ase::SymbetaDoubleIntegral< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymbetaDoubleIntegral_k" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< double > * >(argp1);
  {
    try {
      result = (double)((ase::SymbetaDoubleIntegral< double > const *)arg1)->k();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymbetaDoubleIntegral_hasExtremum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< double > *arg1 = (ase::SymbetaDoubleIntegral< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymbetaDoubleIntegral_hasExtremum" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< double > * >(argp1);
  {
    try {
      result = (bool)((ase::SymbetaDoubleIntegral< double > const *)arg1)->hasExtremum();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymbetaDoubleIntegral_isFlat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< double > *arg1 = (ase::SymbetaDoubleIntegral< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymbetaDoubleIntegral_isFlat" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< double > * >(argp1);
  {
    try {
      result = (bool)((ase::SymbetaDoubleIntegral< double > const *)arg1)->isFlat();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymbetaDoubleIntegral_extremum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< double > *arg1 = (ase::SymbetaDoubleIntegral< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::pair< double,double > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymbetaDoubleIntegral_extremum" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< double > * >(argp1);
  {
    try {
      result = ((ase::SymbetaDoubleIntegral< double > const *)arg1)->extremum();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymbetaDoubleIntegral___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< double > *arg1 = (ase::SymbetaDoubleIntegral< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymbetaDoubleIntegral___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymbetaDoubleIntegral___call__" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymbetaDoubleIntegral___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::SymbetaDoubleIntegral< double > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymbetaDoubleIntegral_derivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< double > *arg1 = (ase::SymbetaDoubleIntegral< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymbetaDoubleIntegral_derivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymbetaDoubleIntegral_derivative" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymbetaDoubleIntegral_derivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::SymbetaDoubleIntegral< double > const *)arg1)->derivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymbetaDoubleIntegral_secondDerivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< double > *arg1 = (ase::SymbetaDoubleIntegral< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymbetaDoubleIntegral_secondDerivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymbetaDoubleIntegral_secondDerivative" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymbetaDoubleIntegral_secondDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::SymbetaDoubleIntegral< double > const *)arg1)->secondDerivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymbetaDoubleIntegral_zoneContinuation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< double > *arg1 = (ase::SymbetaDoubleIntegral< double > *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymbetaDoubleIntegral_zoneContinuation", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymbetaDoubleIntegral_zoneContinuation" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymbetaDoubleIntegral_zoneContinuation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymbetaDoubleIntegral_zoneContinuation" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::SymbetaDoubleIntegral< double > const *)arg1)->zoneContinuation(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymbetaDoubleIntegral_inverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< double > *arg1 = (ase::SymbetaDoubleIntegral< double > *) 0 ;
  double arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  unsigned int result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymbetaDoubleIntegral_inverse", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymbetaDoubleIntegral_inverse" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymbetaDoubleIntegral_inverse" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SymbetaDoubleIntegral_inverse" "', argument " "3"" of type '" "double [2]""'"); 
  } 
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      result = (unsigned int)((ase::SymbetaDoubleIntegral< double > const *)arg1)->inverse(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymbetaDoubleIntegral_fromSigmas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  bool arg5 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  ase::SymbetaDoubleIntegral< double > result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymbetaDoubleIntegral_fromSigmas" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymbetaDoubleIntegral_fromSigmas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymbetaDoubleIntegral_fromSigmas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymbetaDoubleIntegral_fromSigmas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SymbetaDoubleIntegral_fromSigmas" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      result = ase::SymbetaDoubleIntegral< double >::SWIGTEMPLATEDISAMBIGUATOR fromSigmas(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::SymbetaDoubleIntegral< double >(static_cast< const ase::SymbetaDoubleIntegral< double >& >(result))), SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymbetaDoubleIntegral_fromSigmas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymbetaDoubleIntegral< double > result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymbetaDoubleIntegral_fromSigmas" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymbetaDoubleIntegral_fromSigmas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymbetaDoubleIntegral_fromSigmas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymbetaDoubleIntegral_fromSigmas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = ase::SymbetaDoubleIntegral< double >::SWIGTEMPLATEDISAMBIGUATOR fromSigmas(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::SymbetaDoubleIntegral< double >(static_cast< const ase::SymbetaDoubleIntegral< double >& >(result))), SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymbetaDoubleIntegral_fromSigmas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymbetaDoubleIntegral_fromSigmas", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SymbetaDoubleIntegral_fromSigmas__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_SymbetaDoubleIntegral_fromSigmas__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymbetaDoubleIntegral_fromSigmas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymbetaDoubleIntegral< double >::fromSigmas(unsigned int const,double const,double const,double const,bool const)\n"
    "    ase::SymbetaDoubleIntegral< double >::fromSigmas(unsigned int const,double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymbetaDoubleIntegral_minRNoExtremum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  double arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymbetaDoubleIntegral_minRNoExtremum", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymbetaDoubleIntegral_minRNoExtremum" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymbetaDoubleIntegral_minRNoExtremum" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)ase::SymbetaDoubleIntegral< double >::SWIGTEMPLATEDISAMBIGUATOR minRNoExtremum(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymbetaDoubleIntegral(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< double > *arg1 = (ase::SymbetaDoubleIntegral< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymbetaDoubleIntegral" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SymbetaDoubleIntegral_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymbetaDoubleIntegral_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SDIZoneFunctor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  ase::SDIZoneFunctor< double > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_SDIZoneFunctor", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SDIZoneFunctor" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SDIZoneFunctor" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SDIZoneFunctor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SDIZoneFunctor" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SDIZoneFunctor" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (ase::SDIZoneFunctor< double > *)new ase::SDIZoneFunctor< double >((ase::SymbetaDoubleIntegral< double > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SDIZoneFunctorT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SDIZoneFunctor___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SDIZoneFunctor< double > *arg1 = (ase::SDIZoneFunctor< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "SDIZoneFunctor___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SDIZoneFunctorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SDIZoneFunctor___call__" "', argument " "1"" of type '" "ase::SDIZoneFunctor< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SDIZoneFunctor< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SDIZoneFunctor___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::SDIZoneFunctor< double > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SDIZoneFunctor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SDIZoneFunctor< double > *arg1 = (ase::SDIZoneFunctor< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SDIZoneFunctorT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SDIZoneFunctor" "', argument " "1"" of type '" "ase::SDIZoneFunctor< double > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SDIZoneFunctor< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SDIZoneFunctor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SDIZoneFunctorT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SDIZoneFunctor_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LDSymbetaDoubleIntegral__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< long double > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (ase::SymbetaDoubleIntegral< long double > *)new ase::SymbetaDoubleIntegral< long double >();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymbetaDoubleIntegralT_long_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LDSymbetaDoubleIntegral__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  long double arg2 ;
  long double arg3 ;
  long double arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  ase::SymbetaDoubleIntegral< long double > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LDSymbetaDoubleIntegral" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LDSymbetaDoubleIntegral" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDSymbetaDoubleIntegral" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_LDSymbetaDoubleIntegral" "', argument " "3"" of type '" "long double const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDSymbetaDoubleIntegral" "', argument " "3"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_LDSymbetaDoubleIntegral" "', argument " "4"" of type '" "long double const""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDSymbetaDoubleIntegral" "', argument " "4"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    try {
      result = (ase::SymbetaDoubleIntegral< long double > *)new ase::SymbetaDoubleIntegral< long double >(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymbetaDoubleIntegralT_long_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LDSymbetaDoubleIntegral(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_LDSymbetaDoubleIntegral", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_LDSymbetaDoubleIntegral__SWIG_0(self, argc, argv);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_LDSymbetaDoubleIntegral__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_LDSymbetaDoubleIntegral'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymbetaDoubleIntegral< long double >::SymbetaDoubleIntegral()\n"
    "    ase::SymbetaDoubleIntegral< long double >::SymbetaDoubleIntegral(unsigned int const,long double const,long double const,long double const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LDSymbetaDoubleIntegral_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< long double > *arg1 = (ase::SymbetaDoubleIntegral< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSymbetaDoubleIntegral_p" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< long double > * >(argp1);
  {
    try {
      result = (unsigned int)((ase::SymbetaDoubleIntegral< long double > const *)arg1)->p();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSymbetaDoubleIntegral_h(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< long double > *arg1 = (ase::SymbetaDoubleIntegral< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSymbetaDoubleIntegral_h" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< long double > * >(argp1);
  {
    try {
      result = (long double)((ase::SymbetaDoubleIntegral< long double > const *)arg1)->h();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSymbetaDoubleIntegral_a(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< long double > *arg1 = (ase::SymbetaDoubleIntegral< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSymbetaDoubleIntegral_a" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< long double > * >(argp1);
  {
    try {
      result = (long double)((ase::SymbetaDoubleIntegral< long double > const *)arg1)->a();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSymbetaDoubleIntegral_k(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< long double > *arg1 = (ase::SymbetaDoubleIntegral< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSymbetaDoubleIntegral_k" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< long double > * >(argp1);
  {
    try {
      result = (long double)((ase::SymbetaDoubleIntegral< long double > const *)arg1)->k();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSymbetaDoubleIntegral_hasExtremum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< long double > *arg1 = (ase::SymbetaDoubleIntegral< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSymbetaDoubleIntegral_hasExtremum" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< long double > * >(argp1);
  {
    try {
      result = (bool)((ase::SymbetaDoubleIntegral< long double > const *)arg1)->hasExtremum();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSymbetaDoubleIntegral_isFlat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< long double > *arg1 = (ase::SymbetaDoubleIntegral< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSymbetaDoubleIntegral_isFlat" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< long double > * >(argp1);
  {
    try {
      result = (bool)((ase::SymbetaDoubleIntegral< long double > const *)arg1)->isFlat();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSymbetaDoubleIntegral_extremum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< long double > *arg1 = (ase::SymbetaDoubleIntegral< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::pair< long double,long double > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSymbetaDoubleIntegral_extremum" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< long double > * >(argp1);
  {
    try {
      result = ((ase::SymbetaDoubleIntegral< long double > const *)arg1)->extremum();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::pair< long double,long double >(static_cast< const std::pair< long double,long double >& >(result))), SWIGTYPE_p_std__pairT_long_double_long_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSymbetaDoubleIntegral___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< long double > *arg1 = (ase::SymbetaDoubleIntegral< long double > *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  long double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LDSymbetaDoubleIntegral___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSymbetaDoubleIntegral___call__" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< long double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LDSymbetaDoubleIntegral___call__" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDSymbetaDoubleIntegral___call__" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (long double)((ase::SymbetaDoubleIntegral< long double > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSymbetaDoubleIntegral_derivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< long double > *arg1 = (ase::SymbetaDoubleIntegral< long double > *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  long double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LDSymbetaDoubleIntegral_derivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSymbetaDoubleIntegral_derivative" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< long double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LDSymbetaDoubleIntegral_derivative" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDSymbetaDoubleIntegral_derivative" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (long double)((ase::SymbetaDoubleIntegral< long double > const *)arg1)->derivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSymbetaDoubleIntegral_secondDerivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< long double > *arg1 = (ase::SymbetaDoubleIntegral< long double > *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  long double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LDSymbetaDoubleIntegral_secondDerivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSymbetaDoubleIntegral_secondDerivative" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< long double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LDSymbetaDoubleIntegral_secondDerivative" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDSymbetaDoubleIntegral_secondDerivative" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (long double)((ase::SymbetaDoubleIntegral< long double > const *)arg1)->secondDerivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSymbetaDoubleIntegral_zoneContinuation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< long double > *arg1 = (ase::SymbetaDoubleIntegral< long double > *) 0 ;
  long double arg2 ;
  long double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  long double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LDSymbetaDoubleIntegral_zoneContinuation", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSymbetaDoubleIntegral_zoneContinuation" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< long double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LDSymbetaDoubleIntegral_zoneContinuation" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDSymbetaDoubleIntegral_zoneContinuation" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LDSymbetaDoubleIntegral_zoneContinuation" "', argument " "3"" of type '" "long double const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDSymbetaDoubleIntegral_zoneContinuation" "', argument " "3"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (long double)((ase::SymbetaDoubleIntegral< long double > const *)arg1)->zoneContinuation(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSymbetaDoubleIntegral_inverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< long double > *arg1 = (ase::SymbetaDoubleIntegral< long double > *) 0 ;
  long double arg2 ;
  long double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  unsigned int result;
  
  if (!SWIG_Python_UnpackTuple(args, "LDSymbetaDoubleIntegral_inverse", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSymbetaDoubleIntegral_inverse" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< long double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LDSymbetaDoubleIntegral_inverse" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDSymbetaDoubleIntegral_inverse" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_long_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LDSymbetaDoubleIntegral_inverse" "', argument " "3"" of type '" "long double [2]""'"); 
  } 
  arg3 = reinterpret_cast< long double * >(argp3);
  {
    try {
      result = (unsigned int)((ase::SymbetaDoubleIntegral< long double > const *)arg1)->inverse(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSymbetaDoubleIntegral_fromSigmas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  long double arg2 ;
  long double arg3 ;
  long double arg4 ;
  bool arg5 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  ase::SymbetaDoubleIntegral< long double > result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LDSymbetaDoubleIntegral_fromSigmas" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LDSymbetaDoubleIntegral_fromSigmas" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDSymbetaDoubleIntegral_fromSigmas" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LDSymbetaDoubleIntegral_fromSigmas" "', argument " "3"" of type '" "long double const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDSymbetaDoubleIntegral_fromSigmas" "', argument " "3"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LDSymbetaDoubleIntegral_fromSigmas" "', argument " "4"" of type '" "long double const""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDSymbetaDoubleIntegral_fromSigmas" "', argument " "4"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "LDSymbetaDoubleIntegral_fromSigmas" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      result = ase::SymbetaDoubleIntegral< long double >::SWIGTEMPLATEDISAMBIGUATOR fromSigmas(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::SymbetaDoubleIntegral< long double >(static_cast< const ase::SymbetaDoubleIntegral< long double >& >(result))), SWIGTYPE_p_ase__SymbetaDoubleIntegralT_long_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSymbetaDoubleIntegral_fromSigmas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  long double arg2 ;
  long double arg3 ;
  long double arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  ase::SymbetaDoubleIntegral< long double > result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LDSymbetaDoubleIntegral_fromSigmas" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LDSymbetaDoubleIntegral_fromSigmas" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDSymbetaDoubleIntegral_fromSigmas" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LDSymbetaDoubleIntegral_fromSigmas" "', argument " "3"" of type '" "long double const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDSymbetaDoubleIntegral_fromSigmas" "', argument " "3"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LDSymbetaDoubleIntegral_fromSigmas" "', argument " "4"" of type '" "long double const""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDSymbetaDoubleIntegral_fromSigmas" "', argument " "4"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    try {
      result = ase::SymbetaDoubleIntegral< long double >::SWIGTEMPLATEDISAMBIGUATOR fromSigmas(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::SymbetaDoubleIntegral< long double >(static_cast< const ase::SymbetaDoubleIntegral< long double >& >(result))), SWIGTYPE_p_ase__SymbetaDoubleIntegralT_long_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSymbetaDoubleIntegral_fromSigmas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LDSymbetaDoubleIntegral_fromSigmas", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_LDSymbetaDoubleIntegral_fromSigmas__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_LDSymbetaDoubleIntegral_fromSigmas__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LDSymbetaDoubleIntegral_fromSigmas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymbetaDoubleIntegral< long double >::fromSigmas(unsigned int const,long double const,long double const,long double const,bool const)\n"
    "    ase::SymbetaDoubleIntegral< long double >::fromSigmas(unsigned int const,long double const,long double const,long double const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LDSymbetaDoubleIntegral_minRNoExtremum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  long double arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  long double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LDSymbetaDoubleIntegral_minRNoExtremum", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LDSymbetaDoubleIntegral_minRNoExtremum" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LDSymbetaDoubleIntegral_minRNoExtremum" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDSymbetaDoubleIntegral_minRNoExtremum" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (long double)ase::SymbetaDoubleIntegral< long double >::SWIGTEMPLATEDISAMBIGUATOR minRNoExtremum(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LDSymbetaDoubleIntegral(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< long double > *arg1 = (ase::SymbetaDoubleIntegral< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymbetaDoubleIntegralT_long_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LDSymbetaDoubleIntegral" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< long double > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< long double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LDSymbetaDoubleIntegral_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymbetaDoubleIntegralT_long_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LDSymbetaDoubleIntegral_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LDSDIZoneFunctor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< long double > *arg1 = 0 ;
  long double arg2 ;
  long double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  ase::SDIZoneFunctor< long double > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_LDSDIZoneFunctor", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SymbetaDoubleIntegralT_long_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LDSDIZoneFunctor" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< long double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDSDIZoneFunctor" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< long double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< long double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LDSDIZoneFunctor" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDSDIZoneFunctor" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_LDSDIZoneFunctor" "', argument " "3"" of type '" "long double const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDSDIZoneFunctor" "', argument " "3"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_LDSDIZoneFunctor" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (ase::SDIZoneFunctor< long double > *)new ase::SDIZoneFunctor< long double >((ase::SymbetaDoubleIntegral< long double > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SDIZoneFunctorT_long_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSDIZoneFunctor___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SDIZoneFunctor< long double > *arg1 = (ase::SDIZoneFunctor< long double > *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  long double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LDSDIZoneFunctor___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SDIZoneFunctorT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSDIZoneFunctor___call__" "', argument " "1"" of type '" "ase::SDIZoneFunctor< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SDIZoneFunctor< long double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LDSDIZoneFunctor___call__" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDSDIZoneFunctor___call__" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (long double)((ase::SDIZoneFunctor< long double > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LDSDIZoneFunctor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SDIZoneFunctor< long double > *arg1 = (ase::SDIZoneFunctor< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SDIZoneFunctorT_long_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LDSDIZoneFunctor" "', argument " "1"" of type '" "ase::SDIZoneFunctor< long double > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SDIZoneFunctor< long double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LDSDIZoneFunctor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SDIZoneFunctorT_long_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LDSDIZoneFunctor_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ParabolicRailwayCurve__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  ase::ParabolicRailwayCurve< double > *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ParabolicRailwayCurve" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ParabolicRailwayCurve" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ParabolicRailwayCurve" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ParabolicRailwayCurve" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ParabolicRailwayCurve" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (ase::ParabolicRailwayCurve< double > *)new ase::ParabolicRailwayCurve< double >(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParabolicRailwayCurve__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::ParabolicRailwayCurve< double > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ParabolicRailwayCurve" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ParabolicRailwayCurve" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ParabolicRailwayCurve" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ParabolicRailwayCurve" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::ParabolicRailwayCurve< double > *)new ase::ParabolicRailwayCurve< double >(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParabolicRailwayCurve(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ParabolicRailwayCurve", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ParabolicRailwayCurve__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ParabolicRailwayCurve__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ParabolicRailwayCurve'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::ParabolicRailwayCurve< double >::ParabolicRailwayCurve(double const,double const,double const,double const,double const)\n"
    "    ase::ParabolicRailwayCurve< double >::ParabolicRailwayCurve(double const,double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ParabolicRailwayCurve_hleft(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< double > *arg1 = (ase::ParabolicRailwayCurve< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParabolicRailwayCurve_hleft" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< double > * >(argp1);
  {
    try {
      result = (double)((ase::ParabolicRailwayCurve< double > const *)arg1)->hleft();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParabolicRailwayCurve_hright(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< double > *arg1 = (ase::ParabolicRailwayCurve< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParabolicRailwayCurve_hright" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< double > * >(argp1);
  {
    try {
      result = (double)((ase::ParabolicRailwayCurve< double > const *)arg1)->hright();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParabolicRailwayCurve_sigmaPlus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< double > *arg1 = (ase::ParabolicRailwayCurve< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParabolicRailwayCurve_sigmaPlus" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< double > * >(argp1);
  {
    try {
      result = (double)((ase::ParabolicRailwayCurve< double > const *)arg1)->sigmaPlus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParabolicRailwayCurve_sigmaMinus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< double > *arg1 = (ase::ParabolicRailwayCurve< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParabolicRailwayCurve_sigmaMinus" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< double > * >(argp1);
  {
    try {
      result = (double)((ase::ParabolicRailwayCurve< double > const *)arg1)->sigmaMinus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParabolicRailwayCurve_hasExtremum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< double > *arg1 = (ase::ParabolicRailwayCurve< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParabolicRailwayCurve_hasExtremum" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< double > * >(argp1);
  {
    try {
      result = (bool)((ase::ParabolicRailwayCurve< double > const *)arg1)->hasExtremum();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParabolicRailwayCurve_isFlat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< double > *arg1 = (ase::ParabolicRailwayCurve< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParabolicRailwayCurve_isFlat" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< double > * >(argp1);
  {
    try {
      result = (bool)((ase::ParabolicRailwayCurve< double > const *)arg1)->isFlat();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParabolicRailwayCurve_extremum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< double > *arg1 = (ase::ParabolicRailwayCurve< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::pair< double,double > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParabolicRailwayCurve_extremum" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< double > * >(argp1);
  {
    try {
      result = ((ase::ParabolicRailwayCurve< double > const *)arg1)->extremum();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParabolicRailwayCurve___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< double > *arg1 = (ase::ParabolicRailwayCurve< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "ParabolicRailwayCurve___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParabolicRailwayCurve___call__" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParabolicRailwayCurve___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::ParabolicRailwayCurve< double > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParabolicRailwayCurve_derivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< double > *arg1 = (ase::ParabolicRailwayCurve< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "ParabolicRailwayCurve_derivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParabolicRailwayCurve_derivative" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParabolicRailwayCurve_derivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::ParabolicRailwayCurve< double > const *)arg1)->derivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParabolicRailwayCurve_secondDerivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< double > *arg1 = (ase::ParabolicRailwayCurve< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "ParabolicRailwayCurve_secondDerivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParabolicRailwayCurve_secondDerivative" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParabolicRailwayCurve_secondDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::ParabolicRailwayCurve< double > const *)arg1)->secondDerivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParabolicRailwayCurve_zoneContinuation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< double > *arg1 = (ase::ParabolicRailwayCurve< double > *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "ParabolicRailwayCurve_zoneContinuation", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParabolicRailwayCurve_zoneContinuation" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParabolicRailwayCurve_zoneContinuation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ParabolicRailwayCurve_zoneContinuation" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::ParabolicRailwayCurve< double > const *)arg1)->zoneContinuation(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParabolicRailwayCurve_inverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< double > *arg1 = (ase::ParabolicRailwayCurve< double > *) 0 ;
  double arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  unsigned int result;
  
  if (!SWIG_Python_UnpackTuple(args, "ParabolicRailwayCurve_inverse", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParabolicRailwayCurve_inverse" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParabolicRailwayCurve_inverse" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ParabolicRailwayCurve_inverse" "', argument " "3"" of type '" "double [2]""'"); 
  } 
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      result = (unsigned int)((ase::ParabolicRailwayCurve< double > const *)arg1)->inverse(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParabolicRailwayCurve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< double > *arg1 = (ase::ParabolicRailwayCurve< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ParabolicRailwayCurve" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ParabolicRailwayCurve_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ParabolicRailwayCurve_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_RailwayZoneFunctor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  ase::RailwayZoneFunctor< double > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_RailwayZoneFunctor", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RailwayZoneFunctor" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RailwayZoneFunctor" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RailwayZoneFunctor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RailwayZoneFunctor" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RailwayZoneFunctor" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (ase::RailwayZoneFunctor< double > *)new ase::RailwayZoneFunctor< double >((ase::ParabolicRailwayCurve< double > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__RailwayZoneFunctorT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RailwayZoneFunctor___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::RailwayZoneFunctor< double > *arg1 = (ase::RailwayZoneFunctor< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "RailwayZoneFunctor___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__RailwayZoneFunctorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RailwayZoneFunctor___call__" "', argument " "1"" of type '" "ase::RailwayZoneFunctor< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::RailwayZoneFunctor< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RailwayZoneFunctor___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::RailwayZoneFunctor< double > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RailwayZoneFunctor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::RailwayZoneFunctor< double > *arg1 = (ase::RailwayZoneFunctor< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__RailwayZoneFunctorT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RailwayZoneFunctor" "', argument " "1"" of type '" "ase::RailwayZoneFunctor< double > *""'"); 
  }
  arg1 = reinterpret_cast< ase::RailwayZoneFunctor< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RailwayZoneFunctor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__RailwayZoneFunctorT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RailwayZoneFunctor_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LDParabolicRailwayCurve__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  long double arg1 ;
  long double arg2 ;
  long double arg3 ;
  long double arg4 ;
  long double arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  ase::ParabolicRailwayCurve< long double > *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LDParabolicRailwayCurve" "', argument " "1"" of type '" "long double const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDParabolicRailwayCurve" "', argument " "1"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LDParabolicRailwayCurve" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDParabolicRailwayCurve" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_LDParabolicRailwayCurve" "', argument " "3"" of type '" "long double const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDParabolicRailwayCurve" "', argument " "3"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_LDParabolicRailwayCurve" "', argument " "4"" of type '" "long double const""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDParabolicRailwayCurve" "', argument " "4"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_LDParabolicRailwayCurve" "', argument " "5"" of type '" "long double const""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDParabolicRailwayCurve" "', argument " "5"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    try {
      result = (ase::ParabolicRailwayCurve< long double > *)new ase::ParabolicRailwayCurve< long double >(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ParabolicRailwayCurveT_long_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LDParabolicRailwayCurve__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  long double arg1 ;
  long double arg2 ;
  long double arg3 ;
  long double arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  ase::ParabolicRailwayCurve< long double > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LDParabolicRailwayCurve" "', argument " "1"" of type '" "long double const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDParabolicRailwayCurve" "', argument " "1"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LDParabolicRailwayCurve" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDParabolicRailwayCurve" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_LDParabolicRailwayCurve" "', argument " "3"" of type '" "long double const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDParabolicRailwayCurve" "', argument " "3"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_LDParabolicRailwayCurve" "', argument " "4"" of type '" "long double const""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDParabolicRailwayCurve" "', argument " "4"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    try {
      result = (ase::ParabolicRailwayCurve< long double > *)new ase::ParabolicRailwayCurve< long double >(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ParabolicRailwayCurveT_long_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LDParabolicRailwayCurve(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_LDParabolicRailwayCurve", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_LDParabolicRailwayCurve__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_LDParabolicRailwayCurve__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_LDParabolicRailwayCurve'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::ParabolicRailwayCurve< long double >::ParabolicRailwayCurve(long double const,long double const,long double const,long double const,long double const)\n"
    "    ase::ParabolicRailwayCurve< long double >::ParabolicRailwayCurve(long double const,long double const,long double const,long double const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LDParabolicRailwayCurve_hleft(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< long double > *arg1 = (ase::ParabolicRailwayCurve< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDParabolicRailwayCurve_hleft" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< long double > * >(argp1);
  {
    try {
      result = (long double)((ase::ParabolicRailwayCurve< long double > const *)arg1)->hleft();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDParabolicRailwayCurve_hright(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< long double > *arg1 = (ase::ParabolicRailwayCurve< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDParabolicRailwayCurve_hright" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< long double > * >(argp1);
  {
    try {
      result = (long double)((ase::ParabolicRailwayCurve< long double > const *)arg1)->hright();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDParabolicRailwayCurve_sigmaPlus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< long double > *arg1 = (ase::ParabolicRailwayCurve< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDParabolicRailwayCurve_sigmaPlus" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< long double > * >(argp1);
  {
    try {
      result = (long double)((ase::ParabolicRailwayCurve< long double > const *)arg1)->sigmaPlus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDParabolicRailwayCurve_sigmaMinus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< long double > *arg1 = (ase::ParabolicRailwayCurve< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDParabolicRailwayCurve_sigmaMinus" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< long double > * >(argp1);
  {
    try {
      result = (long double)((ase::ParabolicRailwayCurve< long double > const *)arg1)->sigmaMinus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDParabolicRailwayCurve_hasExtremum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< long double > *arg1 = (ase::ParabolicRailwayCurve< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDParabolicRailwayCurve_hasExtremum" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< long double > * >(argp1);
  {
    try {
      result = (bool)((ase::ParabolicRailwayCurve< long double > const *)arg1)->hasExtremum();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDParabolicRailwayCurve_isFlat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< long double > *arg1 = (ase::ParabolicRailwayCurve< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDParabolicRailwayCurve_isFlat" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< long double > * >(argp1);
  {
    try {
      result = (bool)((ase::ParabolicRailwayCurve< long double > const *)arg1)->isFlat();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDParabolicRailwayCurve_extremum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< long double > *arg1 = (ase::ParabolicRailwayCurve< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::pair< long double,long double > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDParabolicRailwayCurve_extremum" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< long double > * >(argp1);
  {
    try {
      result = ((ase::ParabolicRailwayCurve< long double > const *)arg1)->extremum();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::pair< long double,long double >(static_cast< const std::pair< long double,long double >& >(result))), SWIGTYPE_p_std__pairT_long_double_long_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDParabolicRailwayCurve___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< long double > *arg1 = (ase::ParabolicRailwayCurve< long double > *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  long double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LDParabolicRailwayCurve___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDParabolicRailwayCurve___call__" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< long double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LDParabolicRailwayCurve___call__" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDParabolicRailwayCurve___call__" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (long double)((ase::ParabolicRailwayCurve< long double > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDParabolicRailwayCurve_derivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< long double > *arg1 = (ase::ParabolicRailwayCurve< long double > *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  long double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LDParabolicRailwayCurve_derivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDParabolicRailwayCurve_derivative" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< long double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LDParabolicRailwayCurve_derivative" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDParabolicRailwayCurve_derivative" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (long double)((ase::ParabolicRailwayCurve< long double > const *)arg1)->derivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDParabolicRailwayCurve_secondDerivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< long double > *arg1 = (ase::ParabolicRailwayCurve< long double > *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  long double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LDParabolicRailwayCurve_secondDerivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDParabolicRailwayCurve_secondDerivative" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< long double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LDParabolicRailwayCurve_secondDerivative" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDParabolicRailwayCurve_secondDerivative" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (long double)((ase::ParabolicRailwayCurve< long double > const *)arg1)->secondDerivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDParabolicRailwayCurve_zoneContinuation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< long double > *arg1 = (ase::ParabolicRailwayCurve< long double > *) 0 ;
  long double arg2 ;
  long double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  long double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LDParabolicRailwayCurve_zoneContinuation", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDParabolicRailwayCurve_zoneContinuation" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< long double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LDParabolicRailwayCurve_zoneContinuation" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDParabolicRailwayCurve_zoneContinuation" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LDParabolicRailwayCurve_zoneContinuation" "', argument " "3"" of type '" "long double const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDParabolicRailwayCurve_zoneContinuation" "', argument " "3"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (long double)((ase::ParabolicRailwayCurve< long double > const *)arg1)->zoneContinuation(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDParabolicRailwayCurve_inverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< long double > *arg1 = (ase::ParabolicRailwayCurve< long double > *) 0 ;
  long double arg2 ;
  long double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  unsigned int result;
  
  if (!SWIG_Python_UnpackTuple(args, "LDParabolicRailwayCurve_inverse", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDParabolicRailwayCurve_inverse" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< long double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LDParabolicRailwayCurve_inverse" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDParabolicRailwayCurve_inverse" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_long_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LDParabolicRailwayCurve_inverse" "', argument " "3"" of type '" "long double [2]""'"); 
  } 
  arg3 = reinterpret_cast< long double * >(argp3);
  {
    try {
      result = (unsigned int)((ase::ParabolicRailwayCurve< long double > const *)arg1)->inverse(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LDParabolicRailwayCurve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< long double > *arg1 = (ase::ParabolicRailwayCurve< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ParabolicRailwayCurveT_long_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LDParabolicRailwayCurve" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< long double > *""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< long double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LDParabolicRailwayCurve_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__ParabolicRailwayCurveT_long_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LDParabolicRailwayCurve_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LDRailwayZoneFunctor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< long double > *arg1 = 0 ;
  long double arg2 ;
  long double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  ase::RailwayZoneFunctor< long double > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_LDRailwayZoneFunctor", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__ParabolicRailwayCurveT_long_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LDRailwayZoneFunctor" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< long double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDRailwayZoneFunctor" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< long double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< long double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LDRailwayZoneFunctor" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDRailwayZoneFunctor" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_LDRailwayZoneFunctor" "', argument " "3"" of type '" "long double const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDRailwayZoneFunctor" "', argument " "3"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_LDRailwayZoneFunctor" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (ase::RailwayZoneFunctor< long double > *)new ase::RailwayZoneFunctor< long double >((ase::ParabolicRailwayCurve< long double > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__RailwayZoneFunctorT_long_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDRailwayZoneFunctor___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::RailwayZoneFunctor< long double > *arg1 = (ase::RailwayZoneFunctor< long double > *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  long double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LDRailwayZoneFunctor___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__RailwayZoneFunctorT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDRailwayZoneFunctor___call__" "', argument " "1"" of type '" "ase::RailwayZoneFunctor< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::RailwayZoneFunctor< long double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LDRailwayZoneFunctor___call__" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDRailwayZoneFunctor___call__" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (long double)((ase::RailwayZoneFunctor< long double > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LDRailwayZoneFunctor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::RailwayZoneFunctor< long double > *arg1 = (ase::RailwayZoneFunctor< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__RailwayZoneFunctorT_long_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LDRailwayZoneFunctor" "', argument " "1"" of type '" "ase::RailwayZoneFunctor< long double > *""'"); 
  }
  arg1 = reinterpret_cast< ase::RailwayZoneFunctor< long double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LDRailwayZoneFunctor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__RailwayZoneFunctorT_long_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LDRailwayZoneFunctor_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SmoothDoubleCubic__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SmoothDoubleCubic< double > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SmoothDoubleCubic" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SmoothDoubleCubic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SmoothDoubleCubic" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SmoothDoubleCubic< double > *)new ase::SmoothDoubleCubic< double >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SmoothDoubleCubic__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  ase::SmoothDoubleCubic< double > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SmoothDoubleCubic" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SmoothDoubleCubic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (ase::SmoothDoubleCubic< double > *)new ase::SmoothDoubleCubic< double >(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SmoothDoubleCubic(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SmoothDoubleCubic", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SmoothDoubleCubic__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SmoothDoubleCubic__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SmoothDoubleCubic'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SmoothDoubleCubic< double >::SmoothDoubleCubic(double const,double const,double const)\n"
    "    ase::SmoothDoubleCubic< double >::SmoothDoubleCubic(double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SmoothDoubleCubic_sigmaPlus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< double > *arg1 = (ase::SmoothDoubleCubic< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmoothDoubleCubic_sigmaPlus" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< double > * >(argp1);
  {
    try {
      result = (double)((ase::SmoothDoubleCubic< double > const *)arg1)->sigmaPlus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmoothDoubleCubic_sigmaMinus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< double > *arg1 = (ase::SmoothDoubleCubic< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmoothDoubleCubic_sigmaMinus" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< double > * >(argp1);
  {
    try {
      result = (double)((ase::SmoothDoubleCubic< double > const *)arg1)->sigmaMinus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmoothDoubleCubic_hasExtremum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< double > *arg1 = (ase::SmoothDoubleCubic< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmoothDoubleCubic_hasExtremum" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< double > * >(argp1);
  {
    try {
      result = (bool)((ase::SmoothDoubleCubic< double > const *)arg1)->hasExtremum();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmoothDoubleCubic_isFlat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< double > *arg1 = (ase::SmoothDoubleCubic< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmoothDoubleCubic_isFlat" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< double > * >(argp1);
  {
    try {
      result = (bool)((ase::SmoothDoubleCubic< double > const *)arg1)->isFlat();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmoothDoubleCubic_extremum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< double > *arg1 = (ase::SmoothDoubleCubic< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::pair< double,double > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmoothDoubleCubic_extremum" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< double > * >(argp1);
  {
    try {
      result = ((ase::SmoothDoubleCubic< double > const *)arg1)->extremum();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmoothDoubleCubic___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< double > *arg1 = (ase::SmoothDoubleCubic< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "SmoothDoubleCubic___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmoothDoubleCubic___call__" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmoothDoubleCubic___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::SmoothDoubleCubic< double > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmoothDoubleCubic_derivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< double > *arg1 = (ase::SmoothDoubleCubic< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "SmoothDoubleCubic_derivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmoothDoubleCubic_derivative" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmoothDoubleCubic_derivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::SmoothDoubleCubic< double > const *)arg1)->derivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmoothDoubleCubic_secondDerivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< double > *arg1 = (ase::SmoothDoubleCubic< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "SmoothDoubleCubic_secondDerivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmoothDoubleCubic_secondDerivative" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmoothDoubleCubic_secondDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::SmoothDoubleCubic< double > const *)arg1)->secondDerivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmoothDoubleCubic_zoneContinuation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< double > *arg1 = (ase::SmoothDoubleCubic< double > *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "SmoothDoubleCubic_zoneContinuation", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmoothDoubleCubic_zoneContinuation" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmoothDoubleCubic_zoneContinuation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SmoothDoubleCubic_zoneContinuation" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::SmoothDoubleCubic< double > const *)arg1)->zoneContinuation(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SmoothDoubleCubic_inverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< double > *arg1 = (ase::SmoothDoubleCubic< double > *) 0 ;
  double arg2 ;
  double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  unsigned int result;
  
  if (!SWIG_Python_UnpackTuple(args, "SmoothDoubleCubic_inverse", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmoothDoubleCubic_inverse" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmoothDoubleCubic_inverse" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SmoothDoubleCubic_inverse" "', argument " "3"" of type '" "double [2]""'"); 
  } 
  arg3 = reinterpret_cast< double * >(argp3);
  {
    try {
      result = (unsigned int)((ase::SmoothDoubleCubic< double > const *)arg1)->inverse(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SmoothDoubleCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< double > *arg1 = (ase::SmoothDoubleCubic< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SmoothDoubleCubic" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SmoothDoubleCubic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SmoothDoubleCubic_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SDCZoneFunctor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  ase::SDCZoneFunctor< double > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_SDCZoneFunctor", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SDCZoneFunctor" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SDCZoneFunctor" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SDCZoneFunctor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SDCZoneFunctor" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SDCZoneFunctor" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (ase::SDCZoneFunctor< double > *)new ase::SDCZoneFunctor< double >((ase::SmoothDoubleCubic< double > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SDCZoneFunctorT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SDCZoneFunctor___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SDCZoneFunctor< double > *arg1 = (ase::SDCZoneFunctor< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "SDCZoneFunctor___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SDCZoneFunctorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SDCZoneFunctor___call__" "', argument " "1"" of type '" "ase::SDCZoneFunctor< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SDCZoneFunctor< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SDCZoneFunctor___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::SDCZoneFunctor< double > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SDCZoneFunctor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SDCZoneFunctor< double > *arg1 = (ase::SDCZoneFunctor< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SDCZoneFunctorT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SDCZoneFunctor" "', argument " "1"" of type '" "ase::SDCZoneFunctor< double > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SDCZoneFunctor< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SDCZoneFunctor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SDCZoneFunctorT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SDCZoneFunctor_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LDSmoothDoubleCubic__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  long double arg1 ;
  long double arg2 ;
  long double arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  ase::SmoothDoubleCubic< long double > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LDSmoothDoubleCubic" "', argument " "1"" of type '" "long double const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDSmoothDoubleCubic" "', argument " "1"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LDSmoothDoubleCubic" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDSmoothDoubleCubic" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_LDSmoothDoubleCubic" "', argument " "3"" of type '" "long double const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDSmoothDoubleCubic" "', argument " "3"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (ase::SmoothDoubleCubic< long double > *)new ase::SmoothDoubleCubic< long double >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SmoothDoubleCubicT_long_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LDSmoothDoubleCubic__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  long double arg1 ;
  long double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ase::SmoothDoubleCubic< long double > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LDSmoothDoubleCubic" "', argument " "1"" of type '" "long double const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDSmoothDoubleCubic" "', argument " "1"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LDSmoothDoubleCubic" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDSmoothDoubleCubic" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (ase::SmoothDoubleCubic< long double > *)new ase::SmoothDoubleCubic< long double >(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SmoothDoubleCubicT_long_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LDSmoothDoubleCubic(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_LDSmoothDoubleCubic", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LDSmoothDoubleCubic__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_LDSmoothDoubleCubic__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_LDSmoothDoubleCubic'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SmoothDoubleCubic< long double >::SmoothDoubleCubic(long double const,long double const,long double const)\n"
    "    ase::SmoothDoubleCubic< long double >::SmoothDoubleCubic(long double const,long double const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LDSmoothDoubleCubic_sigmaPlus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< long double > *arg1 = (ase::SmoothDoubleCubic< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSmoothDoubleCubic_sigmaPlus" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< long double > * >(argp1);
  {
    try {
      result = (long double)((ase::SmoothDoubleCubic< long double > const *)arg1)->sigmaPlus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSmoothDoubleCubic_sigmaMinus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< long double > *arg1 = (ase::SmoothDoubleCubic< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSmoothDoubleCubic_sigmaMinus" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< long double > * >(argp1);
  {
    try {
      result = (long double)((ase::SmoothDoubleCubic< long double > const *)arg1)->sigmaMinus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSmoothDoubleCubic_hasExtremum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< long double > *arg1 = (ase::SmoothDoubleCubic< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSmoothDoubleCubic_hasExtremum" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< long double > * >(argp1);
  {
    try {
      result = (bool)((ase::SmoothDoubleCubic< long double > const *)arg1)->hasExtremum();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSmoothDoubleCubic_isFlat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< long double > *arg1 = (ase::SmoothDoubleCubic< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSmoothDoubleCubic_isFlat" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< long double > * >(argp1);
  {
    try {
      result = (bool)((ase::SmoothDoubleCubic< long double > const *)arg1)->isFlat();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSmoothDoubleCubic_extremum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< long double > *arg1 = (ase::SmoothDoubleCubic< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::pair< long double,long double > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSmoothDoubleCubic_extremum" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< long double > * >(argp1);
  {
    try {
      result = ((ase::SmoothDoubleCubic< long double > const *)arg1)->extremum();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::pair< long double,long double >(static_cast< const std::pair< long double,long double >& >(result))), SWIGTYPE_p_std__pairT_long_double_long_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSmoothDoubleCubic___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< long double > *arg1 = (ase::SmoothDoubleCubic< long double > *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  long double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LDSmoothDoubleCubic___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSmoothDoubleCubic___call__" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< long double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LDSmoothDoubleCubic___call__" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDSmoothDoubleCubic___call__" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (long double)((ase::SmoothDoubleCubic< long double > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSmoothDoubleCubic_derivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< long double > *arg1 = (ase::SmoothDoubleCubic< long double > *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  long double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LDSmoothDoubleCubic_derivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSmoothDoubleCubic_derivative" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< long double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LDSmoothDoubleCubic_derivative" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDSmoothDoubleCubic_derivative" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (long double)((ase::SmoothDoubleCubic< long double > const *)arg1)->derivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSmoothDoubleCubic_secondDerivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< long double > *arg1 = (ase::SmoothDoubleCubic< long double > *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  long double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LDSmoothDoubleCubic_secondDerivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSmoothDoubleCubic_secondDerivative" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< long double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LDSmoothDoubleCubic_secondDerivative" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDSmoothDoubleCubic_secondDerivative" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (long double)((ase::SmoothDoubleCubic< long double > const *)arg1)->secondDerivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSmoothDoubleCubic_zoneContinuation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< long double > *arg1 = (ase::SmoothDoubleCubic< long double > *) 0 ;
  long double arg2 ;
  long double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  long double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LDSmoothDoubleCubic_zoneContinuation", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSmoothDoubleCubic_zoneContinuation" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< long double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LDSmoothDoubleCubic_zoneContinuation" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDSmoothDoubleCubic_zoneContinuation" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LDSmoothDoubleCubic_zoneContinuation" "', argument " "3"" of type '" "long double const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDSmoothDoubleCubic_zoneContinuation" "', argument " "3"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (long double)((ase::SmoothDoubleCubic< long double > const *)arg1)->zoneContinuation(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSmoothDoubleCubic_inverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< long double > *arg1 = (ase::SmoothDoubleCubic< long double > *) 0 ;
  long double arg2 ;
  long double *arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  unsigned int result;
  
  if (!SWIG_Python_UnpackTuple(args, "LDSmoothDoubleCubic_inverse", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSmoothDoubleCubic_inverse" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< long double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LDSmoothDoubleCubic_inverse" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDSmoothDoubleCubic_inverse" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_long_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LDSmoothDoubleCubic_inverse" "', argument " "3"" of type '" "long double [2]""'"); 
  } 
  arg3 = reinterpret_cast< long double * >(argp3);
  {
    try {
      result = (unsigned int)((ase::SmoothDoubleCubic< long double > const *)arg1)->inverse(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LDSmoothDoubleCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< long double > *arg1 = (ase::SmoothDoubleCubic< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SmoothDoubleCubicT_long_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LDSmoothDoubleCubic" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< long double > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< long double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LDSmoothDoubleCubic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SmoothDoubleCubicT_long_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LDSmoothDoubleCubic_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LDSDCZoneFunctor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< long double > *arg1 = 0 ;
  long double arg2 ;
  long double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  ase::SDCZoneFunctor< long double > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_LDSDCZoneFunctor", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SmoothDoubleCubicT_long_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LDSDCZoneFunctor" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< long double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDSDCZoneFunctor" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< long double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< long double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LDSDCZoneFunctor" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDSDCZoneFunctor" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_LDSDCZoneFunctor" "', argument " "3"" of type '" "long double const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LDSDCZoneFunctor" "', argument " "3"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_LDSDCZoneFunctor" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (ase::SDCZoneFunctor< long double > *)new ase::SDCZoneFunctor< long double >((ase::SmoothDoubleCubic< long double > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SDCZoneFunctorT_long_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LDSDCZoneFunctor___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SDCZoneFunctor< long double > *arg1 = (ase::SDCZoneFunctor< long double > *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  long double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LDSDCZoneFunctor___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SDCZoneFunctorT_long_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LDSDCZoneFunctor___call__" "', argument " "1"" of type '" "ase::SDCZoneFunctor< long double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SDCZoneFunctor< long double > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LDSDCZoneFunctor___call__" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LDSDCZoneFunctor___call__" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (long double)((ase::SDCZoneFunctor< long double > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LDSDCZoneFunctor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SDCZoneFunctor< long double > *arg1 = (ase::SDCZoneFunctor< long double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SDCZoneFunctorT_long_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LDSDCZoneFunctor" "', argument " "1"" of type '" "ase::SDCZoneFunctor< long double > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SDCZoneFunctor< long double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LDSDCZoneFunctor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SDCZoneFunctorT_long_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LDSDCZoneFunctor_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_OPATGaussian0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *arg1 = (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OPATGaussian0" "', argument " "1"" of type '" "ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *""'"); 
  }
  arg1 = reinterpret_cast< ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OPATGaussian0_sigmaPlus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *arg1 = (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OPATGaussian0_sigmaPlus" "', argument " "1"" of type '" "ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > * >(argp1);
  {
    try {
      result = (double)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > const *)arg1)->sigmaPlus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OPATGaussian0_sigmaMinus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *arg1 = (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OPATGaussian0_sigmaMinus" "', argument " "1"" of type '" "ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > * >(argp1);
  {
    try {
      result = (double)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > const *)arg1)->sigmaMinus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OPATGaussian0_setScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *arg1 = (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "OPATGaussian0_setScale", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OPATGaussian0_setScale" "', argument " "1"" of type '" "ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *""'"); 
  }
  arg1 = reinterpret_cast< ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OPATGaussian0_setScale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setScale(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OPATGaussian0_isUnimodal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *arg1 = (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OPATGaussian0_isUnimodal" "', argument " "1"" of type '" "ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > * >(argp1);
  {
    try {
      result = (bool)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > const *)arg1)->isUnimodal();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OPATGaussian0_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_OPATGaussian1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > *arg1 = (ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__OPATGaussianT_ase__ParabolicRailwayCurveT_long_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OPATGaussian1" "', argument " "1"" of type '" "ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > *""'"); 
  }
  arg1 = reinterpret_cast< ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OPATGaussian1_sigmaPlus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > *arg1 = (ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__OPATGaussianT_ase__ParabolicRailwayCurveT_long_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OPATGaussian1_sigmaPlus" "', argument " "1"" of type '" "ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > * >(argp1);
  {
    try {
      result = (double)((ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > const *)arg1)->sigmaPlus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OPATGaussian1_sigmaMinus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > *arg1 = (ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__OPATGaussianT_ase__ParabolicRailwayCurveT_long_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OPATGaussian1_sigmaMinus" "', argument " "1"" of type '" "ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > * >(argp1);
  {
    try {
      result = (double)((ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > const *)arg1)->sigmaMinus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OPATGaussian1_setScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > *arg1 = (ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "OPATGaussian1_setScale", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__OPATGaussianT_ase__ParabolicRailwayCurveT_long_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OPATGaussian1_setScale" "', argument " "1"" of type '" "ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > *""'"); 
  }
  arg1 = reinterpret_cast< ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OPATGaussian1_setScale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setScale(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OPATGaussian1_isUnimodal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > *arg1 = (ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__OPATGaussianT_ase__ParabolicRailwayCurveT_long_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OPATGaussian1_isUnimodal" "', argument " "1"" of type '" "ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > * >(argp1);
  {
    try {
      result = (bool)((ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > const *)arg1)->isUnimodal();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OPATGaussian1_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__OPATGaussianT_ase__ParabolicRailwayCurveT_long_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_OPATGaussian2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > *arg1 = (ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__OPATGaussianT_ase__SmoothDoubleCubicT_long_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OPATGaussian2" "', argument " "1"" of type '" "ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > *""'"); 
  }
  arg1 = reinterpret_cast< ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OPATGaussian2_sigmaPlus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > *arg1 = (ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__OPATGaussianT_ase__SmoothDoubleCubicT_long_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OPATGaussian2_sigmaPlus" "', argument " "1"" of type '" "ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > * >(argp1);
  {
    try {
      result = (double)((ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > const *)arg1)->sigmaPlus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OPATGaussian2_sigmaMinus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > *arg1 = (ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__OPATGaussianT_ase__SmoothDoubleCubicT_long_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OPATGaussian2_sigmaMinus" "', argument " "1"" of type '" "ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > * >(argp1);
  {
    try {
      result = (double)((ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > const *)arg1)->sigmaMinus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OPATGaussian2_setScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > *arg1 = (ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "OPATGaussian2_setScale", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__OPATGaussianT_ase__SmoothDoubleCubicT_long_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OPATGaussian2_setScale" "', argument " "1"" of type '" "ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > *""'"); 
  }
  arg1 = reinterpret_cast< ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OPATGaussian2_setScale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setScale(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OPATGaussian2_isUnimodal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > *arg1 = (ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__OPATGaussianT_ase__SmoothDoubleCubicT_long_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OPATGaussian2_isUnimodal" "', argument " "1"" of type '" "ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > * >(argp1);
  {
    try {
      result = (bool)((ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > const *)arg1)->isUnimodal();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OPATGaussian2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__OPATGaussianT_ase__SmoothDoubleCubicT_long_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DimidiatedGaussian__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::DimidiatedGaussian *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DimidiatedGaussian" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DimidiatedGaussian" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DimidiatedGaussian" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::DimidiatedGaussian *)new ase::DimidiatedGaussian(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DimidiatedGaussian, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DimidiatedGaussian__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::DimidiatedGaussian *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DimidiatedGaussian" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DimidiatedGaussian" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::DimidiatedGaussian *)new ase::DimidiatedGaussian((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DimidiatedGaussian, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DimidiatedGaussian(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_DimidiatedGaussian", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DimidiatedGaussian__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_DimidiatedGaussian__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_DimidiatedGaussian'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::DimidiatedGaussian::DimidiatedGaussian(double,double,double)\n"
    "    ase::DimidiatedGaussian::DimidiatedGaussian(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DimidiatedGaussian_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DimidiatedGaussian *arg1 = (ase::DimidiatedGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::DimidiatedGaussian *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DimidiatedGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimidiatedGaussian_clone" "', argument " "1"" of type '" "ase::DimidiatedGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DimidiatedGaussian * >(argp1);
  {
    try {
      result = (ase::DimidiatedGaussian *)((ase::DimidiatedGaussian const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DimidiatedGaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DimidiatedGaussian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DimidiatedGaussian *arg1 = (ase::DimidiatedGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DimidiatedGaussian, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DimidiatedGaussian" "', argument " "1"" of type '" "ase::DimidiatedGaussian *""'"); 
  }
  arg1 = reinterpret_cast< ase::DimidiatedGaussian * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimidiatedGaussian_sigmaPlus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DimidiatedGaussian *arg1 = (ase::DimidiatedGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DimidiatedGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimidiatedGaussian_sigmaPlus" "', argument " "1"" of type '" "ase::DimidiatedGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DimidiatedGaussian * >(argp1);
  {
    try {
      result = (double)((ase::DimidiatedGaussian const *)arg1)->sigmaPlus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimidiatedGaussian_sigmaMinus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DimidiatedGaussian *arg1 = (ase::DimidiatedGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DimidiatedGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimidiatedGaussian_sigmaMinus" "', argument " "1"" of type '" "ase::DimidiatedGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DimidiatedGaussian * >(argp1);
  {
    try {
      result = (double)((ase::DimidiatedGaussian const *)arg1)->sigmaMinus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimidiatedGaussian_asymmetry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DimidiatedGaussian *arg1 = (ase::DimidiatedGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DimidiatedGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimidiatedGaussian_asymmetry" "', argument " "1"" of type '" "ase::DimidiatedGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DimidiatedGaussian * >(argp1);
  {
    try {
      result = (double)((ase::DimidiatedGaussian const *)arg1)->asymmetry();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimidiatedGaussian_isDensityContinuous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DimidiatedGaussian *arg1 = (ase::DimidiatedGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DimidiatedGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimidiatedGaussian_isDensityContinuous" "', argument " "1"" of type '" "ase::DimidiatedGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DimidiatedGaussian * >(argp1);
  {
    try {
      result = (bool)((ase::DimidiatedGaussian const *)arg1)->isDensityContinuous();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimidiatedGaussian_setScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DimidiatedGaussian *arg1 = (ase::DimidiatedGaussian *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DimidiatedGaussian_setScale", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DimidiatedGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimidiatedGaussian_setScale" "', argument " "1"" of type '" "ase::DimidiatedGaussian *""'"); 
  }
  arg1 = reinterpret_cast< ase::DimidiatedGaussian * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DimidiatedGaussian_setScale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setScale(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimidiatedGaussian_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DimidiatedGaussian *arg1 = (ase::DimidiatedGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DimidiatedGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimidiatedGaussian_classname" "', argument " "1"" of type '" "ase::DimidiatedGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DimidiatedGaussian * >(argp1);
  {
    try {
      result = ((ase::DimidiatedGaussian const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimidiatedGaussian_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::DimidiatedGaussian *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "DimidiatedGaussian_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DimidiatedGaussian_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DimidiatedGaussian_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DimidiatedGaussian_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::DimidiatedGaussian *)ase::DimidiatedGaussian::fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DimidiatedGaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DimidiatedGaussian_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__DimidiatedGaussian, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DimidiatedGaussian_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_DistortedGaussian__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::DistortedGaussian *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DistortedGaussian" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DistortedGaussian" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DistortedGaussian" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::DistortedGaussian *)new ase::DistortedGaussian(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DistortedGaussian, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DistortedGaussian__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::DistortedGaussian *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DistortedGaussian" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DistortedGaussian" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::DistortedGaussian *)new ase::DistortedGaussian((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DistortedGaussian, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DistortedGaussian(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_DistortedGaussian", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DistortedGaussian__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_DistortedGaussian__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_DistortedGaussian'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::DistortedGaussian::DistortedGaussian(double,double,double)\n"
    "    ase::DistortedGaussian::DistortedGaussian(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DistortedGaussian_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistortedGaussian *arg1 = (ase::DistortedGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::DistortedGaussian *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistortedGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistortedGaussian_clone" "', argument " "1"" of type '" "ase::DistortedGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistortedGaussian * >(argp1);
  {
    try {
      result = (ase::DistortedGaussian *)((ase::DistortedGaussian const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DistortedGaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DistortedGaussian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistortedGaussian *arg1 = (ase::DistortedGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistortedGaussian, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DistortedGaussian" "', argument " "1"" of type '" "ase::DistortedGaussian *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistortedGaussian * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistortedGaussian_sigmaPlus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistortedGaussian *arg1 = (ase::DistortedGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistortedGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistortedGaussian_sigmaPlus" "', argument " "1"" of type '" "ase::DistortedGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistortedGaussian * >(argp1);
  {
    try {
      result = (double)((ase::DistortedGaussian const *)arg1)->sigmaPlus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistortedGaussian_sigmaMinus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistortedGaussian *arg1 = (ase::DistortedGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistortedGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistortedGaussian_sigmaMinus" "', argument " "1"" of type '" "ase::DistortedGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistortedGaussian * >(argp1);
  {
    try {
      result = (double)((ase::DistortedGaussian const *)arg1)->sigmaMinus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistortedGaussian_isUnimodal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistortedGaussian *arg1 = (ase::DistortedGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistortedGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistortedGaussian_isUnimodal" "', argument " "1"" of type '" "ase::DistortedGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistortedGaussian * >(argp1);
  {
    try {
      result = (bool)((ase::DistortedGaussian const *)arg1)->isUnimodal();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistortedGaussian_setScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistortedGaussian *arg1 = (ase::DistortedGaussian *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DistortedGaussian_setScale", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistortedGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistortedGaussian_setScale" "', argument " "1"" of type '" "ase::DistortedGaussian *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistortedGaussian * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DistortedGaussian_setScale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setScale(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistortedGaussian_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistortedGaussian *arg1 = (ase::DistortedGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistortedGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistortedGaussian_classname" "', argument " "1"" of type '" "ase::DistortedGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistortedGaussian * >(argp1);
  {
    try {
      result = ((ase::DistortedGaussian const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistortedGaussian_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::DistortedGaussian *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "DistortedGaussian_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DistortedGaussian_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DistortedGaussian_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DistortedGaussian_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::DistortedGaussian *)ase::DistortedGaussian::fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DistortedGaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DistortedGaussian_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__DistortedGaussian, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DistortedGaussian_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_RailwayGaussian__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  ase::RailwayGaussian *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RailwayGaussian" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RailwayGaussian" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RailwayGaussian" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RailwayGaussian" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_RailwayGaussian" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (ase::RailwayGaussian *)new ase::RailwayGaussian(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__RailwayGaussian, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RailwayGaussian__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::RailwayGaussian *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RailwayGaussian" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RailwayGaussian" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RailwayGaussian" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::RailwayGaussian *)new ase::RailwayGaussian(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__RailwayGaussian, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RailwayGaussian__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::RailwayGaussian *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RailwayGaussian" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RailwayGaussian" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::RailwayGaussian *)new ase::RailwayGaussian((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__RailwayGaussian, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RailwayGaussian(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_RailwayGaussian", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RailwayGaussian__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_RailwayGaussian__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_RailwayGaussian__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_RailwayGaussian'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::RailwayGaussian::RailwayGaussian(double,double,double,double,double)\n"
    "    ase::RailwayGaussian::RailwayGaussian(double,double,double)\n"
    "    ase::RailwayGaussian::RailwayGaussian(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RailwayGaussian_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::RailwayGaussian *arg1 = (ase::RailwayGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::RailwayGaussian *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__RailwayGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RailwayGaussian_clone" "', argument " "1"" of type '" "ase::RailwayGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::RailwayGaussian * >(argp1);
  {
    try {
      result = (ase::RailwayGaussian *)((ase::RailwayGaussian const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__RailwayGaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RailwayGaussian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::RailwayGaussian *arg1 = (ase::RailwayGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__RailwayGaussian, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RailwayGaussian" "', argument " "1"" of type '" "ase::RailwayGaussian *""'"); 
  }
  arg1 = reinterpret_cast< ase::RailwayGaussian * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RailwayGaussian_hleft(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::RailwayGaussian *arg1 = (ase::RailwayGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__RailwayGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RailwayGaussian_hleft" "', argument " "1"" of type '" "ase::RailwayGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::RailwayGaussian * >(argp1);
  {
    try {
      result = (double)((ase::RailwayGaussian const *)arg1)->hleft();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RailwayGaussian_hright(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::RailwayGaussian *arg1 = (ase::RailwayGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__RailwayGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RailwayGaussian_hright" "', argument " "1"" of type '" "ase::RailwayGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::RailwayGaussian * >(argp1);
  {
    try {
      result = (double)((ase::RailwayGaussian const *)arg1)->hright();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RailwayGaussian_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::RailwayGaussian *arg1 = (ase::RailwayGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__RailwayGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RailwayGaussian_classname" "', argument " "1"" of type '" "ase::RailwayGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::RailwayGaussian * >(argp1);
  {
    try {
      result = ((ase::RailwayGaussian const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RailwayGaussian_transitionRegionChoice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "RailwayGaussian_transitionRegionChoice", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RailwayGaussian_transitionRegionChoice" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RailwayGaussian_transitionRegionChoice" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ase::RailwayGaussian::transitionRegionChoice(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RailwayGaussian_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::RailwayGaussian *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "RailwayGaussian_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RailwayGaussian_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RailwayGaussian_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RailwayGaussian_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::RailwayGaussian *)ase::RailwayGaussian::fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__RailwayGaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RailwayGaussian_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::RailwayGaussian *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RailwayGaussian_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RailwayGaussian_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RailwayGaussian_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RailwayGaussian_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::RailwayGaussian *)ase::RailwayGaussian::fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__RailwayGaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RailwayGaussian_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::RailwayGaussian *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RailwayGaussian_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RailwayGaussian_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RailwayGaussian_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::RailwayGaussian *)ase::RailwayGaussian::fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__RailwayGaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RailwayGaussian_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "RailwayGaussian_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RailwayGaussian_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_RailwayGaussian_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RailwayGaussian_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::RailwayGaussian::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::RailwayGaussian::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *RailwayGaussian_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__RailwayGaussian, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *RailwayGaussian_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_DoubleCubicGaussian__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::DoubleCubicGaussian *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleCubicGaussian" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DoubleCubicGaussian" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DoubleCubicGaussian" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::DoubleCubicGaussian *)new ase::DoubleCubicGaussian(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DoubleCubicGaussian, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleCubicGaussian__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::DoubleCubicGaussian *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DoubleCubicGaussian" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DoubleCubicGaussian" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::DoubleCubicGaussian *)new ase::DoubleCubicGaussian((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DoubleCubicGaussian, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleCubicGaussian(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_DoubleCubicGaussian", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DoubleCubicGaussian__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_DoubleCubicGaussian__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_DoubleCubicGaussian'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::DoubleCubicGaussian::DoubleCubicGaussian(double,double,double)\n"
    "    ase::DoubleCubicGaussian::DoubleCubicGaussian(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleCubicGaussian_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleCubicGaussian *arg1 = (ase::DoubleCubicGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::DoubleCubicGaussian *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DoubleCubicGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleCubicGaussian_clone" "', argument " "1"" of type '" "ase::DoubleCubicGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleCubicGaussian * >(argp1);
  {
    try {
      result = (ase::DoubleCubicGaussian *)((ase::DoubleCubicGaussian const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DoubleCubicGaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DoubleCubicGaussian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleCubicGaussian *arg1 = (ase::DoubleCubicGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DoubleCubicGaussian, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleCubicGaussian" "', argument " "1"" of type '" "ase::DoubleCubicGaussian *""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleCubicGaussian * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleCubicGaussian_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleCubicGaussian *arg1 = (ase::DoubleCubicGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DoubleCubicGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleCubicGaussian_classname" "', argument " "1"" of type '" "ase::DoubleCubicGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleCubicGaussian * >(argp1);
  {
    try {
      result = ((ase::DoubleCubicGaussian const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleCubicGaussian_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::DoubleCubicGaussian *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "DoubleCubicGaussian_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DoubleCubicGaussian_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleCubicGaussian_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleCubicGaussian_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::DoubleCubicGaussian *)ase::DoubleCubicGaussian::fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DoubleCubicGaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleCubicGaussian_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::DoubleCubicGaussian *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DoubleCubicGaussian_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleCubicGaussian_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleCubicGaussian_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DoubleCubicGaussian_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::DoubleCubicGaussian *)ase::DoubleCubicGaussian::fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DoubleCubicGaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleCubicGaussian_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::DoubleCubicGaussian *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DoubleCubicGaussian_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleCubicGaussian_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleCubicGaussian_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::DoubleCubicGaussian *)ase::DoubleCubicGaussian::fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DoubleCubicGaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleCubicGaussian_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DoubleCubicGaussian_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleCubicGaussian_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DoubleCubicGaussian_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DoubleCubicGaussian_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::DoubleCubicGaussian::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::DoubleCubicGaussian::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *DoubleCubicGaussian_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__DoubleCubicGaussian, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DoubleCubicGaussian_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SkewNormal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SkewNormal *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SkewNormal" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SkewNormal" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SkewNormal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SkewNormal *)new ase::SkewNormal(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SkewNormal, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SkewNormal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::SkewNormal *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SkewNormal" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SkewNormal" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::SkewNormal *)new ase::SkewNormal((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SkewNormal, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SkewNormal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SkewNormal", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SkewNormal__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SkewNormal__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SkewNormal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SkewNormal::SkewNormal(double,double,double)\n"
    "    ase::SkewNormal::SkewNormal(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SkewNormal_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SkewNormal *arg1 = (ase::SkewNormal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SkewNormal *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SkewNormal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SkewNormal_clone" "', argument " "1"" of type '" "ase::SkewNormal const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SkewNormal * >(argp1);
  {
    try {
      result = (ase::SkewNormal *)((ase::SkewNormal const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SkewNormal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SkewNormal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SkewNormal *arg1 = (ase::SkewNormal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SkewNormal, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SkewNormal" "', argument " "1"" of type '" "ase::SkewNormal *""'"); 
  }
  arg1 = reinterpret_cast< ase::SkewNormal * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SkewNormal_shapeParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SkewNormal *arg1 = (ase::SkewNormal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SkewNormal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SkewNormal_shapeParameter" "', argument " "1"" of type '" "ase::SkewNormal const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SkewNormal * >(argp1);
  {
    try {
      result = (double)((ase::SkewNormal const *)arg1)->shapeParameter();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SkewNormal_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SkewNormal *arg1 = (ase::SkewNormal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SkewNormal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SkewNormal_classname" "', argument " "1"" of type '" "ase::SkewNormal const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SkewNormal * >(argp1);
  {
    try {
      result = ((ase::SkewNormal const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SkewNormal_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SkewNormal *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SkewNormal_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SkewNormal_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SkewNormal_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SkewNormal_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SkewNormal *)ase::SkewNormal::fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SkewNormal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SkewNormal_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SkewNormal *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SkewNormal_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SkewNormal_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SkewNormal_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SkewNormal_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SkewNormal *)ase::SkewNormal::fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SkewNormal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SkewNormal_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SkewNormal *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SkewNormal_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SkewNormal_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SkewNormal_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SkewNormal *)ase::SkewNormal::fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SkewNormal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SkewNormal_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SkewNormal_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SkewNormal_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SkewNormal_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SkewNormal_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SkewNormal::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::SkewNormal::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SkewNormal_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SkewNormal, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SkewNormal_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_QVWGaussian__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::QVWGaussian *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_QVWGaussian" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_QVWGaussian" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_QVWGaussian" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::QVWGaussian *)new ase::QVWGaussian(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__QVWGaussian, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_QVWGaussian__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::QVWGaussian *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_QVWGaussian" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_QVWGaussian" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::QVWGaussian *)new ase::QVWGaussian((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__QVWGaussian, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_QVWGaussian(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_QVWGaussian", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_QVWGaussian__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_QVWGaussian__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_QVWGaussian'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::QVWGaussian::QVWGaussian(double,double,double)\n"
    "    ase::QVWGaussian::QVWGaussian(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_QVWGaussian_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::QVWGaussian *arg1 = (ase::QVWGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::QVWGaussian *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__QVWGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QVWGaussian_clone" "', argument " "1"" of type '" "ase::QVWGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::QVWGaussian * >(argp1);
  {
    try {
      result = (ase::QVWGaussian *)((ase::QVWGaussian const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__QVWGaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_QVWGaussian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::QVWGaussian *arg1 = (ase::QVWGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__QVWGaussian, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_QVWGaussian" "', argument " "1"" of type '" "ase::QVWGaussian *""'"); 
  }
  arg1 = reinterpret_cast< ase::QVWGaussian * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QVWGaussian_asymmetryParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::QVWGaussian *arg1 = (ase::QVWGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__QVWGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QVWGaussian_asymmetryParameter" "', argument " "1"" of type '" "ase::QVWGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::QVWGaussian * >(argp1);
  {
    try {
      result = (double)((ase::QVWGaussian const *)arg1)->asymmetryParameter();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QVWGaussian_locationParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::QVWGaussian *arg1 = (ase::QVWGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__QVWGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QVWGaussian_locationParameter" "', argument " "1"" of type '" "ase::QVWGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::QVWGaussian * >(argp1);
  {
    try {
      result = (double)((ase::QVWGaussian const *)arg1)->locationParameter();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QVWGaussian_scaleParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::QVWGaussian *arg1 = (ase::QVWGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__QVWGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QVWGaussian_scaleParameter" "', argument " "1"" of type '" "ase::QVWGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::QVWGaussian * >(argp1);
  {
    try {
      result = (double)((ase::QVWGaussian const *)arg1)->scaleParameter();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QVWGaussian_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::QVWGaussian *arg1 = (ase::QVWGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__QVWGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QVWGaussian_classname" "', argument " "1"" of type '" "ase::QVWGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::QVWGaussian * >(argp1);
  {
    try {
      result = ((ase::QVWGaussian const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QVWGaussian_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::QVWGaussian *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "QVWGaussian_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "QVWGaussian_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QVWGaussian_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "QVWGaussian_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::QVWGaussian *)ase::QVWGaussian::fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__QVWGaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QVWGaussian_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::QVWGaussian *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "QVWGaussian_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QVWGaussian_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "QVWGaussian_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "QVWGaussian_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::QVWGaussian *)ase::QVWGaussian::fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__QVWGaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QVWGaussian_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::QVWGaussian *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "QVWGaussian_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QVWGaussian_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "QVWGaussian_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::QVWGaussian *)ase::QVWGaussian::fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__QVWGaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QVWGaussian_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "QVWGaussian_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_QVWGaussian_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_QVWGaussian_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'QVWGaussian_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::QVWGaussian::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::QVWGaussian::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *QVWGaussian_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__QVWGaussian, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *QVWGaussian_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_GammaDistribution__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::GammaDistribution *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GammaDistribution" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GammaDistribution" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GammaDistribution" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::GammaDistribution *)new ase::GammaDistribution(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__GammaDistribution, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GammaDistribution__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::GammaDistribution *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GammaDistribution" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GammaDistribution" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::GammaDistribution *)new ase::GammaDistribution((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__GammaDistribution, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GammaDistribution(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_GammaDistribution", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GammaDistribution__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_GammaDistribution__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_GammaDistribution'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::GammaDistribution::GammaDistribution(double,double,double)\n"
    "    ase::GammaDistribution::GammaDistribution(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GammaDistribution_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::GammaDistribution *arg1 = (ase::GammaDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::GammaDistribution *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GammaDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GammaDistribution_clone" "', argument " "1"" of type '" "ase::GammaDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GammaDistribution * >(argp1);
  {
    try {
      result = (ase::GammaDistribution *)((ase::GammaDistribution const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__GammaDistribution, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GammaDistribution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::GammaDistribution *arg1 = (ase::GammaDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GammaDistribution, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GammaDistribution" "', argument " "1"" of type '" "ase::GammaDistribution *""'"); 
  }
  arg1 = reinterpret_cast< ase::GammaDistribution * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GammaDistribution_shapeParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::GammaDistribution *arg1 = (ase::GammaDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GammaDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GammaDistribution_shapeParameter" "', argument " "1"" of type '" "ase::GammaDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GammaDistribution * >(argp1);
  {
    try {
      result = (double)((ase::GammaDistribution const *)arg1)->shapeParameter();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GammaDistribution_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::GammaDistribution *arg1 = (ase::GammaDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GammaDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GammaDistribution_classname" "', argument " "1"" of type '" "ase::GammaDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GammaDistribution * >(argp1);
  {
    try {
      result = ((ase::GammaDistribution const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GammaDistribution_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__GammaDistribution, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *GammaDistribution_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LogNormal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::LogNormal *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LogNormal" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LogNormal" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LogNormal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::LogNormal *)new ase::LogNormal(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LogNormal, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LogNormal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::LogNormal *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LogNormal" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LogNormal" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::LogNormal *)new ase::LogNormal((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LogNormal, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LogNormal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_LogNormal", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LogNormal__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_LogNormal__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_LogNormal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::LogNormal::LogNormal(double,double,double)\n"
    "    ase::LogNormal::LogNormal(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LogNormal_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LogNormal *arg1 = (ase::LogNormal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::LogNormal *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LogNormal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogNormal_clone" "', argument " "1"" of type '" "ase::LogNormal const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LogNormal * >(argp1);
  {
    try {
      result = (ase::LogNormal *)((ase::LogNormal const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LogNormal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LogNormal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LogNormal *arg1 = (ase::LogNormal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LogNormal, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LogNormal" "', argument " "1"" of type '" "ase::LogNormal *""'"); 
  }
  arg1 = reinterpret_cast< ase::LogNormal * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogNormal_skewness(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LogNormal *arg1 = (ase::LogNormal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LogNormal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogNormal_skewness" "', argument " "1"" of type '" "ase::LogNormal const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LogNormal * >(argp1);
  {
    try {
      result = (double)((ase::LogNormal const *)arg1)->skewness();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogNormal_kurtosis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LogNormal *arg1 = (ase::LogNormal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LogNormal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogNormal_kurtosis" "', argument " "1"" of type '" "ase::LogNormal const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LogNormal * >(argp1);
  {
    try {
      result = (double)((ase::LogNormal const *)arg1)->kurtosis();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogNormal_isGaussian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LogNormal *arg1 = (ase::LogNormal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LogNormal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogNormal_isGaussian" "', argument " "1"" of type '" "ase::LogNormal const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LogNormal * >(argp1);
  {
    try {
      result = (bool)((ase::LogNormal const *)arg1)->isGaussian();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogNormal_entropy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LogNormal *arg1 = (ase::LogNormal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LogNormal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogNormal_entropy" "', argument " "1"" of type '" "ase::LogNormal const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LogNormal * >(argp1);
  {
    try {
      result = (double)((ase::LogNormal const *)arg1)->entropy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogNormal_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LogNormal *arg1 = (ase::LogNormal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LogNormal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogNormal_classname" "', argument " "1"" of type '" "ase::LogNormal const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LogNormal * >(argp1);
  {
    try {
      result = ((ase::LogNormal const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogNormal_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::LogNormal *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "LogNormal_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LogNormal_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LogNormal_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LogNormal_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::LogNormal *)ase::LogNormal::fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LogNormal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogNormal_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::LogNormal *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LogNormal_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LogNormal_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LogNormal_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "LogNormal_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::LogNormal *)ase::LogNormal::fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LogNormal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogNormal_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::LogNormal *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LogNormal_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LogNormal_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LogNormal_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::LogNormal *)ase::LogNormal::fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LogNormal, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogNormal_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LogNormal_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LogNormal_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LogNormal_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LogNormal_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::LogNormal::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::LogNormal::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *LogNormal_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__LogNormal, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LogNormal_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_JohnsonSu__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::JohnsonSu *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JohnsonSu" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JohnsonSu" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JohnsonSu" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_JohnsonSu" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::JohnsonSu *)new ase::JohnsonSu(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__JohnsonSu, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JohnsonSu__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::JohnsonSu *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JohnsonSu" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JohnsonSu" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JohnsonSu" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::JohnsonSu *)new ase::JohnsonSu(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__JohnsonSu, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JohnsonSu__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::JohnsonSu *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_JohnsonSu" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_JohnsonSu" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::JohnsonSu *)new ase::JohnsonSu((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__JohnsonSu, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JohnsonSu(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_JohnsonSu", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_JohnsonSu__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_JohnsonSu__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_JohnsonSu__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_JohnsonSu'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::JohnsonSu::JohnsonSu(double,double,double,double)\n"
    "    ase::JohnsonSu::JohnsonSu(double,double,double)\n"
    "    ase::JohnsonSu::JohnsonSu(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JohnsonSu_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSu *arg1 = (ase::JohnsonSu *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::JohnsonSu *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSu, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSu_clone" "', argument " "1"" of type '" "ase::JohnsonSu const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSu * >(argp1);
  {
    try {
      result = (ase::JohnsonSu *)((ase::JohnsonSu const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__JohnsonSu, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_JohnsonSu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSu *arg1 = (ase::JohnsonSu *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSu, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_JohnsonSu" "', argument " "1"" of type '" "ase::JohnsonSu *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSu * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSu_skewness(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSu *arg1 = (ase::JohnsonSu *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSu, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSu_skewness" "', argument " "1"" of type '" "ase::JohnsonSu const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSu * >(argp1);
  {
    try {
      result = (double)((ase::JohnsonSu const *)arg1)->skewness();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSu_kurtosis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSu *arg1 = (ase::JohnsonSu *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSu, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSu_kurtosis" "', argument " "1"" of type '" "ase::JohnsonSu const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSu * >(argp1);
  {
    try {
      result = (double)((ase::JohnsonSu const *)arg1)->kurtosis();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSu_isValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSu *arg1 = (ase::JohnsonSu *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSu, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSu_isValid" "', argument " "1"" of type '" "ase::JohnsonSu const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSu * >(argp1);
  {
    try {
      result = (bool)((ase::JohnsonSu const *)arg1)->isValid();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSu_getDelta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSu *arg1 = (ase::JohnsonSu *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSu, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSu_getDelta" "', argument " "1"" of type '" "ase::JohnsonSu const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSu * >(argp1);
  {
    try {
      result = (double)((ase::JohnsonSu const *)arg1)->getDelta();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSu_getLambda(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSu *arg1 = (ase::JohnsonSu *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSu, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSu_getLambda" "', argument " "1"" of type '" "ase::JohnsonSu const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSu * >(argp1);
  {
    try {
      result = (double)((ase::JohnsonSu const *)arg1)->getLambda();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSu_getGamma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSu *arg1 = (ase::JohnsonSu *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSu, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSu_getGamma" "', argument " "1"" of type '" "ase::JohnsonSu const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSu * >(argp1);
  {
    try {
      result = (double)((ase::JohnsonSu const *)arg1)->getGamma();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSu_getXi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSu *arg1 = (ase::JohnsonSu *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSu, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSu_getXi" "', argument " "1"" of type '" "ase::JohnsonSu const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSu * >(argp1);
  {
    try {
      result = (double)((ase::JohnsonSu const *)arg1)->getXi();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSu_entropy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSu *arg1 = (ase::JohnsonSu *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSu, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSu_entropy" "', argument " "1"" of type '" "ase::JohnsonSu const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSu * >(argp1);
  {
    try {
      result = (double)((ase::JohnsonSu const *)arg1)->entropy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSu_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSu *arg1 = (ase::JohnsonSu *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSu, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSu_classname" "', argument " "1"" of type '" "ase::JohnsonSu const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSu * >(argp1);
  {
    try {
      result = ((ase::JohnsonSu const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *JohnsonSu_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__JohnsonSu, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *JohnsonSu_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_JohnsonSb__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::JohnsonSb *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JohnsonSb" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JohnsonSb" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JohnsonSb" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_JohnsonSb" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::JohnsonSb *)new ase::JohnsonSb(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__JohnsonSb, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JohnsonSb__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::JohnsonSb *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_JohnsonSb" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_JohnsonSb" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::JohnsonSb *)new ase::JohnsonSb((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__JohnsonSb, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JohnsonSb(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_JohnsonSb", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_JohnsonSb__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_JohnsonSb__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_JohnsonSb'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::JohnsonSb::JohnsonSb(double,double,double,double)\n"
    "    ase::JohnsonSb::JohnsonSb(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JohnsonSb_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSb *arg1 = (ase::JohnsonSb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::JohnsonSb *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSb_clone" "', argument " "1"" of type '" "ase::JohnsonSb const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSb * >(argp1);
  {
    try {
      result = (ase::JohnsonSb *)((ase::JohnsonSb const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__JohnsonSb, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_JohnsonSb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSb *arg1 = (ase::JohnsonSb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSb, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_JohnsonSb" "', argument " "1"" of type '" "ase::JohnsonSb *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSb * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSb_skewness(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSb *arg1 = (ase::JohnsonSb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSb_skewness" "', argument " "1"" of type '" "ase::JohnsonSb const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSb * >(argp1);
  {
    try {
      result = (double)((ase::JohnsonSb const *)arg1)->skewness();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSb_kurtosis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSb *arg1 = (ase::JohnsonSb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSb_kurtosis" "', argument " "1"" of type '" "ase::JohnsonSb const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSb * >(argp1);
  {
    try {
      result = (double)((ase::JohnsonSb const *)arg1)->kurtosis();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSb_isValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSb *arg1 = (ase::JohnsonSb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSb_isValid" "', argument " "1"" of type '" "ase::JohnsonSb const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSb * >(argp1);
  {
    try {
      result = (bool)((ase::JohnsonSb const *)arg1)->isValid();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSb_isUnimodal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSb *arg1 = (ase::JohnsonSb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSb_isUnimodal" "', argument " "1"" of type '" "ase::JohnsonSb const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSb * >(argp1);
  {
    try {
      result = (bool)((ase::JohnsonSb const *)arg1)->isUnimodal();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSb_getDelta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSb *arg1 = (ase::JohnsonSb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSb_getDelta" "', argument " "1"" of type '" "ase::JohnsonSb const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSb * >(argp1);
  {
    try {
      result = (double)((ase::JohnsonSb const *)arg1)->getDelta();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSb_getLambda(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSb *arg1 = (ase::JohnsonSb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSb_getLambda" "', argument " "1"" of type '" "ase::JohnsonSb const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSb * >(argp1);
  {
    try {
      result = (double)((ase::JohnsonSb const *)arg1)->getLambda();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSb_getGamma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSb *arg1 = (ase::JohnsonSb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSb_getGamma" "', argument " "1"" of type '" "ase::JohnsonSb const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSb * >(argp1);
  {
    try {
      result = (double)((ase::JohnsonSb const *)arg1)->getGamma();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSb_getXi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSb *arg1 = (ase::JohnsonSb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSb_getXi" "', argument " "1"" of type '" "ase::JohnsonSb const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSb * >(argp1);
  {
    try {
      result = (double)((ase::JohnsonSb const *)arg1)->getXi();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSb_entropy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSb *arg1 = (ase::JohnsonSb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSb_entropy" "', argument " "1"" of type '" "ase::JohnsonSb const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSb * >(argp1);
  {
    try {
      result = (double)((ase::JohnsonSb const *)arg1)->entropy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSb_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSb *arg1 = (ase::JohnsonSb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSb_classname" "', argument " "1"" of type '" "ase::JohnsonSb const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSb * >(argp1);
  {
    try {
      result = ((ase::JohnsonSb const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSb_fitParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject *swig_obj[6] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "JohnsonSb_fitParameters", 6, 6, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JohnsonSb_fitParameters" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JohnsonSb_fitParameters" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JohnsonSb_fitParameters" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "JohnsonSb_fitParameters" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "JohnsonSb_fitParameters" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(swig_obj[5], &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "JohnsonSb_fitParameters" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try {
      result = (bool)ase::JohnsonSb::fitParameters(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *JohnsonSb_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__JohnsonSb, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *JohnsonSb_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_JohnsonSystem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::JohnsonSystem *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JohnsonSystem" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JohnsonSystem" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_JohnsonSystem" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_JohnsonSystem" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::JohnsonSystem *)new ase::JohnsonSystem(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__JohnsonSystem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JohnsonSystem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::JohnsonSystem *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_JohnsonSystem" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_JohnsonSystem" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::JohnsonSystem *)new ase::JohnsonSystem((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__JohnsonSystem, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JohnsonSystem__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::JohnsonSystem *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ase::JohnsonSystem *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__JohnsonSystem,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_JohnsonSystem" "', argument " "1"" of type '" "ase::JohnsonSystem const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_JohnsonSystem" "', argument " "1"" of type '" "ase::JohnsonSystem const &""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSystem * >(argp1);
  {
    try {
      result = (ase::JohnsonSystem *)new ase::JohnsonSystem((ase::JohnsonSystem const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__JohnsonSystem, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JohnsonSystem(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_JohnsonSystem", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__JohnsonSystem, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_JohnsonSystem__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_JohnsonSystem__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_JohnsonSystem__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_JohnsonSystem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::JohnsonSystem::JohnsonSystem(double,double,double,double)\n"
    "    ase::JohnsonSystem::JohnsonSystem(std::vector< double,std::allocator< double > > const &)\n"
    "    ase::JohnsonSystem::JohnsonSystem(ase::JohnsonSystem const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_JohnsonSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSystem *arg1 = (ase::JohnsonSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSystem, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_JohnsonSystem" "', argument " "1"" of type '" "ase::JohnsonSystem *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSystem * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSystem_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSystem *arg1 = (ase::JohnsonSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::JohnsonSystem *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSystem_clone" "', argument " "1"" of type '" "ase::JohnsonSystem const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSystem * >(argp1);
  {
    try {
      result = (ase::JohnsonSystem *)((ase::JohnsonSystem const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__JohnsonSystem, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSystem_skewness(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSystem *arg1 = (ase::JohnsonSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSystem_skewness" "', argument " "1"" of type '" "ase::JohnsonSystem const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSystem * >(argp1);
  {
    try {
      result = (double)((ase::JohnsonSystem const *)arg1)->skewness();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSystem_kurtosis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSystem *arg1 = (ase::JohnsonSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSystem_kurtosis" "', argument " "1"" of type '" "ase::JohnsonSystem const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSystem * >(argp1);
  {
    try {
      result = (double)((ase::JohnsonSystem const *)arg1)->kurtosis();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSystem_curveType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSystem *arg1 = (ase::JohnsonSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::JohnsonSystem::CurveType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSystem_curveType" "', argument " "1"" of type '" "ase::JohnsonSystem const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSystem * >(argp1);
  {
    try {
      result = (ase::JohnsonSystem::CurveType)((ase::JohnsonSystem const *)arg1)->curveType();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSystem_entropy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSystem *arg1 = (ase::JohnsonSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSystem_entropy" "', argument " "1"" of type '" "ase::JohnsonSystem const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSystem * >(argp1);
  {
    try {
      result = (double)((ase::JohnsonSystem const *)arg1)->entropy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSystem_isUnimodal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSystem *arg1 = (ase::JohnsonSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSystem_isUnimodal" "', argument " "1"" of type '" "ase::JohnsonSystem const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSystem * >(argp1);
  {
    try {
      result = (bool)((ase::JohnsonSystem const *)arg1)->isUnimodal();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSystem_isValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSystem *arg1 = (ase::JohnsonSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSystem_isValid" "', argument " "1"" of type '" "ase::JohnsonSystem const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSystem * >(argp1);
  {
    try {
      result = (bool)((ase::JohnsonSystem const *)arg1)->isValid();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSystem_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSystem *arg1 = (ase::JohnsonSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSystem_classname" "', argument " "1"" of type '" "ase::JohnsonSystem const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSystem * >(argp1);
  {
    try {
      result = ((ase::JohnsonSystem const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSystem_subclass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::JohnsonSystem *arg1 = (ase::JohnsonSystem *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__JohnsonSystem, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JohnsonSystem_subclass" "', argument " "1"" of type '" "ase::JohnsonSystem const *""'"); 
  }
  arg1 = reinterpret_cast< ase::JohnsonSystem * >(argp1);
  {
    try {
      result = ((ase::JohnsonSystem const *)arg1)->subclass();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSystem_select(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::JohnsonSystem::CurveType result;
  
  if (!SWIG_Python_UnpackTuple(args, "JohnsonSystem_select", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JohnsonSystem_select" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JohnsonSystem_select" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (ase::JohnsonSystem::CurveType)ase::JohnsonSystem::select(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSystem_slowMaxEntKurtosis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JohnsonSystem_slowMaxEntKurtosis" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (double)ase::JohnsonSystem::slowMaxEntKurtosis(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSystem_approxMaxEntKurtosis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JohnsonSystem_approxMaxEntKurtosis" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (double)ase::JohnsonSystem::approxMaxEntKurtosis(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSystem_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::JohnsonSystem *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "JohnsonSystem_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JohnsonSystem_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JohnsonSystem_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JohnsonSystem_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::JohnsonSystem *)ase::JohnsonSystem::fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__JohnsonSystem, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSystem_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::JohnsonSystem *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JohnsonSystem_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JohnsonSystem_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JohnsonSystem_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "JohnsonSystem_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::JohnsonSystem *)ase::JohnsonSystem::fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__JohnsonSystem, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSystem_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::JohnsonSystem *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JohnsonSystem_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JohnsonSystem_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JohnsonSystem_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::JohnsonSystem *)ase::JohnsonSystem::fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__JohnsonSystem, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JohnsonSystem_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "JohnsonSystem_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_JohnsonSystem_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_JohnsonSystem_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'JohnsonSystem_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::JohnsonSystem::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::JohnsonSystem::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *JohnsonSystem_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__JohnsonSystem, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *JohnsonSystem_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_EdgeworthExpansion3__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::EdgeworthExpansion3 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EdgeworthExpansion3" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EdgeworthExpansion3" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::EdgeworthExpansion3 *)new ase::EdgeworthExpansion3((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__EdgeworthExpansion3, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EdgeworthExpansion3__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::EdgeworthExpansion3 *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_EdgeworthExpansion3" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_EdgeworthExpansion3" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_EdgeworthExpansion3" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::EdgeworthExpansion3 *)new ase::EdgeworthExpansion3(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__EdgeworthExpansion3, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EdgeworthExpansion3(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_EdgeworthExpansion3", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EdgeworthExpansion3__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_EdgeworthExpansion3__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_EdgeworthExpansion3'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::EdgeworthExpansion3::EdgeworthExpansion3(std::vector< double,std::allocator< double > > const &)\n"
    "    ase::EdgeworthExpansion3::EdgeworthExpansion3(double,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EdgeworthExpansion3_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EdgeworthExpansion3 *arg1 = (ase::EdgeworthExpansion3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::EdgeworthExpansion3 *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EdgeworthExpansion3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeworthExpansion3_clone" "', argument " "1"" of type '" "ase::EdgeworthExpansion3 const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EdgeworthExpansion3 * >(argp1);
  {
    try {
      result = (ase::EdgeworthExpansion3 *)((ase::EdgeworthExpansion3 const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__EdgeworthExpansion3, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EdgeworthExpansion3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EdgeworthExpansion3 *arg1 = (ase::EdgeworthExpansion3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EdgeworthExpansion3, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EdgeworthExpansion3" "', argument " "1"" of type '" "ase::EdgeworthExpansion3 *""'"); 
  }
  arg1 = reinterpret_cast< ase::EdgeworthExpansion3 * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeworthExpansion3_isNonNegative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EdgeworthExpansion3 *arg1 = (ase::EdgeworthExpansion3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EdgeworthExpansion3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeworthExpansion3_isNonNegative" "', argument " "1"" of type '" "ase::EdgeworthExpansion3 const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EdgeworthExpansion3 * >(argp1);
  {
    try {
      result = (bool)((ase::EdgeworthExpansion3 const *)arg1)->isNonNegative();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeworthExpansion3_skewness(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EdgeworthExpansion3 *arg1 = (ase::EdgeworthExpansion3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EdgeworthExpansion3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeworthExpansion3_skewness" "', argument " "1"" of type '" "ase::EdgeworthExpansion3 const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EdgeworthExpansion3 * >(argp1);
  {
    try {
      result = (double)((ase::EdgeworthExpansion3 const *)arg1)->skewness();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeworthExpansion3_safeSigmaRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EdgeworthExpansion3 *arg1 = (ase::EdgeworthExpansion3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EdgeworthExpansion3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeworthExpansion3_safeSigmaRange" "', argument " "1"" of type '" "ase::EdgeworthExpansion3 const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EdgeworthExpansion3 * >(argp1);
  {
    try {
      result = (double)((ase::EdgeworthExpansion3 const *)arg1)->safeSigmaRange();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeworthExpansion3_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EdgeworthExpansion3 *arg1 = (ase::EdgeworthExpansion3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EdgeworthExpansion3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EdgeworthExpansion3_classname" "', argument " "1"" of type '" "ase::EdgeworthExpansion3 const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EdgeworthExpansion3 * >(argp1);
  {
    try {
      result = ((ase::EdgeworthExpansion3 const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeworthExpansion3_classSafeSigmaRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "EdgeworthExpansion3_classSafeSigmaRange", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (double)ase::EdgeworthExpansion3::classSafeSigmaRange();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeworthExpansion3_setClassSafeSigmaRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "EdgeworthExpansion3_setClassSafeSigmaRange" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      ase::EdgeworthExpansion3::setClassSafeSigmaRange(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeworthExpansion3_restoreDefaultSafeSigmaRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!SWIG_Python_UnpackTuple(args, "EdgeworthExpansion3_restoreDefaultSafeSigmaRange", 0, 0, 0)) SWIG_fail;
  {
    try {
      ase::EdgeworthExpansion3::restoreDefaultSafeSigmaRange();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeworthExpansion3_largestSkewAllowed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "EdgeworthExpansion3_largestSkewAllowed" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (double)ase::EdgeworthExpansion3::largestSkewAllowed(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EdgeworthExpansion3_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::EdgeworthExpansion3 *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "EdgeworthExpansion3_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "EdgeworthExpansion3_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EdgeworthExpansion3_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EdgeworthExpansion3_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::EdgeworthExpansion3 *)ase::EdgeworthExpansion3::fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__EdgeworthExpansion3, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EdgeworthExpansion3_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__EdgeworthExpansion3, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *EdgeworthExpansion3_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_FechnerDistribution__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::FechnerDistribution *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FechnerDistribution" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FechnerDistribution" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FechnerDistribution" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::FechnerDistribution *)new ase::FechnerDistribution(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__FechnerDistribution, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FechnerDistribution__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::FechnerDistribution *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FechnerDistribution" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FechnerDistribution" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::FechnerDistribution *)new ase::FechnerDistribution((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__FechnerDistribution, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FechnerDistribution(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_FechnerDistribution", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FechnerDistribution__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_FechnerDistribution__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_FechnerDistribution'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::FechnerDistribution::FechnerDistribution(double,double,double)\n"
    "    ase::FechnerDistribution::FechnerDistribution(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FechnerDistribution_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::FechnerDistribution *arg1 = (ase::FechnerDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::FechnerDistribution *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__FechnerDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FechnerDistribution_clone" "', argument " "1"" of type '" "ase::FechnerDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::FechnerDistribution * >(argp1);
  {
    try {
      result = (ase::FechnerDistribution *)((ase::FechnerDistribution const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__FechnerDistribution, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FechnerDistribution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::FechnerDistribution *arg1 = (ase::FechnerDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__FechnerDistribution, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FechnerDistribution" "', argument " "1"" of type '" "ase::FechnerDistribution *""'"); 
  }
  arg1 = reinterpret_cast< ase::FechnerDistribution * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FechnerDistribution_sigmaPlus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::FechnerDistribution *arg1 = (ase::FechnerDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__FechnerDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FechnerDistribution_sigmaPlus" "', argument " "1"" of type '" "ase::FechnerDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::FechnerDistribution * >(argp1);
  {
    try {
      result = (double)((ase::FechnerDistribution const *)arg1)->sigmaPlus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FechnerDistribution_sigmaMinus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::FechnerDistribution *arg1 = (ase::FechnerDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__FechnerDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FechnerDistribution_sigmaMinus" "', argument " "1"" of type '" "ase::FechnerDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::FechnerDistribution * >(argp1);
  {
    try {
      result = (double)((ase::FechnerDistribution const *)arg1)->sigmaMinus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FechnerDistribution_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::FechnerDistribution *arg1 = (ase::FechnerDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__FechnerDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FechnerDistribution_classname" "', argument " "1"" of type '" "ase::FechnerDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::FechnerDistribution * >(argp1);
  {
    try {
      result = ((ase::FechnerDistribution const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FechnerDistribution_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::FechnerDistribution *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "FechnerDistribution_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FechnerDistribution_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FechnerDistribution_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FechnerDistribution_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::FechnerDistribution *)ase::FechnerDistribution::fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__FechnerDistribution, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FechnerDistribution_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::FechnerDistribution *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FechnerDistribution_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FechnerDistribution_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FechnerDistribution_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FechnerDistribution_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::FechnerDistribution *)ase::FechnerDistribution::fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__FechnerDistribution, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FechnerDistribution_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::FechnerDistribution *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FechnerDistribution_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FechnerDistribution_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FechnerDistribution_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::FechnerDistribution *)ase::FechnerDistribution::fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__FechnerDistribution, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FechnerDistribution_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FechnerDistribution_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FechnerDistribution_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FechnerDistribution_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FechnerDistribution_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::FechnerDistribution::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::FechnerDistribution::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *FechnerDistribution_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__FechnerDistribution, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *FechnerDistribution_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_EmpiricalDistribution__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  bool arg2 ;
  int res1 = SWIG_OLDOBJ ;
  bool val2 ;
  int ecode2 = 0 ;
  ase::EmpiricalDistribution *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EmpiricalDistribution" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EmpiricalDistribution" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_EmpiricalDistribution" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (ase::EmpiricalDistribution *)new ase::EmpiricalDistribution((std::vector< double,std::allocator< double > > const &)*arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__EmpiricalDistribution, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EmpiricalDistribution__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::EmpiricalDistribution *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EmpiricalDistribution" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EmpiricalDistribution" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::EmpiricalDistribution *)new ase::EmpiricalDistribution((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__EmpiricalDistribution, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_EmpiricalDistribution(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_EmpiricalDistribution", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_EmpiricalDistribution__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_EmpiricalDistribution__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_EmpiricalDistribution'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::EmpiricalDistribution::EmpiricalDistribution(std::vector< double,std::allocator< double > > const &,bool)\n"
    "    ase::EmpiricalDistribution::EmpiricalDistribution(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EmpiricalDistribution_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EmpiricalDistribution *arg1 = (ase::EmpiricalDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::EmpiricalDistribution *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EmpiricalDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EmpiricalDistribution_clone" "', argument " "1"" of type '" "ase::EmpiricalDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EmpiricalDistribution * >(argp1);
  {
    try {
      result = (ase::EmpiricalDistribution *)((ase::EmpiricalDistribution const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__EmpiricalDistribution, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EmpiricalDistribution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EmpiricalDistribution *arg1 = (ase::EmpiricalDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EmpiricalDistribution, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EmpiricalDistribution" "', argument " "1"" of type '" "ase::EmpiricalDistribution *""'"); 
  }
  arg1 = reinterpret_cast< ase::EmpiricalDistribution * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EmpiricalDistribution_density(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EmpiricalDistribution *arg1 = (ase::EmpiricalDistribution *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "EmpiricalDistribution_density", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EmpiricalDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EmpiricalDistribution_density" "', argument " "1"" of type '" "ase::EmpiricalDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EmpiricalDistribution * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EmpiricalDistribution_density" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::EmpiricalDistribution const *)arg1)->density(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EmpiricalDistribution_densityDerivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EmpiricalDistribution *arg1 = (ase::EmpiricalDistribution *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "EmpiricalDistribution_densityDerivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EmpiricalDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EmpiricalDistribution_densityDerivative" "', argument " "1"" of type '" "ase::EmpiricalDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EmpiricalDistribution * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EmpiricalDistribution_densityDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::EmpiricalDistribution const *)arg1)->densityDerivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EmpiricalDistribution_mode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EmpiricalDistribution *arg1 = (ase::EmpiricalDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EmpiricalDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EmpiricalDistribution_mode" "', argument " "1"" of type '" "ase::EmpiricalDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EmpiricalDistribution * >(argp1);
  {
    try {
      result = (double)((ase::EmpiricalDistribution const *)arg1)->mode();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EmpiricalDistribution_descentDelta__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::EmpiricalDistribution *arg1 = (ase::EmpiricalDistribution *) 0 ;
  bool arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EmpiricalDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EmpiricalDistribution_descentDelta" "', argument " "1"" of type '" "ase::EmpiricalDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EmpiricalDistribution * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EmpiricalDistribution_descentDelta" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "EmpiricalDistribution_descentDelta" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::EmpiricalDistribution const *)arg1)->descentDelta(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EmpiricalDistribution_descentDelta__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::EmpiricalDistribution *arg1 = (ase::EmpiricalDistribution *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EmpiricalDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EmpiricalDistribution_descentDelta" "', argument " "1"" of type '" "ase::EmpiricalDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EmpiricalDistribution * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EmpiricalDistribution_descentDelta" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (double)((ase::EmpiricalDistribution const *)arg1)->descentDelta(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EmpiricalDistribution_descentDelta(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "EmpiricalDistribution_descentDelta", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__EmpiricalDistribution, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EmpiricalDistribution_descentDelta__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__EmpiricalDistribution, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_EmpiricalDistribution_descentDelta__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'EmpiricalDistribution_descentDelta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::EmpiricalDistribution::descentDelta(bool,double) const\n"
    "    ase::EmpiricalDistribution::descentDelta(bool) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_EmpiricalDistribution_cdf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EmpiricalDistribution *arg1 = (ase::EmpiricalDistribution *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "EmpiricalDistribution_cdf", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EmpiricalDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EmpiricalDistribution_cdf" "', argument " "1"" of type '" "ase::EmpiricalDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EmpiricalDistribution * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EmpiricalDistribution_cdf" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::EmpiricalDistribution const *)arg1)->cdf(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EmpiricalDistribution_exceedance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EmpiricalDistribution *arg1 = (ase::EmpiricalDistribution *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "EmpiricalDistribution_exceedance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EmpiricalDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EmpiricalDistribution_exceedance" "', argument " "1"" of type '" "ase::EmpiricalDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EmpiricalDistribution * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EmpiricalDistribution_exceedance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::EmpiricalDistribution const *)arg1)->exceedance(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EmpiricalDistribution_quantile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EmpiricalDistribution *arg1 = (ase::EmpiricalDistribution *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "EmpiricalDistribution_quantile", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EmpiricalDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EmpiricalDistribution_quantile" "', argument " "1"" of type '" "ase::EmpiricalDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EmpiricalDistribution * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EmpiricalDistribution_quantile" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::EmpiricalDistribution const *)arg1)->quantile(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EmpiricalDistribution_invExceedance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EmpiricalDistribution *arg1 = (ase::EmpiricalDistribution *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "EmpiricalDistribution_invExceedance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EmpiricalDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EmpiricalDistribution_invExceedance" "', argument " "1"" of type '" "ase::EmpiricalDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EmpiricalDistribution * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EmpiricalDistribution_invExceedance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::EmpiricalDistribution const *)arg1)->invExceedance(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EmpiricalDistribution_cumulant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EmpiricalDistribution *arg1 = (ase::EmpiricalDistribution *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "EmpiricalDistribution_cumulant", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EmpiricalDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EmpiricalDistribution_cumulant" "', argument " "1"" of type '" "ase::EmpiricalDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EmpiricalDistribution * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EmpiricalDistribution_cumulant" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (double)((ase::EmpiricalDistribution const *)arg1)->cumulant(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EmpiricalDistribution_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EmpiricalDistribution *arg1 = (ase::EmpiricalDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EmpiricalDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EmpiricalDistribution_classname" "', argument " "1"" of type '" "ase::EmpiricalDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EmpiricalDistribution * >(argp1);
  {
    try {
      result = ((ase::EmpiricalDistribution const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EmpiricalDistribution_random(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EmpiricalDistribution *arg1 = (ase::EmpiricalDistribution *) 0 ;
  ase::AbsRNG *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "EmpiricalDistribution_random", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EmpiricalDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EmpiricalDistribution_random" "', argument " "1"" of type '" "ase::EmpiricalDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EmpiricalDistribution * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsRNG,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EmpiricalDistribution_random" "', argument " "2"" of type '" "ase::AbsRNG &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EmpiricalDistribution_random" "', argument " "2"" of type '" "ase::AbsRNG &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsRNG * >(argp2);
  {
    try {
      result = (double)((ase::EmpiricalDistribution const *)arg1)->random(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EmpiricalDistribution_sampleSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EmpiricalDistribution *arg1 = (ase::EmpiricalDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned long result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EmpiricalDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EmpiricalDistribution_sampleSize" "', argument " "1"" of type '" "ase::EmpiricalDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EmpiricalDistribution * >(argp1);
  {
    try {
      result = (unsigned long)((ase::EmpiricalDistribution const *)arg1)->sampleSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EmpiricalDistribution_coordinate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EmpiricalDistribution *arg1 = (ase::EmpiricalDistribution *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "EmpiricalDistribution_coordinate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EmpiricalDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EmpiricalDistribution_coordinate" "', argument " "1"" of type '" "ase::EmpiricalDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EmpiricalDistribution * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EmpiricalDistribution_coordinate" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  {
    try {
      result = (double)((ase::EmpiricalDistribution const *)arg1)->coordinate(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EmpiricalDistribution_minCoordinate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EmpiricalDistribution *arg1 = (ase::EmpiricalDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EmpiricalDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EmpiricalDistribution_minCoordinate" "', argument " "1"" of type '" "ase::EmpiricalDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EmpiricalDistribution * >(argp1);
  {
    try {
      result = (double)((ase::EmpiricalDistribution const *)arg1)->minCoordinate();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EmpiricalDistribution_maxCoordinate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EmpiricalDistribution *arg1 = (ase::EmpiricalDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EmpiricalDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EmpiricalDistribution_maxCoordinate" "', argument " "1"" of type '" "ase::EmpiricalDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EmpiricalDistribution * >(argp1);
  {
    try {
      result = (double)((ase::EmpiricalDistribution const *)arg1)->maxCoordinate();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EmpiricalDistribution_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__EmpiricalDistribution, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *EmpiricalDistribution_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_UniformDistribution__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  ase::UniformDistribution *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UniformDistribution" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_UniformDistribution" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (ase::UniformDistribution *)new ase::UniformDistribution(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__UniformDistribution, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UniformDistribution__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::UniformDistribution *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UniformDistribution" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UniformDistribution" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::UniformDistribution *)new ase::UniformDistribution((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__UniformDistribution, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UniformDistribution(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_UniformDistribution", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UniformDistribution__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_UniformDistribution__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_UniformDistribution'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::UniformDistribution::UniformDistribution(double,double)\n"
    "    ase::UniformDistribution::UniformDistribution(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UniformDistribution_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::UniformDistribution *arg1 = (ase::UniformDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::UniformDistribution *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__UniformDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformDistribution_clone" "', argument " "1"" of type '" "ase::UniformDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::UniformDistribution * >(argp1);
  {
    try {
      result = (ase::UniformDistribution *)((ase::UniformDistribution const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__UniformDistribution, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UniformDistribution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::UniformDistribution *arg1 = (ase::UniformDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__UniformDistribution, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UniformDistribution" "', argument " "1"" of type '" "ase::UniformDistribution *""'"); 
  }
  arg1 = reinterpret_cast< ase::UniformDistribution * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformDistribution_isUnimodal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::UniformDistribution *arg1 = (ase::UniformDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__UniformDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformDistribution_isUnimodal" "', argument " "1"" of type '" "ase::UniformDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::UniformDistribution * >(argp1);
  {
    try {
      result = (bool)((ase::UniformDistribution const *)arg1)->isUnimodal();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformDistribution_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::UniformDistribution *arg1 = (ase::UniformDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__UniformDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformDistribution_classname" "', argument " "1"" of type '" "ase::UniformDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::UniformDistribution * >(argp1);
  {
    try {
      result = ((ase::UniformDistribution const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UniformDistribution_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__UniformDistribution, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *UniformDistribution_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ExponentialDistribution__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  ase::ExponentialDistribution *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ExponentialDistribution" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ExponentialDistribution" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (ase::ExponentialDistribution *)new ase::ExponentialDistribution(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ExponentialDistribution, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExponentialDistribution__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::ExponentialDistribution *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExponentialDistribution" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ExponentialDistribution" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::ExponentialDistribution *)new ase::ExponentialDistribution((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ExponentialDistribution, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExponentialDistribution(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ExponentialDistribution", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ExponentialDistribution__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ExponentialDistribution__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ExponentialDistribution'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::ExponentialDistribution::ExponentialDistribution(double,double)\n"
    "    ase::ExponentialDistribution::ExponentialDistribution(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ExponentialDistribution_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ExponentialDistribution *arg1 = (ase::ExponentialDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::ExponentialDistribution *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ExponentialDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExponentialDistribution_clone" "', argument " "1"" of type '" "ase::ExponentialDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ExponentialDistribution * >(argp1);
  {
    try {
      result = (ase::ExponentialDistribution *)((ase::ExponentialDistribution const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ExponentialDistribution, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ExponentialDistribution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ExponentialDistribution *arg1 = (ase::ExponentialDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ExponentialDistribution, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExponentialDistribution" "', argument " "1"" of type '" "ase::ExponentialDistribution *""'"); 
  }
  arg1 = reinterpret_cast< ase::ExponentialDistribution * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExponentialDistribution_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ExponentialDistribution *arg1 = (ase::ExponentialDistribution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ExponentialDistribution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExponentialDistribution_classname" "', argument " "1"" of type '" "ase::ExponentialDistribution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ExponentialDistribution * >(argp1);
  {
    try {
      result = ((ase::ExponentialDistribution const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ExponentialDistribution_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__ExponentialDistribution, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ExponentialDistribution_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_inverseGaussCdf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inverseGaussCdf" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (double)ase::inverseGaussCdf(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_owensT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "owensT", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "owensT" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "owensT" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)ase::owensT(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Gamma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Gamma" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (double)ase::Gamma(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_incompleteGamma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "incompleteGamma", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "incompleteGamma" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "incompleteGamma" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)ase::incompleteGamma(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inverseIncompleteGamma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "inverseIncompleteGamma", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inverseIncompleteGamma" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inverseIncompleteGamma" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)ase::inverseIncompleteGamma(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_incompleteGammaC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "incompleteGammaC", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "incompleteGammaC" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "incompleteGammaC" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)ase::incompleteGammaC(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inverseIncompleteGammaC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "inverseIncompleteGammaC", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inverseIncompleteGammaC" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inverseIncompleteGammaC" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)ase::inverseIncompleteGammaC(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LegendreDistro1D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  bool arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  bool val4 ;
  int ecode4 = 0 ;
  ase::LegendreDistro1D *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LegendreDistro1D" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LegendreDistro1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_LegendreDistro1D" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LegendreDistro1D" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_LegendreDistro1D" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (ase::LegendreDistro1D *)new ase::LegendreDistro1D(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LegendreDistro1D, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LegendreDistro1D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  ase::LegendreDistro1D *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LegendreDistro1D" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LegendreDistro1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_LegendreDistro1D" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LegendreDistro1D" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (ase::LegendreDistro1D *)new ase::LegendreDistro1D(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LegendreDistro1D, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LegendreDistro1D(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_LegendreDistro1D", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_LegendreDistro1D__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_LegendreDistro1D__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_LegendreDistro1D'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::LegendreDistro1D::LegendreDistro1D(double,double,std::vector< double,std::allocator< double > > const &,bool)\n"
    "    ase::LegendreDistro1D::LegendreDistro1D(double,double,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LegendreDistro1D_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LegendreDistro1D *arg1 = (ase::LegendreDistro1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::LegendreDistro1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LegendreDistro1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LegendreDistro1D_clone" "', argument " "1"" of type '" "ase::LegendreDistro1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LegendreDistro1D * >(argp1);
  {
    try {
      result = (ase::LegendreDistro1D *)((ase::LegendreDistro1D const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LegendreDistro1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LegendreDistro1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LegendreDistro1D *arg1 = (ase::LegendreDistro1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LegendreDistro1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LegendreDistro1D" "', argument " "1"" of type '" "ase::LegendreDistro1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::LegendreDistro1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LegendreDistro1D_nCoeffs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LegendreDistro1D *arg1 = (ase::LegendreDistro1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LegendreDistro1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LegendreDistro1D_nCoeffs" "', argument " "1"" of type '" "ase::LegendreDistro1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LegendreDistro1D * >(argp1);
  {
    try {
      result = (unsigned int)((ase::LegendreDistro1D const *)arg1)->nCoeffs();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LegendreDistro1D_getCoeff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LegendreDistro1D *arg1 = (ase::LegendreDistro1D *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LegendreDistro1D_getCoeff", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LegendreDistro1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LegendreDistro1D_getCoeff" "', argument " "1"" of type '" "ase::LegendreDistro1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LegendreDistro1D * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LegendreDistro1D_getCoeff" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (double)((ase::LegendreDistro1D const *)arg1)->getCoeff(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LegendreDistro1D_isNonNegative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LegendreDistro1D *arg1 = (ase::LegendreDistro1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LegendreDistro1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LegendreDistro1D_isNonNegative" "', argument " "1"" of type '" "ase::LegendreDistro1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LegendreDistro1D * >(argp1);
  {
    try {
      result = (bool)((ase::LegendreDistro1D const *)arg1)->isNonNegative();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LegendreDistro1D_isUnimodal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LegendreDistro1D *arg1 = (ase::LegendreDistro1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LegendreDistro1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LegendreDistro1D_isUnimodal" "', argument " "1"" of type '" "ase::LegendreDistro1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LegendreDistro1D * >(argp1);
  {
    try {
      result = (bool)((ase::LegendreDistro1D const *)arg1)->isUnimodal();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LegendreDistro1D_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LegendreDistro1D *arg1 = (ase::LegendreDistro1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LegendreDistro1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LegendreDistro1D_classname" "', argument " "1"" of type '" "ase::LegendreDistro1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LegendreDistro1D * >(argp1);
  {
    try {
      result = ((ase::LegendreDistro1D const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LegendreDistro1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__LegendreDistro1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LegendreDistro1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_AbsLogLikelihoodCurve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AbsLogLikelihoodCurve" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::AbsLogLikelihoodCurve *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve_clone" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  {
    try {
      result = (ase::AbsLogLikelihoodCurve *)((ase::AbsLogLikelihoodCurve const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__AbsLogLikelihoodCurve, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_parMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve_parMin" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  {
    try {
      result = (double)((ase::AbsLogLikelihoodCurve const *)arg1)->parMin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_parMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve_parMax" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  {
    try {
      result = (double)((ase::AbsLogLikelihoodCurve const *)arg1)->parMax();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_location(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve_location" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  {
    try {
      result = (double)((ase::AbsLogLikelihoodCurve const *)arg1)->location();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve_stepSize" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  {
    try {
      result = (double)((ase::AbsLogLikelihoodCurve const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_maximum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve_maximum" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  {
    try {
      result = (double)((ase::AbsLogLikelihoodCurve const *)arg1)->maximum();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_argmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve_argmax" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  {
    try {
      result = (double)((ase::AbsLogLikelihoodCurve const *)arg1)->argmax();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsLogLikelihoodCurve___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve___call__" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLogLikelihoodCurve___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsLogLikelihoodCurve const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_derivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsLogLikelihoodCurve_derivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve_derivative" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLogLikelihoodCurve_derivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsLogLikelihoodCurve const *)arg1)->derivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_secondDerivative__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve_secondDerivative" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLogLikelihoodCurve_secondDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbsLogLikelihoodCurve_secondDerivative" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::AbsLogLikelihoodCurve const *)arg1)->secondDerivative(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_secondDerivative__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve_secondDerivative" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLogLikelihoodCurve_secondDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsLogLikelihoodCurve const *)arg1)->secondDerivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_secondDerivative(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AbsLogLikelihoodCurve_secondDerivative", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AbsLogLikelihoodCurve_secondDerivative__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AbsLogLikelihoodCurve_secondDerivative__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AbsLogLikelihoodCurve_secondDerivative'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::AbsLogLikelihoodCurve::secondDerivative(double,double) const\n"
    "    ase::AbsLogLikelihoodCurve::secondDerivative(double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve_classname" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  {
    try {
      result = ((ase::AbsLogLikelihoodCurve const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::AbsLogLikelihoodCurve *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsLogLikelihoodCurve___imul__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve___imul__" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLogLikelihoodCurve___imul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (ase::AbsLogLikelihoodCurve *) &(arg1)->operator *=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__AbsLogLikelihoodCurve, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve___idiv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::AbsLogLikelihoodCurve *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsLogLikelihoodCurve___idiv__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve___idiv__" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLogLikelihoodCurve___idiv__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (ase::AbsLogLikelihoodCurve *) &(arg1)->operator /=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__AbsLogLikelihoodCurve, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_sigmaPlus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve_sigmaPlus" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLogLikelihoodCurve_sigmaPlus" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbsLogLikelihoodCurve_sigmaPlus" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::AbsLogLikelihoodCurve const *)arg1)->sigmaPlus(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_sigmaPlus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve_sigmaPlus" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLogLikelihoodCurve_sigmaPlus" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsLogLikelihoodCurve const *)arg1)->sigmaPlus(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_sigmaPlus__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve_sigmaPlus" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  {
    try {
      result = (double)((ase::AbsLogLikelihoodCurve const *)arg1)->sigmaPlus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_sigmaPlus(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AbsLogLikelihoodCurve_sigmaPlus", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AbsLogLikelihoodCurve_sigmaPlus__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AbsLogLikelihoodCurve_sigmaPlus__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AbsLogLikelihoodCurve_sigmaPlus__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AbsLogLikelihoodCurve_sigmaPlus'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::AbsLogLikelihoodCurve::sigmaPlus(double,double) const\n"
    "    ase::AbsLogLikelihoodCurve::sigmaPlus(double) const\n"
    "    ase::AbsLogLikelihoodCurve::sigmaPlus() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_sigmaMinus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve_sigmaMinus" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLogLikelihoodCurve_sigmaMinus" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbsLogLikelihoodCurve_sigmaMinus" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::AbsLogLikelihoodCurve const *)arg1)->sigmaMinus(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_sigmaMinus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve_sigmaMinus" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLogLikelihoodCurve_sigmaMinus" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsLogLikelihoodCurve const *)arg1)->sigmaMinus(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_sigmaMinus__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve_sigmaMinus" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  {
    try {
      result = (double)((ase::AbsLogLikelihoodCurve const *)arg1)->sigmaMinus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_sigmaMinus(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AbsLogLikelihoodCurve_sigmaMinus", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AbsLogLikelihoodCurve_sigmaMinus__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AbsLogLikelihoodCurve_sigmaMinus__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AbsLogLikelihoodCurve_sigmaMinus__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AbsLogLikelihoodCurve_sigmaMinus'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::AbsLogLikelihoodCurve::sigmaMinus(double,double) const\n"
    "    ase::AbsLogLikelihoodCurve::sigmaMinus(double) const\n"
    "    ase::AbsLogLikelihoodCurve::sigmaMinus() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_findLocalMaximum__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  double arg2 ;
  bool arg3 ;
  unsigned int arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve_findLocalMaximum" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLogLikelihoodCurve_findLocalMaximum" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbsLogLikelihoodCurve_findLocalMaximum" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AbsLogLikelihoodCurve_findLocalMaximum" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AbsLogLikelihoodCurve_findLocalMaximum" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = ((ase::AbsLogLikelihoodCurve const *)arg1)->findLocalMaximum(arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_findLocalMaximum__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  double arg2 ;
  bool arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve_findLocalMaximum" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLogLikelihoodCurve_findLocalMaximum" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbsLogLikelihoodCurve_findLocalMaximum" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AbsLogLikelihoodCurve_findLocalMaximum" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = ((ase::AbsLogLikelihoodCurve const *)arg1)->findLocalMaximum(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_findLocalMaximum(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AbsLogLikelihoodCurve_findLocalMaximum", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_AbsLogLikelihoodCurve_findLocalMaximum__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_AbsLogLikelihoodCurve_findLocalMaximum__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AbsLogLikelihoodCurve_findLocalMaximum'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::AbsLogLikelihoodCurve::findLocalMaximum(double,bool,unsigned int,double) const\n"
    "    ase::AbsLogLikelihoodCurve::findLocalMaximum(double,bool,unsigned int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_posteriorMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve_posteriorMean" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  {
    try {
      result = (double)((ase::AbsLogLikelihoodCurve const *)arg1)->posteriorMean();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve_posteriorVariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve_posteriorVariance" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  {
    try {
      result = (double)((ase::AbsLogLikelihoodCurve const *)arg1)->posteriorVariance();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  ase::AbsLogLikelihoodCurve *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< ase::LikelihoodCurveCopy > result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsLogLikelihoodCurve___add__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve___add__" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsLogLikelihoodCurve,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbsLogLikelihoodCurve___add__" "', argument " "2"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbsLogLikelihoodCurve___add__" "', argument " "2"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp2);
  {
    try {
      result = ase_AbsLogLikelihoodCurve___add__(arg1,(ase::AbsLogLikelihoodCurve const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::LikelihoodCurveCopy(static_cast< const ase::LikelihoodCurveCopy& >(result))), SWIGTYPE_p_ase__LikelihoodCurveCopy, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  ase::AbsLogLikelihoodCurve *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< ase::LikelihoodCurveCopy > result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsLogLikelihoodCurve___sub__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve___sub__" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsLogLikelihoodCurve,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AbsLogLikelihoodCurve___sub__" "', argument " "2"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AbsLogLikelihoodCurve___sub__" "', argument " "2"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp2);
  {
    try {
      result = ase_AbsLogLikelihoodCurve___sub__(arg1,(ase::AbsLogLikelihoodCurve const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::LikelihoodCurveCopy(static_cast< const ase::LikelihoodCurveCopy& >(result))), SWIGTYPE_p_ase__LikelihoodCurveCopy, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< ase::LikelihoodCurveCopy > result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsLogLikelihoodCurve___mul__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve___mul__" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLogLikelihoodCurve___mul__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = ase_AbsLogLikelihoodCurve___mul__(arg1,(double const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::LikelihoodCurveCopy(static_cast< const ase::LikelihoodCurveCopy& >(result))), SWIGTYPE_p_ase__LikelihoodCurveCopy, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve___rmul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< ase::LikelihoodCurveCopy > result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsLogLikelihoodCurve___rmul__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve___rmul__" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLogLikelihoodCurve___rmul__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = ase_AbsLogLikelihoodCurve___rmul__(arg1,(double const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::LikelihoodCurveCopy(static_cast< const ase::LikelihoodCurveCopy& >(result))), SWIGTYPE_p_ase__LikelihoodCurveCopy, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_AbsLogLikelihoodCurve___truediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< ase::LikelihoodCurveCopy > result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsLogLikelihoodCurve___truediv__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsLogLikelihoodCurve___truediv__" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsLogLikelihoodCurve___truediv__" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    try {
      result = ase_AbsLogLikelihoodCurve___truediv__(arg1,(double const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::LikelihoodCurveCopy(static_cast< const ase::LikelihoodCurveCopy& >(result))), SWIGTYPE_p_ase__LikelihoodCurveCopy, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *AbsLogLikelihoodCurve_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__AbsLogLikelihoodCurve, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LogLikelihoodDerivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::LogLikelihoodDerivative *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsLogLikelihoodCurve,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LogLikelihoodDerivative" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LogLikelihoodDerivative" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  {
    try {
      result = (ase::LogLikelihoodDerivative *)new ase::LogLikelihoodDerivative((ase::AbsLogLikelihoodCurve const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LogLikelihoodDerivative, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogLikelihoodDerivative___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LogLikelihoodDerivative *arg1 = (ase::LogLikelihoodDerivative *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LogLikelihoodDerivative___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LogLikelihoodDerivative, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogLikelihoodDerivative___call__" "', argument " "1"" of type '" "ase::LogLikelihoodDerivative const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LogLikelihoodDerivative * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LogLikelihoodDerivative___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::LogLikelihoodDerivative const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LogLikelihoodDerivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LogLikelihoodDerivative *arg1 = (ase::LogLikelihoodDerivative *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LogLikelihoodDerivative, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LogLikelihoodDerivative" "', argument " "1"" of type '" "ase::LogLikelihoodDerivative *""'"); 
  }
  arg1 = reinterpret_cast< ase::LogLikelihoodDerivative * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LogLikelihoodDerivative_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__LogLikelihoodDerivative, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LogLikelihoodDerivative_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LogLikelihoodSecondDerivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::LogLikelihoodSecondDerivative *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_LogLikelihoodSecondDerivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsLogLikelihoodCurve,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LogLikelihoodSecondDerivative" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LogLikelihoodSecondDerivative" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LogLikelihoodSecondDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (ase::LogLikelihoodSecondDerivative *)new ase::LogLikelihoodSecondDerivative((ase::AbsLogLikelihoodCurve const &)*arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LogLikelihoodSecondDerivative, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogLikelihoodSecondDerivative___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LogLikelihoodSecondDerivative *arg1 = (ase::LogLikelihoodSecondDerivative *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LogLikelihoodSecondDerivative___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LogLikelihoodSecondDerivative, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogLikelihoodSecondDerivative___call__" "', argument " "1"" of type '" "ase::LogLikelihoodSecondDerivative const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LogLikelihoodSecondDerivative * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LogLikelihoodSecondDerivative___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::LogLikelihoodSecondDerivative const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LogLikelihoodSecondDerivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LogLikelihoodSecondDerivative *arg1 = (ase::LogLikelihoodSecondDerivative *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LogLikelihoodSecondDerivative, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LogLikelihoodSecondDerivative" "', argument " "1"" of type '" "ase::LogLikelihoodSecondDerivative *""'"); 
  }
  arg1 = reinterpret_cast< ase::LogLikelihoodSecondDerivative * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LogLikelihoodSecondDerivative_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__LogLikelihoodSecondDerivative, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LogLikelihoodSecondDerivative_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LikelihoodCurveCopy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = (ase::AbsLogLikelihoodCurve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ase::LikelihoodCurveCopy *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LikelihoodCurveCopy" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  {
    try {
      result = (ase::LikelihoodCurveCopy *)new ase::LikelihoodCurveCopy(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LikelihoodCurveCopy, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LikelihoodCurveCopy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ase::LikelihoodCurveCopy *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsLogLikelihoodCurve,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LikelihoodCurveCopy" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LikelihoodCurveCopy" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  {
    try {
      result = (ase::LikelihoodCurveCopy *)new ase::LikelihoodCurveCopy((ase::AbsLogLikelihoodCurve const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LikelihoodCurveCopy, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LikelihoodCurveCopy__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ase::LikelihoodCurveCopy *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__LikelihoodCurveCopy,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LikelihoodCurveCopy" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LikelihoodCurveCopy" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const &""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  {
    try {
      result = (ase::LikelihoodCurveCopy *)new ase::LikelihoodCurveCopy((ase::LikelihoodCurveCopy const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LikelihoodCurveCopy, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LikelihoodCurveCopy__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ase::LikelihoodCurveCopy *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__LikelihoodCurveCopy,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LikelihoodCurveCopy" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy &&""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LikelihoodCurveCopy" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy &&""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  {
    try {
      result = (ase::LikelihoodCurveCopy *)new ase::LikelihoodCurveCopy((ase::LikelihoodCurveCopy &&)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LikelihoodCurveCopy, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LikelihoodCurveCopy(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_LikelihoodCurveCopy", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__LikelihoodCurveCopy, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LikelihoodCurveCopy__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__LikelihoodCurveCopy, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LikelihoodCurveCopy__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LikelihoodCurveCopy__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__AbsLogLikelihoodCurve, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LikelihoodCurveCopy__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_LikelihoodCurveCopy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::LikelihoodCurveCopy::LikelihoodCurveCopy(ase::AbsLogLikelihoodCurve *)\n"
    "    ase::LikelihoodCurveCopy::LikelihoodCurveCopy(ase::AbsLogLikelihoodCurve const &)\n"
    "    ase::LikelihoodCurveCopy::LikelihoodCurveCopy(ase::LikelihoodCurveCopy const &)\n"
    "    ase::LikelihoodCurveCopy::LikelihoodCurveCopy(ase::LikelihoodCurveCopy &&)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::LikelihoodCurveCopy *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_clone" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  {
    try {
      result = (ase::LikelihoodCurveCopy *)((ase::LikelihoodCurveCopy const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LikelihoodCurveCopy, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LikelihoodCurveCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LikelihoodCurveCopy" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_theCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::AbsLogLikelihoodCurve *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_theCopy" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  {
    try {
      result = (ase::AbsLogLikelihoodCurve *) &((ase::LikelihoodCurveCopy const *)arg1)->theCopy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__AbsLogLikelihoodCurve, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_parMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_parMin" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  {
    try {
      result = (double)((ase::LikelihoodCurveCopy const *)arg1)->parMin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_parMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_parMax" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  {
    try {
      result = (double)((ase::LikelihoodCurveCopy const *)arg1)->parMax();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_location(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_location" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  {
    try {
      result = (double)((ase::LikelihoodCurveCopy const *)arg1)->location();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_stepSize" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  {
    try {
      result = (double)((ase::LikelihoodCurveCopy const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_maximum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_maximum" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  {
    try {
      result = (double)((ase::LikelihoodCurveCopy const *)arg1)->maximum();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_argmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_argmax" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  {
    try {
      result = (double)((ase::LikelihoodCurveCopy const *)arg1)->argmax();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LikelihoodCurveCopy___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy___call__" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LikelihoodCurveCopy___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::LikelihoodCurveCopy const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_derivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LikelihoodCurveCopy_derivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_derivative" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LikelihoodCurveCopy_derivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::LikelihoodCurveCopy const *)arg1)->derivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_secondDerivative__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_secondDerivative" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LikelihoodCurveCopy_secondDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LikelihoodCurveCopy_secondDerivative" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::LikelihoodCurveCopy const *)arg1)->secondDerivative(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_secondDerivative__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_secondDerivative" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LikelihoodCurveCopy_secondDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::LikelihoodCurveCopy const *)arg1)->secondDerivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_secondDerivative(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LikelihoodCurveCopy_secondDerivative", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__LikelihoodCurveCopy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LikelihoodCurveCopy_secondDerivative__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__LikelihoodCurveCopy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LikelihoodCurveCopy_secondDerivative__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LikelihoodCurveCopy_secondDerivative'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::LikelihoodCurveCopy::secondDerivative(double const,double const) const\n"
    "    ase::LikelihoodCurveCopy::secondDerivative(double const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_classname" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  {
    try {
      result = ((ase::LikelihoodCurveCopy const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::AbsLogLikelihoodCurve *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "LikelihoodCurveCopy___imul__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy___imul__" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LikelihoodCurveCopy___imul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (ase::AbsLogLikelihoodCurve *) &(arg1)->operator *=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__AbsLogLikelihoodCurve, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy___idiv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::AbsLogLikelihoodCurve *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "LikelihoodCurveCopy___idiv__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy___idiv__" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LikelihoodCurveCopy___idiv__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (ase::AbsLogLikelihoodCurve *) &(arg1)->operator /=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__AbsLogLikelihoodCurve, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_sigmaPlus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_sigmaPlus" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LikelihoodCurveCopy_sigmaPlus" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LikelihoodCurveCopy_sigmaPlus" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::LikelihoodCurveCopy const *)arg1)->sigmaPlus(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_sigmaPlus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_sigmaPlus" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LikelihoodCurveCopy_sigmaPlus" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::LikelihoodCurveCopy const *)arg1)->sigmaPlus(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_sigmaPlus__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_sigmaPlus" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  {
    try {
      result = (double)((ase::LikelihoodCurveCopy const *)arg1)->sigmaPlus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_sigmaPlus(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LikelihoodCurveCopy_sigmaPlus", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__LikelihoodCurveCopy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_LikelihoodCurveCopy_sigmaPlus__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__LikelihoodCurveCopy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LikelihoodCurveCopy_sigmaPlus__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__LikelihoodCurveCopy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LikelihoodCurveCopy_sigmaPlus__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LikelihoodCurveCopy_sigmaPlus'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::LikelihoodCurveCopy::sigmaPlus(double const,double const) const\n"
    "    ase::LikelihoodCurveCopy::sigmaPlus(double const) const\n"
    "    ase::LikelihoodCurveCopy::sigmaPlus() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_sigmaMinus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_sigmaMinus" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LikelihoodCurveCopy_sigmaMinus" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LikelihoodCurveCopy_sigmaMinus" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::LikelihoodCurveCopy const *)arg1)->sigmaMinus(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_sigmaMinus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_sigmaMinus" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LikelihoodCurveCopy_sigmaMinus" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::LikelihoodCurveCopy const *)arg1)->sigmaMinus(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_sigmaMinus__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_sigmaMinus" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  {
    try {
      result = (double)((ase::LikelihoodCurveCopy const *)arg1)->sigmaMinus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_sigmaMinus(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LikelihoodCurveCopy_sigmaMinus", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__LikelihoodCurveCopy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_LikelihoodCurveCopy_sigmaMinus__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__LikelihoodCurveCopy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LikelihoodCurveCopy_sigmaMinus__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__LikelihoodCurveCopy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LikelihoodCurveCopy_sigmaMinus__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LikelihoodCurveCopy_sigmaMinus'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::LikelihoodCurveCopy::sigmaMinus(double const,double const) const\n"
    "    ase::LikelihoodCurveCopy::sigmaMinus(double const) const\n"
    "    ase::LikelihoodCurveCopy::sigmaMinus() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_findLocalMaximum__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  double arg2 ;
  bool arg3 ;
  unsigned int arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_findLocalMaximum" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LikelihoodCurveCopy_findLocalMaximum" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LikelihoodCurveCopy_findLocalMaximum" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "LikelihoodCurveCopy_findLocalMaximum" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "LikelihoodCurveCopy_findLocalMaximum" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = ((ase::LikelihoodCurveCopy const *)arg1)->findLocalMaximum(arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_findLocalMaximum__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  double arg2 ;
  bool arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_findLocalMaximum" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LikelihoodCurveCopy_findLocalMaximum" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LikelihoodCurveCopy_findLocalMaximum" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "LikelihoodCurveCopy_findLocalMaximum" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = ((ase::LikelihoodCurveCopy const *)arg1)->findLocalMaximum(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_findLocalMaximum(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LikelihoodCurveCopy_findLocalMaximum", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__LikelihoodCurveCopy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LikelihoodCurveCopy_findLocalMaximum__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__LikelihoodCurveCopy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_LikelihoodCurveCopy_findLocalMaximum__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LikelihoodCurveCopy_findLocalMaximum'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::LikelihoodCurveCopy::findLocalMaximum(double const,bool const,unsigned int const,double const) const\n"
    "    ase::LikelihoodCurveCopy::findLocalMaximum(double const,bool const,unsigned int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_posteriorMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_posteriorMean" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  {
    try {
      result = (double)((ase::LikelihoodCurveCopy const *)arg1)->posteriorMean();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodCurveCopy_posteriorVariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodCurveCopy *arg1 = (ase::LikelihoodCurveCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodCurveCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodCurveCopy_posteriorVariance" "', argument " "1"" of type '" "ase::LikelihoodCurveCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodCurveCopy * >(argp1);
  {
    try {
      result = (double)((ase::LikelihoodCurveCopy const *)arg1)->posteriorVariance();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LikelihoodCurveCopy_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__LikelihoodCurveCopy, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LikelihoodCurveCopy_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_CubicHermiteInterpolatorEG__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  ase::CubicHermiteInterpolatorEG *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (ase::CubicHermiteInterpolatorEG *)new ase::CubicHermiteInterpolatorEG(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CubicHermiteInterpolatorEG__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  ase::CubicHermiteInterpolatorEG *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (ase::CubicHermiteInterpolatorEG *)new ase::CubicHermiteInterpolatorEG(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CubicHermiteInterpolatorEG__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  unsigned int arg3 ;
  ase::AbsLogLikelihoodCurve *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  ase::CubicHermiteInterpolatorEG *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_ase__AbsLogLikelihoodCurve,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "4"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "4"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  arg4 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp4);
  {
    try {
      result = (ase::CubicHermiteInterpolatorEG *)new ase::CubicHermiteInterpolatorEG(arg1,arg2,arg3,(ase::AbsLogLikelihoodCurve const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicHermiteInterpolatorEG_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::CubicHermiteInterpolatorEG *arg1 = (ase::CubicHermiteInterpolatorEG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::CubicHermiteInterpolatorEG *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicHermiteInterpolatorEG_clone" "', argument " "1"" of type '" "ase::CubicHermiteInterpolatorEG const *""'"); 
  }
  arg1 = reinterpret_cast< ase::CubicHermiteInterpolatorEG * >(argp1);
  {
    try {
      result = (ase::CubicHermiteInterpolatorEG *)((ase::CubicHermiteInterpolatorEG const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CubicHermiteInterpolatorEG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::CubicHermiteInterpolatorEG *arg1 = (ase::CubicHermiteInterpolatorEG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CubicHermiteInterpolatorEG" "', argument " "1"" of type '" "ase::CubicHermiteInterpolatorEG *""'"); 
  }
  arg1 = reinterpret_cast< ase::CubicHermiteInterpolatorEG * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicHermiteInterpolatorEG_parMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::CubicHermiteInterpolatorEG *arg1 = (ase::CubicHermiteInterpolatorEG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicHermiteInterpolatorEG_parMin" "', argument " "1"" of type '" "ase::CubicHermiteInterpolatorEG const *""'"); 
  }
  arg1 = reinterpret_cast< ase::CubicHermiteInterpolatorEG * >(argp1);
  {
    try {
      result = (double)((ase::CubicHermiteInterpolatorEG const *)arg1)->parMin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicHermiteInterpolatorEG_parMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::CubicHermiteInterpolatorEG *arg1 = (ase::CubicHermiteInterpolatorEG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicHermiteInterpolatorEG_parMax" "', argument " "1"" of type '" "ase::CubicHermiteInterpolatorEG const *""'"); 
  }
  arg1 = reinterpret_cast< ase::CubicHermiteInterpolatorEG * >(argp1);
  {
    try {
      result = (double)((ase::CubicHermiteInterpolatorEG const *)arg1)->parMax();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicHermiteInterpolatorEG_nPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::CubicHermiteInterpolatorEG *arg1 = (ase::CubicHermiteInterpolatorEG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicHermiteInterpolatorEG_nPoints" "', argument " "1"" of type '" "ase::CubicHermiteInterpolatorEG const *""'"); 
  }
  arg1 = reinterpret_cast< ase::CubicHermiteInterpolatorEG * >(argp1);
  {
    try {
      result = (unsigned int)((ase::CubicHermiteInterpolatorEG const *)arg1)->nPoints();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicHermiteInterpolatorEG_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::CubicHermiteInterpolatorEG *arg1 = (ase::CubicHermiteInterpolatorEG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicHermiteInterpolatorEG_stepSize" "', argument " "1"" of type '" "ase::CubicHermiteInterpolatorEG const *""'"); 
  }
  arg1 = reinterpret_cast< ase::CubicHermiteInterpolatorEG * >(argp1);
  {
    try {
      result = (double)((ase::CubicHermiteInterpolatorEG const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicHermiteInterpolatorEG_getValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::CubicHermiteInterpolatorEG *arg1 = (ase::CubicHermiteInterpolatorEG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicHermiteInterpolatorEG_getValues" "', argument " "1"" of type '" "ase::CubicHermiteInterpolatorEG const *""'"); 
  }
  arg1 = reinterpret_cast< ase::CubicHermiteInterpolatorEG * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &((ase::CubicHermiteInterpolatorEG const *)arg1)->getValues();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicHermiteInterpolatorEG_getDerivatives(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::CubicHermiteInterpolatorEG *arg1 = (ase::CubicHermiteInterpolatorEG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicHermiteInterpolatorEG_getDerivatives" "', argument " "1"" of type '" "ase::CubicHermiteInterpolatorEG const *""'"); 
  }
  arg1 = reinterpret_cast< ase::CubicHermiteInterpolatorEG * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &((ase::CubicHermiteInterpolatorEG const *)arg1)->getDerivatives();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicHermiteInterpolatorEG_location(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::CubicHermiteInterpolatorEG *arg1 = (ase::CubicHermiteInterpolatorEG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicHermiteInterpolatorEG_location" "', argument " "1"" of type '" "ase::CubicHermiteInterpolatorEG const *""'"); 
  }
  arg1 = reinterpret_cast< ase::CubicHermiteInterpolatorEG * >(argp1);
  {
    try {
      result = (double)((ase::CubicHermiteInterpolatorEG const *)arg1)->location();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicHermiteInterpolatorEG_maximum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::CubicHermiteInterpolatorEG *arg1 = (ase::CubicHermiteInterpolatorEG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicHermiteInterpolatorEG_maximum" "', argument " "1"" of type '" "ase::CubicHermiteInterpolatorEG const *""'"); 
  }
  arg1 = reinterpret_cast< ase::CubicHermiteInterpolatorEG * >(argp1);
  {
    try {
      result = (double)((ase::CubicHermiteInterpolatorEG const *)arg1)->maximum();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicHermiteInterpolatorEG_argmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::CubicHermiteInterpolatorEG *arg1 = (ase::CubicHermiteInterpolatorEG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicHermiteInterpolatorEG_argmax" "', argument " "1"" of type '" "ase::CubicHermiteInterpolatorEG const *""'"); 
  }
  arg1 = reinterpret_cast< ase::CubicHermiteInterpolatorEG * >(argp1);
  {
    try {
      result = (double)((ase::CubicHermiteInterpolatorEG const *)arg1)->argmax();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicHermiteInterpolatorEG___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::CubicHermiteInterpolatorEG *arg1 = (ase::CubicHermiteInterpolatorEG *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "CubicHermiteInterpolatorEG___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicHermiteInterpolatorEG___call__" "', argument " "1"" of type '" "ase::CubicHermiteInterpolatorEG const *""'"); 
  }
  arg1 = reinterpret_cast< ase::CubicHermiteInterpolatorEG * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CubicHermiteInterpolatorEG___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::CubicHermiteInterpolatorEG const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicHermiteInterpolatorEG_derivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::CubicHermiteInterpolatorEG *arg1 = (ase::CubicHermiteInterpolatorEG *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "CubicHermiteInterpolatorEG_derivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicHermiteInterpolatorEG_derivative" "', argument " "1"" of type '" "ase::CubicHermiteInterpolatorEG const *""'"); 
  }
  arg1 = reinterpret_cast< ase::CubicHermiteInterpolatorEG * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CubicHermiteInterpolatorEG_derivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::CubicHermiteInterpolatorEG const *)arg1)->derivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicHermiteInterpolatorEG_secondDerivative__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::CubicHermiteInterpolatorEG *arg1 = (ase::CubicHermiteInterpolatorEG *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicHermiteInterpolatorEG_secondDerivative" "', argument " "1"" of type '" "ase::CubicHermiteInterpolatorEG const *""'"); 
  }
  arg1 = reinterpret_cast< ase::CubicHermiteInterpolatorEG * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CubicHermiteInterpolatorEG_secondDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CubicHermiteInterpolatorEG_secondDerivative" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::CubicHermiteInterpolatorEG const *)arg1)->secondDerivative(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicHermiteInterpolatorEG_secondDerivative__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::CubicHermiteInterpolatorEG *arg1 = (ase::CubicHermiteInterpolatorEG *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicHermiteInterpolatorEG_secondDerivative" "', argument " "1"" of type '" "ase::CubicHermiteInterpolatorEG const *""'"); 
  }
  arg1 = reinterpret_cast< ase::CubicHermiteInterpolatorEG * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CubicHermiteInterpolatorEG_secondDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::CubicHermiteInterpolatorEG const *)arg1)->secondDerivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicHermiteInterpolatorEG_secondDerivative(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "CubicHermiteInterpolatorEG_secondDerivative", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CubicHermiteInterpolatorEG_secondDerivative__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CubicHermiteInterpolatorEG_secondDerivative__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CubicHermiteInterpolatorEG_secondDerivative'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::CubicHermiteInterpolatorEG::secondDerivative(double,double) const\n"
    "    ase::CubicHermiteInterpolatorEG::secondDerivative(double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CubicHermiteInterpolatorEG_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::CubicHermiteInterpolatorEG *arg1 = (ase::CubicHermiteInterpolatorEG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicHermiteInterpolatorEG_classname" "', argument " "1"" of type '" "ase::CubicHermiteInterpolatorEG const *""'"); 
  }
  arg1 = reinterpret_cast< ase::CubicHermiteInterpolatorEG * >(argp1);
  {
    try {
      result = ((ase::CubicHermiteInterpolatorEG const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CubicHermiteInterpolatorEG___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::CubicHermiteInterpolatorEG *arg1 = (ase::CubicHermiteInterpolatorEG *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::AbsLogLikelihoodCurve *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "CubicHermiteInterpolatorEG___imul__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CubicHermiteInterpolatorEG___imul__" "', argument " "1"" of type '" "ase::CubicHermiteInterpolatorEG *""'"); 
  }
  arg1 = reinterpret_cast< ase::CubicHermiteInterpolatorEG * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CubicHermiteInterpolatorEG___imul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (ase::AbsLogLikelihoodCurve *) &(arg1)->operator *=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__AbsLogLikelihoodCurve, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CubicHermiteInterpolatorEG__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  unsigned int arg3 ;
  asepy::PyFunctor1 *arg4 = 0 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  ase::CubicHermiteInterpolatorEG *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_asepy__PyFunctor1,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "4"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "4"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  arg4 = reinterpret_cast< asepy::PyFunctor1 * >(argp4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (ase::CubicHermiteInterpolatorEG *)new ase::CubicHermiteInterpolatorEG(arg1,arg2,arg3,(asepy::PyFunctor1 const &)*arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CubicHermiteInterpolatorEG__SWIG_6(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  unsigned int arg3 ;
  asepy::PyFunctor1 *arg4 = 0 ;
  asepy::PyFunctor1 *arg5 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  ase::CubicHermiteInterpolatorEG *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_asepy__PyFunctor1,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "4"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "4"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  arg4 = reinterpret_cast< asepy::PyFunctor1 * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_asepy__PyFunctor1,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "5"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CubicHermiteInterpolatorEG" "', argument " "5"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  arg5 = reinterpret_cast< asepy::PyFunctor1 * >(argp5);
  {
    try {
      result = (ase::CubicHermiteInterpolatorEG *)new ase::CubicHermiteInterpolatorEG(arg1,arg2,arg3,(asepy::PyFunctor1 const &)*arg4,(asepy::PyFunctor1 const &)*arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CubicHermiteInterpolatorEG(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_CubicHermiteInterpolatorEG", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_CubicHermiteInterpolatorEG__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ase__AbsLogLikelihoodCurve, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_CubicHermiteInterpolatorEG__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_CubicHermiteInterpolatorEG__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_asepy__PyFunctor1, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_asepy__PyFunctor1, SWIG_POINTER_NO_NULL | 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_CubicHermiteInterpolatorEG__SWIG_6(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_asepy__PyFunctor1, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_CubicHermiteInterpolatorEG__SWIG_5(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_CubicHermiteInterpolatorEG'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::CubicHermiteInterpolatorEG::CubicHermiteInterpolatorEG(double,double,std::vector< double,std::allocator< double > > const &)\n"
    "    ase::CubicHermiteInterpolatorEG::CubicHermiteInterpolatorEG(double,double,std::vector< double,std::allocator< double > > const &,std::vector< double,std::allocator< double > > const &)\n"
    "    ase::CubicHermiteInterpolatorEG::CubicHermiteInterpolatorEG(double,double,unsigned int,ase::AbsLogLikelihoodCurve const &)\n"
    "    ase::CubicHermiteInterpolatorEG::CubicHermiteInterpolatorEG(double const,double const,unsigned int const,asepy::PyFunctor1 const &,double const)\n"
    "    ase::CubicHermiteInterpolatorEG::CubicHermiteInterpolatorEG(double const,double const,unsigned int const,asepy::PyFunctor1 const &,asepy::PyFunctor1 const &)\n");
  return 0;
}


SWIGINTERN PyObject *CubicHermiteInterpolatorEG_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__CubicHermiteInterpolatorEG, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *CubicHermiteInterpolatorEG_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_InterpolatedDensity1D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  ase::InterpolatedDensity1D *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InterpolatedDensity1D" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InterpolatedDensity1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_InterpolatedDensity1D" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InterpolatedDensity1D" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (ase::InterpolatedDensity1D *)new ase::InterpolatedDensity1D(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__InterpolatedDensity1D, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InterpolatedDensity1D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  ase::InterpolatedDensity1D *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InterpolatedDensity1D" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InterpolatedDensity1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_InterpolatedDensity1D" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InterpolatedDensity1D" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_InterpolatedDensity1D" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InterpolatedDensity1D" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (ase::InterpolatedDensity1D *)new ase::InterpolatedDensity1D(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__InterpolatedDensity1D, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolatedDensity1D_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::InterpolatedDensity1D *arg1 = (ase::InterpolatedDensity1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::InterpolatedDensity1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__InterpolatedDensity1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolatedDensity1D_clone" "', argument " "1"" of type '" "ase::InterpolatedDensity1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::InterpolatedDensity1D * >(argp1);
  {
    try {
      result = (ase::InterpolatedDensity1D *)((ase::InterpolatedDensity1D const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__InterpolatedDensity1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InterpolatedDensity1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::InterpolatedDensity1D *arg1 = (ase::InterpolatedDensity1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__InterpolatedDensity1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InterpolatedDensity1D" "', argument " "1"" of type '" "ase::InterpolatedDensity1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::InterpolatedDensity1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolatedDensity1D_isUnimodal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::InterpolatedDensity1D *arg1 = (ase::InterpolatedDensity1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__InterpolatedDensity1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolatedDensity1D_isUnimodal" "', argument " "1"" of type '" "ase::InterpolatedDensity1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::InterpolatedDensity1D * >(argp1);
  {
    try {
      result = (bool)((ase::InterpolatedDensity1D const *)arg1)->isUnimodal();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolatedDensity1D_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::InterpolatedDensity1D *arg1 = (ase::InterpolatedDensity1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__InterpolatedDensity1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolatedDensity1D_classname" "', argument " "1"" of type '" "ase::InterpolatedDensity1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::InterpolatedDensity1D * >(argp1);
  {
    try {
      result = ((ase::InterpolatedDensity1D const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolatedDensity1D_entropy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::InterpolatedDensity1D *arg1 = (ase::InterpolatedDensity1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__InterpolatedDensity1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolatedDensity1D_entropy" "', argument " "1"" of type '" "ase::InterpolatedDensity1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::InterpolatedDensity1D * >(argp1);
  {
    try {
      result = (double)((ase::InterpolatedDensity1D const *)arg1)->entropy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolatedDensity1D_nCoords(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::InterpolatedDensity1D *arg1 = (ase::InterpolatedDensity1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__InterpolatedDensity1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolatedDensity1D_nCoords" "', argument " "1"" of type '" "ase::InterpolatedDensity1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::InterpolatedDensity1D * >(argp1);
  {
    try {
      result = (unsigned int)((ase::InterpolatedDensity1D const *)arg1)->nCoords();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InterpolatedDensity1D__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  unsigned int arg3 ;
  asepy::PyFunctor1 *arg4 = 0 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  ase::InterpolatedDensity1D *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InterpolatedDensity1D" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InterpolatedDensity1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_InterpolatedDensity1D" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_asepy__PyFunctor1,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_InterpolatedDensity1D" "', argument " "4"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InterpolatedDensity1D" "', argument " "4"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  arg4 = reinterpret_cast< asepy::PyFunctor1 * >(argp4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_InterpolatedDensity1D" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (ase::InterpolatedDensity1D *)new ase::InterpolatedDensity1D(arg1,arg2,arg3,(asepy::PyFunctor1 const &)*arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__InterpolatedDensity1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InterpolatedDensity1D__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  unsigned int arg3 ;
  asepy::PyFunctor1 *arg4 = 0 ;
  asepy::PyFunctor1 *arg5 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  ase::InterpolatedDensity1D *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InterpolatedDensity1D" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InterpolatedDensity1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_InterpolatedDensity1D" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_asepy__PyFunctor1,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_InterpolatedDensity1D" "', argument " "4"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InterpolatedDensity1D" "', argument " "4"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  arg4 = reinterpret_cast< asepy::PyFunctor1 * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_asepy__PyFunctor1,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_InterpolatedDensity1D" "', argument " "5"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InterpolatedDensity1D" "', argument " "5"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  arg5 = reinterpret_cast< asepy::PyFunctor1 * >(argp5);
  {
    try {
      result = (ase::InterpolatedDensity1D *)new ase::InterpolatedDensity1D(arg1,arg2,arg3,(asepy::PyFunctor1 const &)*arg4,(asepy::PyFunctor1 const &)*arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__InterpolatedDensity1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InterpolatedDensity1D__SWIG_6(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  unsigned int arg3 ;
  ase::NumericalConvolution *arg4 = 0 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  ase::InterpolatedDensity1D *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InterpolatedDensity1D" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InterpolatedDensity1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_InterpolatedDensity1D" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_ase__NumericalConvolution,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_InterpolatedDensity1D" "', argument " "4"" of type '" "ase::NumericalConvolution const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InterpolatedDensity1D" "', argument " "4"" of type '" "ase::NumericalConvolution const &""'"); 
  }
  arg4 = reinterpret_cast< ase::NumericalConvolution * >(argp4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_InterpolatedDensity1D" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (ase::InterpolatedDensity1D *)new ase::InterpolatedDensity1D(arg1,arg2,arg3,(ase::NumericalConvolution const &)*arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__InterpolatedDensity1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InterpolatedDensity1D__SWIG_7(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  unsigned int arg3 ;
  ase::GaussianConvolution *arg4 = 0 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  ase::InterpolatedDensity1D *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InterpolatedDensity1D" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InterpolatedDensity1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_InterpolatedDensity1D" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_ase__GaussianConvolution,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_InterpolatedDensity1D" "', argument " "4"" of type '" "ase::GaussianConvolution const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InterpolatedDensity1D" "', argument " "4"" of type '" "ase::GaussianConvolution const &""'"); 
  }
  arg4 = reinterpret_cast< ase::GaussianConvolution * >(argp4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_InterpolatedDensity1D" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (ase::InterpolatedDensity1D *)new ase::InterpolatedDensity1D(arg1,arg2,arg3,(ase::GaussianConvolution const &)*arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__InterpolatedDensity1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InterpolatedDensity1D__SWIG_8(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  unsigned int arg3 ;
  ase::DensityFunctor1D *arg4 = 0 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  ase::InterpolatedDensity1D *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_InterpolatedDensity1D" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_InterpolatedDensity1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_InterpolatedDensity1D" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_ase__DensityFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_InterpolatedDensity1D" "', argument " "4"" of type '" "ase::DensityFunctor1D const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InterpolatedDensity1D" "', argument " "4"" of type '" "ase::DensityFunctor1D const &""'"); 
  }
  arg4 = reinterpret_cast< ase::DensityFunctor1D * >(argp4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_InterpolatedDensity1D" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (ase::InterpolatedDensity1D *)new ase::InterpolatedDensity1D(arg1,arg2,arg3,(ase::DensityFunctor1D const &)*arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__InterpolatedDensity1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InterpolatedDensity1D(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_InterpolatedDensity1D", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_InterpolatedDensity1D__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_InterpolatedDensity1D__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_asepy__PyFunctor1, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_asepy__PyFunctor1, SWIG_POINTER_NO_NULL | 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_InterpolatedDensity1D__SWIG_5(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_asepy__PyFunctor1, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_InterpolatedDensity1D__SWIG_4(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ase__NumericalConvolution, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_InterpolatedDensity1D__SWIG_6(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ase__GaussianConvolution, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_InterpolatedDensity1D__SWIG_7(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ase__DensityFunctor1D, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_InterpolatedDensity1D__SWIG_8(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_InterpolatedDensity1D'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::InterpolatedDensity1D::InterpolatedDensity1D(double,double,std::vector< double,std::allocator< double > > const &)\n"
    "    ase::InterpolatedDensity1D::InterpolatedDensity1D(double,double,std::vector< double,std::allocator< double > > const &,std::vector< double,std::allocator< double > > const &)\n"
    "    ase::InterpolatedDensity1D::InterpolatedDensity1D(double const,double const,unsigned int const,asepy::PyFunctor1 const &,double const)\n"
    "    ase::InterpolatedDensity1D::InterpolatedDensity1D(double const,double const,unsigned int const,asepy::PyFunctor1 const &,asepy::PyFunctor1 const &)\n"
    "    ase::InterpolatedDensity1D::InterpolatedDensity1D(double const,double const,unsigned int const,ase::NumericalConvolution const &,double const)\n"
    "    ase::InterpolatedDensity1D::InterpolatedDensity1D(double const,double const,unsigned int const,ase::GaussianConvolution const &,double const)\n"
    "    ase::InterpolatedDensity1D::InterpolatedDensity1D(double const,double const,unsigned int const,ase::DensityFunctor1D const &,double const)\n");
  return 0;
}


SWIGINTERN PyObject *InterpolatedDensity1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__InterpolatedDensity1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *InterpolatedDensity1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_TransitionCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  ase::TransitionCubic< double > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_TransitionCubic", 5, 5, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TransitionCubic" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TransitionCubic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TransitionCubic" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TransitionCubic" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_TransitionCubic" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (ase::TransitionCubic< double > *)new ase::TransitionCubic< double >(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__TransitionCubicT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransitionCubic_x0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TransitionCubic< double > *arg1 = (ase::TransitionCubic< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TransitionCubicT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransitionCubic_x0" "', argument " "1"" of type '" "ase::TransitionCubic< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TransitionCubic< double > * >(argp1);
  {
    try {
      result = (double)((ase::TransitionCubic< double > const *)arg1)->x0();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransitionCubic_h(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TransitionCubic< double > *arg1 = (ase::TransitionCubic< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TransitionCubicT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransitionCubic_h" "', argument " "1"" of type '" "ase::TransitionCubic< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TransitionCubic< double > * >(argp1);
  {
    try {
      result = (double)((ase::TransitionCubic< double > const *)arg1)->h();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransitionCubic___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TransitionCubic< double > *arg1 = (ase::TransitionCubic< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "TransitionCubic___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TransitionCubicT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransitionCubic___call__" "', argument " "1"" of type '" "ase::TransitionCubic< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TransitionCubic< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransitionCubic___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::TransitionCubic< double > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransitionCubic_derivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TransitionCubic< double > *arg1 = (ase::TransitionCubic< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "TransitionCubic_derivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TransitionCubicT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransitionCubic_derivative" "', argument " "1"" of type '" "ase::TransitionCubic< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TransitionCubic< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransitionCubic_derivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::TransitionCubic< double > const *)arg1)->derivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransitionCubic_secondDerivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TransitionCubic< double > *arg1 = (ase::TransitionCubic< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "TransitionCubic_secondDerivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TransitionCubicT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransitionCubic_secondDerivative" "', argument " "1"" of type '" "ase::TransitionCubic< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TransitionCubic< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransitionCubic_secondDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::TransitionCubic< double > const *)arg1)->secondDerivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransitionCubic_hasExtremum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TransitionCubic< double > *arg1 = (ase::TransitionCubic< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TransitionCubicT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransitionCubic_hasExtremum" "', argument " "1"" of type '" "ase::TransitionCubic< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TransitionCubic< double > * >(argp1);
  {
    try {
      result = (bool)((ase::TransitionCubic< double > const *)arg1)->hasExtremum();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransitionCubic_extremum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TransitionCubic< double > *arg1 = (ase::TransitionCubic< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::pair< double,double > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TransitionCubicT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransitionCubic_extremum" "', argument " "1"" of type '" "ase::TransitionCubic< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TransitionCubic< double > * >(argp1);
  {
    try {
      result = ((ase::TransitionCubic< double > const *)arg1)->extremum();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TransitionCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TransitionCubic< double > *arg1 = (ase::TransitionCubic< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TransitionCubicT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TransitionCubic" "', argument " "1"" of type '" "ase::TransitionCubic< double > *""'"); 
  }
  arg1 = reinterpret_cast< ase::TransitionCubic< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TransitionCubic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__TransitionCubicT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TransitionCubic_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_DoubleCubicInner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  ase::DoubleCubicInner *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_DoubleCubicInner", 5, 5, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleCubicInner" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DoubleCubicInner" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DoubleCubicInner" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DoubleCubicInner" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_DoubleCubicInner" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (ase::DoubleCubicInner *)new ase::DoubleCubicInner(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DoubleCubicInner, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleCubicInner___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleCubicInner *arg1 = (ase::DoubleCubicInner *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DoubleCubicInner___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DoubleCubicInner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleCubicInner___call__" "', argument " "1"" of type '" "ase::DoubleCubicInner const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleCubicInner * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleCubicInner___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::DoubleCubicInner const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleCubicInner_derivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleCubicInner *arg1 = (ase::DoubleCubicInner *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DoubleCubicInner_derivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DoubleCubicInner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleCubicInner_derivative" "', argument " "1"" of type '" "ase::DoubleCubicInner const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleCubicInner * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleCubicInner_derivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::DoubleCubicInner const *)arg1)->derivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleCubicInner_secondDerivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleCubicInner *arg1 = (ase::DoubleCubicInner *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DoubleCubicInner_secondDerivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DoubleCubicInner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleCubicInner_secondDerivative" "', argument " "1"" of type '" "ase::DoubleCubicInner const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleCubicInner * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleCubicInner_secondDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::DoubleCubicInner const *)arg1)->secondDerivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DoubleCubicInner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleCubicInner *arg1 = (ase::DoubleCubicInner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DoubleCubicInner, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleCubicInner" "', argument " "1"" of type '" "ase::DoubleCubicInner *""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleCubicInner * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DoubleCubicInner_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__DoubleCubicInner, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DoubleCubicInner_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Poly1D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  ase::Poly1D *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (ase::Poly1D *)new ase::Poly1D();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Poly1D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  ase::Poly1D *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Poly1D" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Poly1D" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (ase::Poly1D *)new ase::Poly1D((double const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Poly1D__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  long double *arg1 = (long double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  ase::Poly1D *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_long_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Poly1D" "', argument " "1"" of type '" "long double const *""'"); 
  }
  arg1 = reinterpret_cast< long double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Poly1D" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (ase::Poly1D *)new ase::Poly1D((long double const *)arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Poly1D__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::Poly1D *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Poly1D" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Poly1D" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::Poly1D *)new ase::Poly1D((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Poly1D__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long double,std::allocator< long double > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ase::Poly1D *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_long_double_std__allocatorT_long_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Poly1D" "', argument " "1"" of type '" "std::vector< long double,std::allocator< long double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Poly1D" "', argument " "1"" of type '" "std::vector< long double,std::allocator< long double > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long double,std::allocator< long double > > * >(argp1);
  {
    try {
      result = (ase::Poly1D *)new ase::Poly1D((std::vector< long double,std::allocator< long double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Poly1D__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  long double arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  ase::Poly1D *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Poly1D" "', argument " "1"" of type '" "long double const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Poly1D" "', argument " "1"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (ase::Poly1D *)new ase::Poly1D(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Poly1D__SWIG_6(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  long double arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ase::Poly1D *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Poly1D" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Poly1D" "', argument " "2"" of type '" "long double""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Poly1D" "', argument " "2"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (ase::Poly1D *)new ase::Poly1D(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Poly1D(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Poly1D", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Poly1D__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_long_double_std__allocatorT_long_double_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Poly1D__SWIG_4(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Poly1D__SWIG_5(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Poly1D__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_long_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Poly1D__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Poly1D__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_long_double, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Poly1D__SWIG_6(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Poly1D'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::Poly1D::Poly1D()\n"
    "    ase::Poly1D::Poly1D(double const *,unsigned int)\n"
    "    ase::Poly1D::Poly1D(long double const *,unsigned int)\n"
    "    ase::Poly1D::Poly1D(std::vector< double,std::allocator< double > > const &)\n"
    "    ase::Poly1D::Poly1D(std::vector< long double,std::allocator< long double > > const &)\n"
    "    ase::Poly1D::Poly1D(long double const)\n"
    "    ase::Poly1D::Poly1D(unsigned int,long double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Poly1D_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1D_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D_reserve" "', argument " "1"" of type '" "ase::Poly1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Poly1D_reserve" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poly1D_truncate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1D_truncate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D_truncate" "', argument " "1"" of type '" "ase::Poly1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Poly1D_truncate" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      (arg1)->truncate(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poly1D_truncateLeadingZeros(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D_truncateLeadingZeros" "', argument " "1"" of type '" "ase::Poly1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  {
    try {
      (arg1)->truncateLeadingZeros();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poly1D_setCoefficient(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  unsigned int arg2 ;
  long double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1D_setCoefficient", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D_setCoefficient" "', argument " "1"" of type '" "ase::Poly1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Poly1D_setCoefficient" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Poly1D_setCoefficient" "', argument " "3"" of type '" "long double""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D_setCoefficient" "', argument " "3"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (arg1)->setCoefficient(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poly1D_deg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D_deg" "', argument " "1"" of type '" "ase::Poly1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  {
    try {
      result = (unsigned int)((ase::Poly1D const *)arg1)->deg();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poly1D_allCoefficients(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long double,std::allocator< long double > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D_allCoefficients" "', argument " "1"" of type '" "ase::Poly1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  {
    try {
      result = (std::vector< long double,std::allocator< long double > > *) &((ase::Poly1D const *)arg1)->allCoefficients();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_double_std__allocatorT_long_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poly1D_leadingCoefficient(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D_leadingCoefficient" "', argument " "1"" of type '" "ase::Poly1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  {
    try {
      result = (long double)((ase::Poly1D const *)arg1)->leadingCoefficient();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poly1D_nRoots(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  long double arg2 ;
  long double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  unsigned int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1D_nRoots", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D_nRoots" "', argument " "1"" of type '" "ase::Poly1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Poly1D_nRoots" "', argument " "2"" of type '" "long double""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D_nRoots" "', argument " "2"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Poly1D_nRoots" "', argument " "3"" of type '" "long double""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D_nRoots" "', argument " "3"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (unsigned int)((ase::Poly1D const *)arg1)->nRoots(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poly1D_findRoots(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  long double arg2 ;
  long double arg3 ;
  long double *arg4 = (long double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  unsigned int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1D_findRoots", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D_findRoots" "', argument " "1"" of type '" "ase::Poly1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Poly1D_findRoots" "', argument " "2"" of type '" "long double""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D_findRoots" "', argument " "2"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Poly1D_findRoots" "', argument " "3"" of type '" "long double""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D_findRoots" "', argument " "3"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_long_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Poly1D_findRoots" "', argument " "4"" of type '" "long double *""'"); 
  }
  arg4 = reinterpret_cast< long double * >(argp4);
  {
    try {
      result = (unsigned int)((ase::Poly1D const *)arg1)->findRoots(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poly1D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  long double result;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1D___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D___call__" "', argument " "1"" of type '" "ase::Poly1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Poly1D___call__" "', argument " "2"" of type '" "long double""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D___call__" "', argument " "2"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (long double)((ase::Poly1D const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poly1D_valueAndDerivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  long double arg2 ;
  long double *arg3 = (long double *) 0 ;
  long double *arg4 = (long double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1D_valueAndDerivative", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D_valueAndDerivative" "', argument " "1"" of type '" "ase::Poly1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Poly1D_valueAndDerivative" "', argument " "2"" of type '" "long double""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D_valueAndDerivative" "', argument " "2"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_long_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Poly1D_valueAndDerivative" "', argument " "3"" of type '" "long double *""'"); 
  }
  arg3 = reinterpret_cast< long double * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_long_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Poly1D_valueAndDerivative" "', argument " "4"" of type '" "long double *""'"); 
  }
  arg4 = reinterpret_cast< long double * >(argp4);
  {
    try {
      ((ase::Poly1D const *)arg1)->valueAndDerivative(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poly1D_isClose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  ase::Poly1D *arg2 = 0 ;
  long double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1D_isClose", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D_isClose" "', argument " "1"" of type '" "ase::Poly1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__Poly1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Poly1D_isClose" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D_isClose" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::Poly1D * >(argp2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Poly1D_isClose" "', argument " "3"" of type '" "long double""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D_isClose" "', argument " "3"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (bool)((ase::Poly1D const *)arg1)->isClose((ase::Poly1D const &)*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poly1D_isNull(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D_isNull" "', argument " "1"" of type '" "ase::Poly1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  {
    try {
      result = (bool)((ase::Poly1D const *)arg1)->isNull();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poly1D_derivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::Poly1D result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D_derivative" "', argument " "1"" of type '" "ase::Poly1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  {
    try {
      result = ((ase::Poly1D const *)arg1)->derivative();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::Poly1D(static_cast< const ase::Poly1D& >(result))), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poly1D_integral(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::Poly1D result;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1D_integral", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D_integral" "', argument " "1"" of type '" "ase::Poly1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Poly1D_integral" "', argument " "2"" of type '" "long double""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D_integral" "', argument " "2"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = ((ase::Poly1D const *)arg1)->integral(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::Poly1D(static_cast< const ase::Poly1D& >(result))), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poly1D___pos__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::Poly1D result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D___pos__" "', argument " "1"" of type '" "ase::Poly1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  {
    try {
      result = ((ase::Poly1D const *)arg1)->operator +();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::Poly1D(static_cast< const ase::Poly1D& >(result))), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Poly1D___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::Poly1D result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D___neg__" "', argument " "1"" of type '" "ase::Poly1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  {
    try {
      result = ((ase::Poly1D const *)arg1)->operator -();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::Poly1D(static_cast< const ase::Poly1D& >(result))), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Poly1D___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  ase::Poly1D *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::Poly1D result;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1D___mul__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D___mul__" "', argument " "1"" of type '" "ase::Poly1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__Poly1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Poly1D___mul__" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D___mul__" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::Poly1D * >(argp2);
  {
    try {
      result = ((ase::Poly1D const *)arg1)->operator *((ase::Poly1D const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::Poly1D(static_cast< const ase::Poly1D& >(result))), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Poly1D___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  ase::Poly1D *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::Poly1D result;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1D___add__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D___add__" "', argument " "1"" of type '" "ase::Poly1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__Poly1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Poly1D___add__" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D___add__" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::Poly1D * >(argp2);
  {
    try {
      result = ((ase::Poly1D const *)arg1)->operator +((ase::Poly1D const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::Poly1D(static_cast< const ase::Poly1D& >(result))), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Poly1D___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  ase::Poly1D *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::Poly1D result;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1D___sub__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D___sub__" "', argument " "1"" of type '" "ase::Poly1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__Poly1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Poly1D___sub__" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D___sub__" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::Poly1D * >(argp2);
  {
    try {
      result = ((ase::Poly1D const *)arg1)->operator -((ase::Poly1D const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::Poly1D(static_cast< const ase::Poly1D& >(result))), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Poly1D___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  ase::Poly1D *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::Poly1D *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1D___imul__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D___imul__" "', argument " "1"" of type '" "ase::Poly1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__Poly1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Poly1D___imul__" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D___imul__" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::Poly1D * >(argp2);
  {
    try {
      result = (ase::Poly1D *) &(arg1)->operator *=((ase::Poly1D const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poly1D___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  ase::Poly1D *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::Poly1D *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1D___iadd__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D___iadd__" "', argument " "1"" of type '" "ase::Poly1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__Poly1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Poly1D___iadd__" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D___iadd__" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::Poly1D * >(argp2);
  {
    try {
      result = (ase::Poly1D *) &(arg1)->operator +=((ase::Poly1D const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poly1D___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  ase::Poly1D *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::Poly1D *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1D___isub__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D___isub__" "', argument " "1"" of type '" "ase::Poly1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__Poly1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Poly1D___isub__" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D___isub__" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::Poly1D * >(argp2);
  {
    try {
      result = (ase::Poly1D *) &(arg1)->operator -=((ase::Poly1D const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poly1D___truediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  ase::Poly1D *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::Poly1D result;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1D___truediv__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D___truediv__" "', argument " "1"" of type '" "ase::Poly1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__Poly1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Poly1D___truediv__" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D___truediv__" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::Poly1D * >(argp2);
  {
    try {
      result = ((ase::Poly1D const *)arg1)->operator /((ase::Poly1D const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::Poly1D(static_cast< const ase::Poly1D& >(result))), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Poly1D___mod__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  ase::Poly1D *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::Poly1D result;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1D___mod__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D___mod__" "', argument " "1"" of type '" "ase::Poly1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__Poly1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Poly1D___mod__" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D___mod__" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::Poly1D * >(argp2);
  {
    try {
      result = ((ase::Poly1D const *)arg1)->operator %((ase::Poly1D const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::Poly1D(static_cast< const ase::Poly1D& >(result))), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Poly1D___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  ase::Poly1D *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1D___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D___eq__" "', argument " "1"" of type '" "ase::Poly1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__Poly1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Poly1D___eq__" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D___eq__" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::Poly1D * >(argp2);
  {
    try {
      result = (bool)((ase::Poly1D const *)arg1)->operator ==((ase::Poly1D const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Poly1D___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  ase::Poly1D *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1D___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D___ne__" "', argument " "1"" of type '" "ase::Poly1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__Poly1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Poly1D___ne__" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D___ne__" "', argument " "2"" of type '" "ase::Poly1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::Poly1D * >(argp2);
  {
    try {
      result = (bool)((ase::Poly1D const *)arg1)->operator !=((ase::Poly1D const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Poly1D_monicDeg0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D result;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1D_monicDeg0", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::Poly1D::monicDeg0();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::Poly1D(static_cast< const ase::Poly1D& >(result))), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poly1D_monicDeg1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long double arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::Poly1D result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D_monicDeg1" "', argument " "1"" of type '" "long double""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D_monicDeg1" "', argument " "1"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = ase::Poly1D::monicDeg1(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::Poly1D(static_cast< const ase::Poly1D& >(result))), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poly1D_monicDeg2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long double arg1 ;
  long double arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::Poly1D result;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1D_monicDeg2", 2, 2, swig_obj)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1D_monicDeg2" "', argument " "1"" of type '" "long double""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D_monicDeg2" "', argument " "1"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Poly1D_monicDeg2" "', argument " "2"" of type '" "long double""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1D_monicDeg2" "', argument " "2"" of type '" "long double""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = ase::Poly1D::monicDeg2(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::Poly1D(static_cast< const ase::Poly1D& >(result))), SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Poly1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = (ase::Poly1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Poly1D" "', argument " "1"" of type '" "ase::Poly1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Poly1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__Poly1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Poly1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Poly1DShifted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1D *arg1 = 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::Poly1DShifted *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_Poly1DShifted", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__Poly1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Poly1DShifted" "', argument " "1"" of type '" "ase::Poly1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Poly1DShifted" "', argument " "1"" of type '" "ase::Poly1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1D * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Poly1DShifted" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Poly1DShifted" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (ase::Poly1DShifted *)new ase::Poly1DShifted((ase::Poly1D const &)*arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__Poly1DShifted, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poly1DShifted___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1DShifted *arg1 = (ase::Poly1DShifted *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  long double result;
  
  if (!SWIG_Python_UnpackTuple(args, "Poly1DShifted___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1DShifted, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poly1DShifted___call__" "', argument " "1"" of type '" "ase::Poly1DShifted const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1DShifted * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Poly1DShifted___call__" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Poly1DShifted___call__" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (long double)((ase::Poly1DShifted const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Poly1DShifted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Poly1DShifted *arg1 = (ase::Poly1DShifted *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Poly1DShifted, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Poly1DShifted" "', argument " "1"" of type '" "ase::Poly1DShifted *""'"); 
  }
  arg1 = reinterpret_cast< ase::Poly1DShifted * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Poly1DShifted_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__Poly1DShifted, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Poly1DShifted_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_QuinticInner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  ase::QuinticInner *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_QuinticInner", 4, 4, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_QuinticInner" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_QuinticInner" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_QuinticInner" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_QuinticInner" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::QuinticInner *)new ase::QuinticInner(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__QuinticInner, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuinticInner___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::QuinticInner *arg1 = (ase::QuinticInner *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "QuinticInner___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__QuinticInner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuinticInner___call__" "', argument " "1"" of type '" "ase::QuinticInner const *""'"); 
  }
  arg1 = reinterpret_cast< ase::QuinticInner * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QuinticInner___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::QuinticInner const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuinticInner_derivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::QuinticInner *arg1 = (ase::QuinticInner *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "QuinticInner_derivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__QuinticInner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuinticInner_derivative" "', argument " "1"" of type '" "ase::QuinticInner const *""'"); 
  }
  arg1 = reinterpret_cast< ase::QuinticInner * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QuinticInner_derivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::QuinticInner const *)arg1)->derivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuinticInner_secondDerivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::QuinticInner *arg1 = (ase::QuinticInner *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "QuinticInner_secondDerivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__QuinticInner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuinticInner_secondDerivative" "', argument " "1"" of type '" "ase::QuinticInner const *""'"); 
  }
  arg1 = reinterpret_cast< ase::QuinticInner * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QuinticInner_secondDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::QuinticInner const *)arg1)->secondDerivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuinticInner_derivPoly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::QuinticInner *arg1 = (ase::QuinticInner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::Poly1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__QuinticInner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuinticInner_derivPoly" "', argument " "1"" of type '" "ase::QuinticInner const *""'"); 
  }
  arg1 = reinterpret_cast< ase::QuinticInner * >(argp1);
  {
    try {
      result = (ase::Poly1D *) &((ase::QuinticInner const *)arg1)->derivPoly();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__Poly1D, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_QuinticInner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::QuinticInner *arg1 = (ase::QuinticInner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__QuinticInner, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_QuinticInner" "', argument " "1"" of type '" "ase::QuinticInner *""'"); 
  }
  arg1 = reinterpret_cast< ase::QuinticInner * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *QuinticInner_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__QuinticInner, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *QuinticInner_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_DerivativeFunctorHelper_TransitionCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TransitionCubic< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__TransitionCubicT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DerivativeFunctorHelper_TransitionCubic" "', argument " "1"" of type '" "ase::TransitionCubic< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DerivativeFunctorHelper_TransitionCubic" "', argument " "1"" of type '" "ase::TransitionCubic< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::TransitionCubic< double > * >(argp1);
  {
    try {
      result = (ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > *)new ase::DerivativeFunctorHelper< ase::TransitionCubic< double > >((ase::TransitionCubic< double > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DerivativeFunctorHelper_TransitionCubic___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > *arg1 = (ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DerivativeFunctorHelper_TransitionCubic___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DerivativeFunctorHelper_TransitionCubic___call__" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DerivativeFunctorHelper_TransitionCubic___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DerivativeFunctorHelper_TransitionCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > *arg1 = (ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DerivativeFunctorHelper_TransitionCubic" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > *""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DerivativeFunctorHelper_TransitionCubic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DerivativeFunctorHelper_TransitionCubic_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_DerivativeFunctor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::TransitionCubic< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__TransitionCubicT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DerivativeFunctor" "', argument " "1"" of type '" "ase::TransitionCubic< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DerivativeFunctor" "', argument " "1"" of type '" "ase::TransitionCubic< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::TransitionCubic< double > * >(argp1);
  {
    try {
      result = ase::SWIGTEMPLATEDISAMBIGUATOR DerivativeFunctor< ase::TransitionCubic< double > >((ase::TransitionCubic< double > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::DerivativeFunctorHelper< ase::TransitionCubic< double > >(static_cast< const ase::DerivativeFunctorHelper< ase::TransitionCubic< double > >& >(result))), SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SecondDerivativeFunctorHelper_TransitionCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TransitionCubic< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__TransitionCubicT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SecondDerivativeFunctorHelper_TransitionCubic" "', argument " "1"" of type '" "ase::TransitionCubic< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SecondDerivativeFunctorHelper_TransitionCubic" "', argument " "1"" of type '" "ase::TransitionCubic< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::TransitionCubic< double > * >(argp1);
  {
    try {
      result = (ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > *)new ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > >((ase::TransitionCubic< double > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SecondDerivativeFunctorHelper_TransitionCubic___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > *arg1 = (ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "SecondDerivativeFunctorHelper_TransitionCubic___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecondDerivativeFunctorHelper_TransitionCubic___call__" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SecondDerivativeFunctorHelper_TransitionCubic___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SecondDerivativeFunctorHelper_TransitionCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > *arg1 = (ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SecondDerivativeFunctorHelper_TransitionCubic" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SecondDerivativeFunctorHelper_TransitionCubic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SecondDerivativeFunctorHelper_TransitionCubic_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SecondDerivativeFunctor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::TransitionCubic< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__TransitionCubicT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecondDerivativeFunctor" "', argument " "1"" of type '" "ase::TransitionCubic< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SecondDerivativeFunctor" "', argument " "1"" of type '" "ase::TransitionCubic< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::TransitionCubic< double > * >(argp1);
  {
    try {
      result = ase::SWIGTEMPLATEDISAMBIGUATOR SecondDerivativeFunctor< ase::TransitionCubic< double > >((ase::TransitionCubic< double > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > >(static_cast< const ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > >& >(result))), SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DerivativeFunctorHelper_ParabolicRailwayCurve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DerivativeFunctorHelper_ParabolicRailwayCurve" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DerivativeFunctorHelper_ParabolicRailwayCurve" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< double > * >(argp1);
  {
    try {
      result = (ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > *)new ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > >((ase::ParabolicRailwayCurve< double > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DerivativeFunctorHelper_ParabolicRailwayCurve___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > *arg1 = (ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DerivativeFunctorHelper_ParabolicRailwayCurve___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DerivativeFunctorHelper_ParabolicRailwayCurve___call__" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DerivativeFunctorHelper_ParabolicRailwayCurve___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DerivativeFunctorHelper_ParabolicRailwayCurve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > *arg1 = (ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DerivativeFunctorHelper_ParabolicRailwayCurve" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > *""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DerivativeFunctorHelper_ParabolicRailwayCurve_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DerivativeFunctorHelper_ParabolicRailwayCurve_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_DerivativeFunctor__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DerivativeFunctor" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DerivativeFunctor" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< double > * >(argp1);
  {
    try {
      result = ase::SWIGTEMPLATEDISAMBIGUATOR DerivativeFunctor< ase::ParabolicRailwayCurve< double > >((ase::ParabolicRailwayCurve< double > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > >(static_cast< const ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > >& >(result))), SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SecondDerivativeFunctorHelper_ParabolicRailwayCurve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SecondDerivativeFunctorHelper_ParabolicRailwayCurve" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SecondDerivativeFunctorHelper_ParabolicRailwayCurve" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< double > * >(argp1);
  {
    try {
      result = (ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > *)new ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > >((ase::ParabolicRailwayCurve< double > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SecondDerivativeFunctorHelper_ParabolicRailwayCurve___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > *arg1 = (ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "SecondDerivativeFunctorHelper_ParabolicRailwayCurve___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecondDerivativeFunctorHelper_ParabolicRailwayCurve___call__" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SecondDerivativeFunctorHelper_ParabolicRailwayCurve___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SecondDerivativeFunctorHelper_ParabolicRailwayCurve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > *arg1 = (ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SecondDerivativeFunctorHelper_ParabolicRailwayCurve" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SecondDerivativeFunctorHelper_ParabolicRailwayCurve_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SecondDerivativeFunctorHelper_ParabolicRailwayCurve_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SecondDerivativeFunctor__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecondDerivativeFunctor" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SecondDerivativeFunctor" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< double > * >(argp1);
  {
    try {
      result = ase::SWIGTEMPLATEDISAMBIGUATOR SecondDerivativeFunctor< ase::ParabolicRailwayCurve< double > >((ase::ParabolicRailwayCurve< double > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > >(static_cast< const ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > >& >(result))), SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DerivativeFunctorHelper_SmoothDoubleCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DerivativeFunctorHelper_SmoothDoubleCubic" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DerivativeFunctorHelper_SmoothDoubleCubic" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< double > * >(argp1);
  {
    try {
      result = (ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > *)new ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > >((ase::SmoothDoubleCubic< double > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DerivativeFunctorHelper_SmoothDoubleCubic___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > *arg1 = (ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DerivativeFunctorHelper_SmoothDoubleCubic___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DerivativeFunctorHelper_SmoothDoubleCubic___call__" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DerivativeFunctorHelper_SmoothDoubleCubic___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DerivativeFunctorHelper_SmoothDoubleCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > *arg1 = (ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DerivativeFunctorHelper_SmoothDoubleCubic" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > *""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DerivativeFunctorHelper_SmoothDoubleCubic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DerivativeFunctorHelper_SmoothDoubleCubic_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_DerivativeFunctor__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DerivativeFunctor" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DerivativeFunctor" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< double > * >(argp1);
  {
    try {
      result = ase::SWIGTEMPLATEDISAMBIGUATOR DerivativeFunctor< ase::SmoothDoubleCubic< double > >((ase::SmoothDoubleCubic< double > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > >(static_cast< const ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > >& >(result))), SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SecondDerivativeFunctorHelper_SmoothDoubleCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SecondDerivativeFunctorHelper_SmoothDoubleCubic" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SecondDerivativeFunctorHelper_SmoothDoubleCubic" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< double > * >(argp1);
  {
    try {
      result = (ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > *)new ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > >((ase::SmoothDoubleCubic< double > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SecondDerivativeFunctorHelper_SmoothDoubleCubic___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > *arg1 = (ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "SecondDerivativeFunctorHelper_SmoothDoubleCubic___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecondDerivativeFunctorHelper_SmoothDoubleCubic___call__" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SecondDerivativeFunctorHelper_SmoothDoubleCubic___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SecondDerivativeFunctorHelper_SmoothDoubleCubic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > *arg1 = (ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SecondDerivativeFunctorHelper_SmoothDoubleCubic" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SecondDerivativeFunctorHelper_SmoothDoubleCubic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SecondDerivativeFunctorHelper_SmoothDoubleCubic_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SecondDerivativeFunctor__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecondDerivativeFunctor" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SecondDerivativeFunctor" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< double > * >(argp1);
  {
    try {
      result = ase::SWIGTEMPLATEDISAMBIGUATOR SecondDerivativeFunctor< ase::SmoothDoubleCubic< double > >((ase::SmoothDoubleCubic< double > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > >(static_cast< const ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > >& >(result))), SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DerivativeFunctorHelper_SymbetaDoubleIntegral(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DerivativeFunctorHelper_SymbetaDoubleIntegral" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DerivativeFunctorHelper_SymbetaDoubleIntegral" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< double > * >(argp1);
  {
    try {
      result = (ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > *)new ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > >((ase::SymbetaDoubleIntegral< double > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DerivativeFunctorHelper_SymbetaDoubleIntegral___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > *arg1 = (ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DerivativeFunctorHelper_SymbetaDoubleIntegral___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DerivativeFunctorHelper_SymbetaDoubleIntegral___call__" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DerivativeFunctorHelper_SymbetaDoubleIntegral___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DerivativeFunctorHelper_SymbetaDoubleIntegral(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > *arg1 = (ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DerivativeFunctorHelper_SymbetaDoubleIntegral" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > *""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DerivativeFunctorHelper_SymbetaDoubleIntegral_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DerivativeFunctorHelper_SymbetaDoubleIntegral_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_DerivativeFunctor__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DerivativeFunctor" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DerivativeFunctor" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< double > * >(argp1);
  {
    try {
      result = ase::SWIGTEMPLATEDISAMBIGUATOR DerivativeFunctor< ase::SymbetaDoubleIntegral< double > >((ase::SymbetaDoubleIntegral< double > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > >(static_cast< const ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > >& >(result))), SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SecondDerivativeFunctorHelper_SymbetaDoubleIntegral(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SecondDerivativeFunctorHelper_SymbetaDoubleIntegral" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SecondDerivativeFunctorHelper_SymbetaDoubleIntegral" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< double > * >(argp1);
  {
    try {
      result = (ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > *)new ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > >((ase::SymbetaDoubleIntegral< double > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SecondDerivativeFunctorHelper_SymbetaDoubleIntegral___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > *arg1 = (ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "SecondDerivativeFunctorHelper_SymbetaDoubleIntegral___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecondDerivativeFunctorHelper_SymbetaDoubleIntegral___call__" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SecondDerivativeFunctorHelper_SymbetaDoubleIntegral___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SecondDerivativeFunctorHelper_SymbetaDoubleIntegral(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > *arg1 = (ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SecondDerivativeFunctorHelper_SymbetaDoubleIntegral" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SecondDerivativeFunctorHelper_SymbetaDoubleIntegral_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SecondDerivativeFunctorHelper_SymbetaDoubleIntegral_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SecondDerivativeFunctor__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecondDerivativeFunctor" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SecondDerivativeFunctor" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< double > * >(argp1);
  {
    try {
      result = ase::SWIGTEMPLATEDISAMBIGUATOR SecondDerivativeFunctor< ase::SymbetaDoubleIntegral< double > >((ase::SymbetaDoubleIntegral< double > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > >(static_cast< const ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > >& >(result))), SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DerivativeFunctorHelper_DoubleCubicInner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleCubicInner *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::DerivativeFunctorHelper< ase::DoubleCubicInner > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DoubleCubicInner,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DerivativeFunctorHelper_DoubleCubicInner" "', argument " "1"" of type '" "ase::DoubleCubicInner const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DerivativeFunctorHelper_DoubleCubicInner" "', argument " "1"" of type '" "ase::DoubleCubicInner const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleCubicInner * >(argp1);
  {
    try {
      result = (ase::DerivativeFunctorHelper< ase::DoubleCubicInner > *)new ase::DerivativeFunctorHelper< ase::DoubleCubicInner >((ase::DoubleCubicInner const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__DoubleCubicInner_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DerivativeFunctorHelper_DoubleCubicInner___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::DoubleCubicInner > *arg1 = (ase::DerivativeFunctorHelper< ase::DoubleCubicInner > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DerivativeFunctorHelper_DoubleCubicInner___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__DoubleCubicInner_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DerivativeFunctorHelper_DoubleCubicInner___call__" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::DoubleCubicInner > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::DoubleCubicInner > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DerivativeFunctorHelper_DoubleCubicInner___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::DerivativeFunctorHelper< ase::DoubleCubicInner > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DerivativeFunctorHelper_DoubleCubicInner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::DoubleCubicInner > *arg1 = (ase::DerivativeFunctorHelper< ase::DoubleCubicInner > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__DoubleCubicInner_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DerivativeFunctorHelper_DoubleCubicInner" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::DoubleCubicInner > *""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::DoubleCubicInner > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DerivativeFunctorHelper_DoubleCubicInner_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__DoubleCubicInner_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DerivativeFunctorHelper_DoubleCubicInner_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_DerivativeFunctor__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DoubleCubicInner *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ase::DerivativeFunctorHelper< ase::DoubleCubicInner > > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DoubleCubicInner,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DerivativeFunctor" "', argument " "1"" of type '" "ase::DoubleCubicInner const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DerivativeFunctor" "', argument " "1"" of type '" "ase::DoubleCubicInner const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleCubicInner * >(argp1);
  {
    try {
      result = ase::SWIGTEMPLATEDISAMBIGUATOR DerivativeFunctor< ase::DoubleCubicInner >((ase::DoubleCubicInner const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::DerivativeFunctorHelper< ase::DoubleCubicInner >(static_cast< const ase::DerivativeFunctorHelper< ase::DoubleCubicInner >& >(result))), SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__DoubleCubicInner_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SecondDerivativeFunctorHelper_DoubleCubicInner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleCubicInner *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DoubleCubicInner,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SecondDerivativeFunctorHelper_DoubleCubicInner" "', argument " "1"" of type '" "ase::DoubleCubicInner const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SecondDerivativeFunctorHelper_DoubleCubicInner" "', argument " "1"" of type '" "ase::DoubleCubicInner const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleCubicInner * >(argp1);
  {
    try {
      result = (ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > *)new ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner >((ase::DoubleCubicInner const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__DoubleCubicInner_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SecondDerivativeFunctorHelper_DoubleCubicInner___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > *arg1 = (ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "SecondDerivativeFunctorHelper_DoubleCubicInner___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__DoubleCubicInner_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecondDerivativeFunctorHelper_DoubleCubicInner___call__" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SecondDerivativeFunctorHelper_DoubleCubicInner___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SecondDerivativeFunctorHelper_DoubleCubicInner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > *arg1 = (ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__DoubleCubicInner_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SecondDerivativeFunctorHelper_DoubleCubicInner" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SecondDerivativeFunctorHelper_DoubleCubicInner_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__DoubleCubicInner_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SecondDerivativeFunctorHelper_DoubleCubicInner_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SecondDerivativeFunctor__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DoubleCubicInner *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DoubleCubicInner,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecondDerivativeFunctor" "', argument " "1"" of type '" "ase::DoubleCubicInner const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SecondDerivativeFunctor" "', argument " "1"" of type '" "ase::DoubleCubicInner const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleCubicInner * >(argp1);
  {
    try {
      result = ase::SWIGTEMPLATEDISAMBIGUATOR SecondDerivativeFunctor< ase::DoubleCubicInner >((ase::DoubleCubicInner const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner >(static_cast< const ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner >& >(result))), SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__DoubleCubicInner_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DerivativeFunctorHelper_QuinticInner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::QuinticInner *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::DerivativeFunctorHelper< ase::QuinticInner > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__QuinticInner,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DerivativeFunctorHelper_QuinticInner" "', argument " "1"" of type '" "ase::QuinticInner const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DerivativeFunctorHelper_QuinticInner" "', argument " "1"" of type '" "ase::QuinticInner const &""'"); 
  }
  arg1 = reinterpret_cast< ase::QuinticInner * >(argp1);
  {
    try {
      result = (ase::DerivativeFunctorHelper< ase::QuinticInner > *)new ase::DerivativeFunctorHelper< ase::QuinticInner >((ase::QuinticInner const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__QuinticInner_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DerivativeFunctorHelper_QuinticInner___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::QuinticInner > *arg1 = (ase::DerivativeFunctorHelper< ase::QuinticInner > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DerivativeFunctorHelper_QuinticInner___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__QuinticInner_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DerivativeFunctorHelper_QuinticInner___call__" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::QuinticInner > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::QuinticInner > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DerivativeFunctorHelper_QuinticInner___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::DerivativeFunctorHelper< ase::QuinticInner > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DerivativeFunctorHelper_QuinticInner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::QuinticInner > *arg1 = (ase::DerivativeFunctorHelper< ase::QuinticInner > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__QuinticInner_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DerivativeFunctorHelper_QuinticInner" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::QuinticInner > *""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::QuinticInner > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DerivativeFunctorHelper_QuinticInner_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__QuinticInner_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DerivativeFunctorHelper_QuinticInner_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_DerivativeFunctor__SWIG_6(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::QuinticInner *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ase::DerivativeFunctorHelper< ase::QuinticInner > > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__QuinticInner,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DerivativeFunctor" "', argument " "1"" of type '" "ase::QuinticInner const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DerivativeFunctor" "', argument " "1"" of type '" "ase::QuinticInner const &""'"); 
  }
  arg1 = reinterpret_cast< ase::QuinticInner * >(argp1);
  {
    try {
      result = ase::SWIGTEMPLATEDISAMBIGUATOR DerivativeFunctor< ase::QuinticInner >((ase::QuinticInner const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::DerivativeFunctorHelper< ase::QuinticInner >(static_cast< const ase::DerivativeFunctorHelper< ase::QuinticInner >& >(result))), SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__QuinticInner_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DerivativeFunctor(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DerivativeFunctor", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__TransitionCubicT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DerivativeFunctor__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DerivativeFunctor__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DerivativeFunctor__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DerivativeFunctor__SWIG_4(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DoubleCubicInner, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DerivativeFunctor__SWIG_5(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__QuinticInner, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_DerivativeFunctor__SWIG_6(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DerivativeFunctor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::DerivativeFunctor< ase::TransitionCubic< double > >(ase::TransitionCubic< double > const &)\n"
    "    ase::DerivativeFunctor< ase::ParabolicRailwayCurve< double > >(ase::ParabolicRailwayCurve< double > const &)\n"
    "    ase::DerivativeFunctor< ase::SmoothDoubleCubic< double > >(ase::SmoothDoubleCubic< double > const &)\n"
    "    ase::DerivativeFunctor< ase::SymbetaDoubleIntegral< double > >(ase::SymbetaDoubleIntegral< double > const &)\n"
    "    ase::DerivativeFunctor< ase::DoubleCubicInner >(ase::DoubleCubicInner const &)\n"
    "    ase::DerivativeFunctor< ase::QuinticInner >(ase::QuinticInner const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_SecondDerivativeFunctorHelper_QuinticInner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::QuinticInner *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SecondDerivativeFunctorHelper< ase::QuinticInner > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__QuinticInner,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SecondDerivativeFunctorHelper_QuinticInner" "', argument " "1"" of type '" "ase::QuinticInner const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SecondDerivativeFunctorHelper_QuinticInner" "', argument " "1"" of type '" "ase::QuinticInner const &""'"); 
  }
  arg1 = reinterpret_cast< ase::QuinticInner * >(argp1);
  {
    try {
      result = (ase::SecondDerivativeFunctorHelper< ase::QuinticInner > *)new ase::SecondDerivativeFunctorHelper< ase::QuinticInner >((ase::QuinticInner const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__QuinticInner_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SecondDerivativeFunctorHelper_QuinticInner___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::QuinticInner > *arg1 = (ase::SecondDerivativeFunctorHelper< ase::QuinticInner > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "SecondDerivativeFunctorHelper_QuinticInner___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__QuinticInner_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecondDerivativeFunctorHelper_QuinticInner___call__" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::QuinticInner > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::QuinticInner > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SecondDerivativeFunctorHelper_QuinticInner___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::SecondDerivativeFunctorHelper< ase::QuinticInner > const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SecondDerivativeFunctorHelper_QuinticInner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::QuinticInner > *arg1 = (ase::SecondDerivativeFunctorHelper< ase::QuinticInner > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__QuinticInner_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SecondDerivativeFunctorHelper_QuinticInner" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::QuinticInner > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::QuinticInner > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SecondDerivativeFunctorHelper_QuinticInner_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__QuinticInner_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SecondDerivativeFunctorHelper_QuinticInner_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SecondDerivativeFunctor__SWIG_6(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::QuinticInner *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< ase::SecondDerivativeFunctorHelper< ase::QuinticInner > > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__QuinticInner,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SecondDerivativeFunctor" "', argument " "1"" of type '" "ase::QuinticInner const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SecondDerivativeFunctor" "', argument " "1"" of type '" "ase::QuinticInner const &""'"); 
  }
  arg1 = reinterpret_cast< ase::QuinticInner * >(argp1);
  {
    try {
      result = ase::SWIGTEMPLATEDISAMBIGUATOR SecondDerivativeFunctor< ase::QuinticInner >((ase::QuinticInner const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::SecondDerivativeFunctorHelper< ase::QuinticInner >(static_cast< const ase::SecondDerivativeFunctorHelper< ase::QuinticInner >& >(result))), SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__QuinticInner_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SecondDerivativeFunctor(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SecondDerivativeFunctor", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__TransitionCubicT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SecondDerivativeFunctor__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SecondDerivativeFunctor__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SecondDerivativeFunctor__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SecondDerivativeFunctor__SWIG_4(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DoubleCubicInner, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SecondDerivativeFunctor__SWIG_5(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__QuinticInner, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SecondDerivativeFunctor__SWIG_6(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SecondDerivativeFunctor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SecondDerivativeFunctor< ase::TransitionCubic< double > >(ase::TransitionCubic< double > const &)\n"
    "    ase::SecondDerivativeFunctor< ase::ParabolicRailwayCurve< double > >(ase::ParabolicRailwayCurve< double > const &)\n"
    "    ase::SecondDerivativeFunctor< ase::SmoothDoubleCubic< double > >(ase::SmoothDoubleCubic< double > const &)\n"
    "    ase::SecondDerivativeFunctor< ase::SymbetaDoubleIntegral< double > >(ase::SymbetaDoubleIntegral< double > const &)\n"
    "    ase::SecondDerivativeFunctor< ase::DoubleCubicInner >(ase::DoubleCubicInner const &)\n"
    "    ase::SecondDerivativeFunctor< ase::QuinticInner >(ase::QuinticInner const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_PoissonLogli(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned long arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::PoissonLogli *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_unsigned_SS_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PoissonLogli" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    try {
      result = (ase::PoissonLogli *)new ase::PoissonLogli(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__PoissonLogli, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PoissonLogli(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::PoissonLogli *arg1 = (ase::PoissonLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PoissonLogli, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PoissonLogli" "', argument " "1"" of type '" "ase::PoissonLogli *""'"); 
  }
  arg1 = reinterpret_cast< ase::PoissonLogli * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonLogli_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::PoissonLogli *arg1 = (ase::PoissonLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::PoissonLogli *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PoissonLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonLogli_clone" "', argument " "1"" of type '" "ase::PoissonLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::PoissonLogli * >(argp1);
  {
    try {
      result = (ase::PoissonLogli *)((ase::PoissonLogli const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__PoissonLogli, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonLogli_n(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::PoissonLogli *arg1 = (ase::PoissonLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned long result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PoissonLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonLogli_n" "', argument " "1"" of type '" "ase::PoissonLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::PoissonLogli * >(argp1);
  {
    try {
      result = (unsigned long)((ase::PoissonLogli const *)arg1)->n();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonLogli_parMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::PoissonLogli *arg1 = (ase::PoissonLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PoissonLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonLogli_parMin" "', argument " "1"" of type '" "ase::PoissonLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::PoissonLogli * >(argp1);
  {
    try {
      result = (double)((ase::PoissonLogli const *)arg1)->parMin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonLogli_parMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::PoissonLogli *arg1 = (ase::PoissonLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PoissonLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonLogli_parMax" "', argument " "1"" of type '" "ase::PoissonLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::PoissonLogli * >(argp1);
  {
    try {
      result = (double)((ase::PoissonLogli const *)arg1)->parMax();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonLogli_location(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::PoissonLogli *arg1 = (ase::PoissonLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PoissonLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonLogli_location" "', argument " "1"" of type '" "ase::PoissonLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::PoissonLogli * >(argp1);
  {
    try {
      result = (double)((ase::PoissonLogli const *)arg1)->location();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonLogli_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::PoissonLogli *arg1 = (ase::PoissonLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PoissonLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonLogli_stepSize" "', argument " "1"" of type '" "ase::PoissonLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::PoissonLogli * >(argp1);
  {
    try {
      result = (double)((ase::PoissonLogli const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonLogli_maximum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::PoissonLogli *arg1 = (ase::PoissonLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PoissonLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonLogli_maximum" "', argument " "1"" of type '" "ase::PoissonLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::PoissonLogli * >(argp1);
  {
    try {
      result = (double)((ase::PoissonLogli const *)arg1)->maximum();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonLogli_argmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::PoissonLogli *arg1 = (ase::PoissonLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PoissonLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonLogli_argmax" "', argument " "1"" of type '" "ase::PoissonLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::PoissonLogli * >(argp1);
  {
    try {
      result = (double)((ase::PoissonLogli const *)arg1)->argmax();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonLogli___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::PoissonLogli *arg1 = (ase::PoissonLogli *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "PoissonLogli___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PoissonLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonLogli___call__" "', argument " "1"" of type '" "ase::PoissonLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::PoissonLogli * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PoissonLogli___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::PoissonLogli const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonLogli_derivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::PoissonLogli *arg1 = (ase::PoissonLogli *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "PoissonLogli_derivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PoissonLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonLogli_derivative" "', argument " "1"" of type '" "ase::PoissonLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::PoissonLogli * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PoissonLogli_derivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::PoissonLogli const *)arg1)->derivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonLogli_secondDerivative__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::PoissonLogli *arg1 = (ase::PoissonLogli *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PoissonLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonLogli_secondDerivative" "', argument " "1"" of type '" "ase::PoissonLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::PoissonLogli * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PoissonLogli_secondDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PoissonLogli_secondDerivative" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::PoissonLogli const *)arg1)->secondDerivative(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonLogli_secondDerivative__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::PoissonLogli *arg1 = (ase::PoissonLogli *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PoissonLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonLogli_secondDerivative" "', argument " "1"" of type '" "ase::PoissonLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::PoissonLogli * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PoissonLogli_secondDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::PoissonLogli const *)arg1)->secondDerivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonLogli_secondDerivative(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PoissonLogli_secondDerivative", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__PoissonLogli, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PoissonLogli_secondDerivative__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__PoissonLogli, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PoissonLogli_secondDerivative__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PoissonLogli_secondDerivative'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::PoissonLogli::secondDerivative(double,double) const\n"
    "    ase::PoissonLogli::secondDerivative(double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PoissonLogli_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::PoissonLogli *arg1 = (ase::PoissonLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PoissonLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonLogli_classname" "', argument " "1"" of type '" "ase::PoissonLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::PoissonLogli * >(argp1);
  {
    try {
      result = ((ase::PoissonLogli const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonLogli___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::PoissonLogli *arg1 = (ase::PoissonLogli *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::AbsLogLikelihoodCurve *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "PoissonLogli___imul__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PoissonLogli, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonLogli___imul__" "', argument " "1"" of type '" "ase::PoissonLogli *""'"); 
  }
  arg1 = reinterpret_cast< ase::PoissonLogli * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PoissonLogli___imul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (ase::AbsLogLikelihoodCurve *) &(arg1)->operator *=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__AbsLogLikelihoodCurve, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonLogli_sigmaMinus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::PoissonLogli *arg1 = (ase::PoissonLogli *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PoissonLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonLogli_sigmaMinus" "', argument " "1"" of type '" "ase::PoissonLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::PoissonLogli * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PoissonLogli_sigmaMinus" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PoissonLogli_sigmaMinus" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::PoissonLogli const *)arg1)->sigmaMinus(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonLogli_sigmaMinus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::PoissonLogli *arg1 = (ase::PoissonLogli *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PoissonLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonLogli_sigmaMinus" "', argument " "1"" of type '" "ase::PoissonLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::PoissonLogli * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PoissonLogli_sigmaMinus" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::PoissonLogli const *)arg1)->sigmaMinus(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonLogli_sigmaMinus__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::PoissonLogli *arg1 = (ase::PoissonLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PoissonLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonLogli_sigmaMinus" "', argument " "1"" of type '" "ase::PoissonLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::PoissonLogli * >(argp1);
  {
    try {
      result = (double)((ase::PoissonLogli const *)arg1)->sigmaMinus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonLogli_sigmaMinus(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PoissonLogli_sigmaMinus", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__PoissonLogli, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PoissonLogli_sigmaMinus__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__PoissonLogli, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PoissonLogli_sigmaMinus__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__PoissonLogli, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PoissonLogli_sigmaMinus__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PoissonLogli_sigmaMinus'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::PoissonLogli::sigmaMinus(double,double) const\n"
    "    ase::PoissonLogli::sigmaMinus(double) const\n"
    "    ase::PoissonLogli::sigmaMinus() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PoissonLogli_posteriorMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::PoissonLogli *arg1 = (ase::PoissonLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PoissonLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonLogli_posteriorMean" "', argument " "1"" of type '" "ase::PoissonLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::PoissonLogli * >(argp1);
  {
    try {
      result = (double)((ase::PoissonLogli const *)arg1)->posteriorMean();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonLogli_posteriorVariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::PoissonLogli *arg1 = (ase::PoissonLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PoissonLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonLogli_posteriorVariance" "', argument " "1"" of type '" "ase::PoissonLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::PoissonLogli * >(argp1);
  {
    try {
      result = (double)((ase::PoissonLogli const *)arg1)->posteriorVariance();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PoissonLogli_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__PoissonLogli, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PoissonLogli_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  ase::SymmetricBetaGaussian *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetricBetaGaussian" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SymmetricBetaGaussian" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SymmetricBetaGaussian" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (ase::SymmetricBetaGaussian *)new ase::SymmetricBetaGaussian(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  unsigned int arg2 ;
  double arg3 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricBetaGaussian" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricBetaGaussian" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian *)new ase::SymmetricBetaGaussian((std::vector< double,std::allocator< double > > const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricBetaGaussian", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SymmetricBetaGaussian__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_SymmetricBetaGaussian__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricBetaGaussian'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian::SymmetricBetaGaussian(double,double,double,unsigned int,double)\n"
    "    ase::SymmetricBetaGaussian::SymmetricBetaGaussian(std::vector< double,std::allocator< double > > const &,unsigned int,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian *arg1 = (ase::SymmetricBetaGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetricBetaGaussian *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_clone" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian * >(argp1);
  {
    try {
      result = (ase::SymmetricBetaGaussian *)((ase::SymmetricBetaGaussian const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricBetaGaussian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian *arg1 = (ase::SymmetricBetaGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricBetaGaussian" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian *arg1 = (ase::SymmetricBetaGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_p" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian * >(argp1);
  {
    try {
      result = (unsigned int)((ase::SymmetricBetaGaussian const *)arg1)->p();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_h(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian *arg1 = (ase::SymmetricBetaGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_h" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian * >(argp1);
  {
    try {
      result = (double)((ase::SymmetricBetaGaussian const *)arg1)->h();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian *arg1 = (ase::SymmetricBetaGaussian *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_classname" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian * >(argp1);
  {
    try {
      result = ((ase::SymmetricBetaGaussian const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_minQuantileRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  double arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_minQuantileRatio", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_minQuantileRatio" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_minQuantileRatio" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ase::SymmetricBetaGaussian::minQuantileRatio(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_minDescentDeltaRatio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_minDescentDeltaRatio" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_minDescentDeltaRatio" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_minDescentDeltaRatio" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = ase::SymmetricBetaGaussian::minDescentDeltaRatio(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_minDescentDeltaRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  double arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_minDescentDeltaRatio" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_minDescentDeltaRatio" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ase::SymmetricBetaGaussian::minDescentDeltaRatio(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_minDescentDeltaRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_minDescentDeltaRatio", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SymmetricBetaGaussian_minDescentDeltaRatio__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SymmetricBetaGaussian_minDescentDeltaRatio__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_minDescentDeltaRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian::minDescentDeltaRatio(unsigned int,double,double)\n"
    "    ase::SymmetricBetaGaussian::minDescentDeltaRatio(unsigned int,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  ase::SymmetricBetaGaussian *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_fromQuantiles", 5, 5, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_fromQuantiles" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SymmetricBetaGaussian_fromQuantiles" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (ase::SymmetricBetaGaussian *)ase::SymmetricBetaGaussian::fromQuantilesBarePtr(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  double arg5 ;
  double arg6 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  ase::SymmetricBetaGaussian *result = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_fromModeAndDeltas" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SymmetricBetaGaussian_fromModeAndDeltas" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "SymmetricBetaGaussian_fromModeAndDeltas" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (ase::SymmetricBetaGaussian *)ase::SymmetricBetaGaussian::fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  ase::SymmetricBetaGaussian *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_fromModeAndDeltas" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SymmetricBetaGaussian_fromModeAndDeltas" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (ase::SymmetricBetaGaussian *)ase::SymmetricBetaGaussian::fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_fromModeAndDeltas", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_SymmetricBetaGaussian_fromModeAndDeltas__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_SymmetricBetaGaussian_fromModeAndDeltas__SWIG_0(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian::fromModeAndDeltasBarePtr(double const,double const,double const,unsigned int const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian::fromModeAndDeltasBarePtr(double const,double const,double const,unsigned int const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SymmetricBetaGaussian_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetricBetaGaussian, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricBetaGaussian_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_1_10__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 1U,10U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetricBetaGaussian_1_10" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian_1_10" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian_1_10" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,10U > *)new ase::SymmetricBetaGaussian_p_h< 1U,10U >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_10U_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_1_10__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::SymmetricBetaGaussian_p_h< 1U,10U > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricBetaGaussian_1_10" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricBetaGaussian_1_10" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,10U > *)new ase::SymmetricBetaGaussian_p_h< 1U,10U >((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_10U_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_1_10(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricBetaGaussian_1_10", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SymmetricBetaGaussian_1_10__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SymmetricBetaGaussian_1_10__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricBetaGaussian_1_10'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,10U >::SymmetricBetaGaussian_p_h(double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,10U >::SymmetricBetaGaussian_p_h(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_10_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 1U,10U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 1U,10U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetricBetaGaussian_p_h< 1U,10U > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_10U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_1_10_clone" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 1U,10U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 1U,10U > * >(argp1);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,10U > *)((ase::SymmetricBetaGaussian_p_h< 1U,10U > const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_10U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricBetaGaussian_1_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 1U,10U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 1U,10U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_10U_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricBetaGaussian_1_10" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 1U,10U > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 1U,10U > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_10_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 1U,10U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 1U,10U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_10U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_1_10_classname" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 1U,10U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 1U,10U > * >(argp1);
  {
    try {
      result = ((ase::SymmetricBetaGaussian_p_h< 1U,10U > const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_10_minQuantileRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_1_10_minQuantileRatio", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 1U,10U >::SWIGTEMPLATEDISAMBIGUATOR minQuantileRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_10_minDescentDeltaRatio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_1_10_minDescentDeltaRatio" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 1U,10U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_10_minDescentDeltaRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 1U,10U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_10_minDescentDeltaRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_1_10_minDescentDeltaRatio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_SymmetricBetaGaussian_1_10_minDescentDeltaRatio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SymmetricBetaGaussian_1_10_minDescentDeltaRatio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_1_10_minDescentDeltaRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,10U >::minDescentDeltaRatio(double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,10U >::minDescentDeltaRatio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_10_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SymmetricBetaGaussian_p_h< 1U,10U > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_1_10_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_1_10_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_1_10_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_1_10_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,10U > *)ase::SymmetricBetaGaussian_p_h< 1U,10U >::SWIGTEMPLATEDISAMBIGUATOR fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_10U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_10_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 1U,10U > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_1_10_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_1_10_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_1_10_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_1_10_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,10U > *)ase::SymmetricBetaGaussian_p_h< 1U,10U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_10U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_10_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 1U,10U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_1_10_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_1_10_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_1_10_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,10U > *)ase::SymmetricBetaGaussian_p_h< 1U,10U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_10U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_10_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_1_10_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SymmetricBetaGaussian_1_10_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SymmetricBetaGaussian_1_10_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_1_10_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,10U >::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,10U >::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SymmetricBetaGaussian_1_10_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_10U_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricBetaGaussian_1_10_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_1_15__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 1U,15U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetricBetaGaussian_1_15" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian_1_15" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian_1_15" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,15U > *)new ase::SymmetricBetaGaussian_p_h< 1U,15U >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_15U_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_1_15__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::SymmetricBetaGaussian_p_h< 1U,15U > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricBetaGaussian_1_15" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricBetaGaussian_1_15" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,15U > *)new ase::SymmetricBetaGaussian_p_h< 1U,15U >((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_15U_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_1_15(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricBetaGaussian_1_15", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SymmetricBetaGaussian_1_15__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SymmetricBetaGaussian_1_15__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricBetaGaussian_1_15'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,15U >::SymmetricBetaGaussian_p_h(double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,15U >::SymmetricBetaGaussian_p_h(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_15_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 1U,15U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 1U,15U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetricBetaGaussian_p_h< 1U,15U > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_15U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_1_15_clone" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 1U,15U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 1U,15U > * >(argp1);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,15U > *)((ase::SymmetricBetaGaussian_p_h< 1U,15U > const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_15U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricBetaGaussian_1_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 1U,15U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 1U,15U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_15U_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricBetaGaussian_1_15" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 1U,15U > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 1U,15U > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_15_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 1U,15U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 1U,15U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_15U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_1_15_classname" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 1U,15U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 1U,15U > * >(argp1);
  {
    try {
      result = ((ase::SymmetricBetaGaussian_p_h< 1U,15U > const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_15_minQuantileRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_1_15_minQuantileRatio", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 1U,15U >::SWIGTEMPLATEDISAMBIGUATOR minQuantileRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_15_minDescentDeltaRatio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_1_15_minDescentDeltaRatio" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 1U,15U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_15_minDescentDeltaRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 1U,15U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_15_minDescentDeltaRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_1_15_minDescentDeltaRatio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_SymmetricBetaGaussian_1_15_minDescentDeltaRatio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SymmetricBetaGaussian_1_15_minDescentDeltaRatio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_1_15_minDescentDeltaRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,15U >::minDescentDeltaRatio(double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,15U >::minDescentDeltaRatio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_15_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SymmetricBetaGaussian_p_h< 1U,15U > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_1_15_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_1_15_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_1_15_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_1_15_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,15U > *)ase::SymmetricBetaGaussian_p_h< 1U,15U >::SWIGTEMPLATEDISAMBIGUATOR fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_15U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_15_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 1U,15U > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_1_15_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_1_15_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_1_15_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_1_15_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,15U > *)ase::SymmetricBetaGaussian_p_h< 1U,15U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_15U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_15_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 1U,15U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_1_15_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_1_15_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_1_15_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,15U > *)ase::SymmetricBetaGaussian_p_h< 1U,15U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_15U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_15_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_1_15_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SymmetricBetaGaussian_1_15_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SymmetricBetaGaussian_1_15_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_1_15_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,15U >::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,15U >::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SymmetricBetaGaussian_1_15_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_15U_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricBetaGaussian_1_15_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_1_20__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 1U,20U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetricBetaGaussian_1_20" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian_1_20" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian_1_20" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,20U > *)new ase::SymmetricBetaGaussian_p_h< 1U,20U >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_20U_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_1_20__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::SymmetricBetaGaussian_p_h< 1U,20U > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricBetaGaussian_1_20" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricBetaGaussian_1_20" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,20U > *)new ase::SymmetricBetaGaussian_p_h< 1U,20U >((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_20U_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_1_20(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricBetaGaussian_1_20", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SymmetricBetaGaussian_1_20__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SymmetricBetaGaussian_1_20__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricBetaGaussian_1_20'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,20U >::SymmetricBetaGaussian_p_h(double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,20U >::SymmetricBetaGaussian_p_h(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_20_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 1U,20U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 1U,20U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetricBetaGaussian_p_h< 1U,20U > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_20U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_1_20_clone" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 1U,20U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 1U,20U > * >(argp1);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,20U > *)((ase::SymmetricBetaGaussian_p_h< 1U,20U > const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_20U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricBetaGaussian_1_20(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 1U,20U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 1U,20U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_20U_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricBetaGaussian_1_20" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 1U,20U > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 1U,20U > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_20_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 1U,20U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 1U,20U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_20U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_1_20_classname" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 1U,20U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 1U,20U > * >(argp1);
  {
    try {
      result = ((ase::SymmetricBetaGaussian_p_h< 1U,20U > const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_20_minQuantileRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_1_20_minQuantileRatio", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 1U,20U >::SWIGTEMPLATEDISAMBIGUATOR minQuantileRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_20_minDescentDeltaRatio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_1_20_minDescentDeltaRatio" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 1U,20U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_20_minDescentDeltaRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 1U,20U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_20_minDescentDeltaRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_1_20_minDescentDeltaRatio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_SymmetricBetaGaussian_1_20_minDescentDeltaRatio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SymmetricBetaGaussian_1_20_minDescentDeltaRatio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_1_20_minDescentDeltaRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,20U >::minDescentDeltaRatio(double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,20U >::minDescentDeltaRatio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_20_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SymmetricBetaGaussian_p_h< 1U,20U > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_1_20_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_1_20_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_1_20_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_1_20_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,20U > *)ase::SymmetricBetaGaussian_p_h< 1U,20U >::SWIGTEMPLATEDISAMBIGUATOR fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_20U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_20_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 1U,20U > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_1_20_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_1_20_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_1_20_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_1_20_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,20U > *)ase::SymmetricBetaGaussian_p_h< 1U,20U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_20U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_20_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 1U,20U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_1_20_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_1_20_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_1_20_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,20U > *)ase::SymmetricBetaGaussian_p_h< 1U,20U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_20U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_20_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_1_20_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SymmetricBetaGaussian_1_20_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SymmetricBetaGaussian_1_20_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_1_20_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,20U >::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,20U >::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SymmetricBetaGaussian_1_20_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_20U_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricBetaGaussian_1_20_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_1_25__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 1U,25U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetricBetaGaussian_1_25" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian_1_25" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian_1_25" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,25U > *)new ase::SymmetricBetaGaussian_p_h< 1U,25U >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_25U_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_1_25__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::SymmetricBetaGaussian_p_h< 1U,25U > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricBetaGaussian_1_25" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricBetaGaussian_1_25" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,25U > *)new ase::SymmetricBetaGaussian_p_h< 1U,25U >((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_25U_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_1_25(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricBetaGaussian_1_25", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SymmetricBetaGaussian_1_25__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SymmetricBetaGaussian_1_25__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricBetaGaussian_1_25'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,25U >::SymmetricBetaGaussian_p_h(double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,25U >::SymmetricBetaGaussian_p_h(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_25_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 1U,25U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 1U,25U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetricBetaGaussian_p_h< 1U,25U > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_25U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_1_25_clone" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 1U,25U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 1U,25U > * >(argp1);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,25U > *)((ase::SymmetricBetaGaussian_p_h< 1U,25U > const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_25U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricBetaGaussian_1_25(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 1U,25U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 1U,25U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_25U_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricBetaGaussian_1_25" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 1U,25U > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 1U,25U > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_25_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 1U,25U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 1U,25U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_25U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_1_25_classname" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 1U,25U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 1U,25U > * >(argp1);
  {
    try {
      result = ((ase::SymmetricBetaGaussian_p_h< 1U,25U > const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_25_minQuantileRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_1_25_minQuantileRatio", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 1U,25U >::SWIGTEMPLATEDISAMBIGUATOR minQuantileRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_25_minDescentDeltaRatio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_1_25_minDescentDeltaRatio" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 1U,25U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_25_minDescentDeltaRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 1U,25U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_25_minDescentDeltaRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_1_25_minDescentDeltaRatio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_SymmetricBetaGaussian_1_25_minDescentDeltaRatio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SymmetricBetaGaussian_1_25_minDescentDeltaRatio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_1_25_minDescentDeltaRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,25U >::minDescentDeltaRatio(double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,25U >::minDescentDeltaRatio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_25_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SymmetricBetaGaussian_p_h< 1U,25U > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_1_25_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_1_25_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_1_25_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_1_25_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,25U > *)ase::SymmetricBetaGaussian_p_h< 1U,25U >::SWIGTEMPLATEDISAMBIGUATOR fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_25U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_25_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 1U,25U > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_1_25_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_1_25_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_1_25_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_1_25_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,25U > *)ase::SymmetricBetaGaussian_p_h< 1U,25U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_25U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_25_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 1U,25U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_1_25_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_1_25_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_1_25_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,25U > *)ase::SymmetricBetaGaussian_p_h< 1U,25U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_25U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_25_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_1_25_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SymmetricBetaGaussian_1_25_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SymmetricBetaGaussian_1_25_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_1_25_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,25U >::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,25U >::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SymmetricBetaGaussian_1_25_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_25U_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricBetaGaussian_1_25_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_1_30__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 1U,30U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetricBetaGaussian_1_30" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian_1_30" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian_1_30" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,30U > *)new ase::SymmetricBetaGaussian_p_h< 1U,30U >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_30U_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_1_30__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::SymmetricBetaGaussian_p_h< 1U,30U > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricBetaGaussian_1_30" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricBetaGaussian_1_30" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,30U > *)new ase::SymmetricBetaGaussian_p_h< 1U,30U >((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_30U_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_1_30(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricBetaGaussian_1_30", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SymmetricBetaGaussian_1_30__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SymmetricBetaGaussian_1_30__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricBetaGaussian_1_30'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,30U >::SymmetricBetaGaussian_p_h(double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,30U >::SymmetricBetaGaussian_p_h(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_30_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 1U,30U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 1U,30U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetricBetaGaussian_p_h< 1U,30U > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_30U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_1_30_clone" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 1U,30U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 1U,30U > * >(argp1);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,30U > *)((ase::SymmetricBetaGaussian_p_h< 1U,30U > const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_30U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricBetaGaussian_1_30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 1U,30U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 1U,30U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_30U_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricBetaGaussian_1_30" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 1U,30U > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 1U,30U > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_30_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 1U,30U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 1U,30U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_30U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_1_30_classname" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 1U,30U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 1U,30U > * >(argp1);
  {
    try {
      result = ((ase::SymmetricBetaGaussian_p_h< 1U,30U > const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_30_minQuantileRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_1_30_minQuantileRatio", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 1U,30U >::SWIGTEMPLATEDISAMBIGUATOR minQuantileRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_30_minDescentDeltaRatio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_1_30_minDescentDeltaRatio" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 1U,30U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_30_minDescentDeltaRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 1U,30U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_30_minDescentDeltaRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_1_30_minDescentDeltaRatio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_SymmetricBetaGaussian_1_30_minDescentDeltaRatio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SymmetricBetaGaussian_1_30_minDescentDeltaRatio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_1_30_minDescentDeltaRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,30U >::minDescentDeltaRatio(double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,30U >::minDescentDeltaRatio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_30_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SymmetricBetaGaussian_p_h< 1U,30U > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_1_30_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_1_30_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_1_30_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_1_30_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,30U > *)ase::SymmetricBetaGaussian_p_h< 1U,30U >::SWIGTEMPLATEDISAMBIGUATOR fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_30U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_30_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 1U,30U > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_1_30_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_1_30_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_1_30_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_1_30_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,30U > *)ase::SymmetricBetaGaussian_p_h< 1U,30U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_30U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_30_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 1U,30U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_1_30_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_1_30_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_1_30_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 1U,30U > *)ase::SymmetricBetaGaussian_p_h< 1U,30U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_30U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_1_30_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_1_30_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SymmetricBetaGaussian_1_30_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SymmetricBetaGaussian_1_30_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_1_30_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,30U >::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 1U,30U >::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SymmetricBetaGaussian_1_30_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_1U_30U_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricBetaGaussian_1_30_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_2_10__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 2U,10U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetricBetaGaussian_2_10" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian_2_10" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian_2_10" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,10U > *)new ase::SymmetricBetaGaussian_p_h< 2U,10U >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_10U_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_2_10__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::SymmetricBetaGaussian_p_h< 2U,10U > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricBetaGaussian_2_10" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricBetaGaussian_2_10" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,10U > *)new ase::SymmetricBetaGaussian_p_h< 2U,10U >((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_10U_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_2_10(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricBetaGaussian_2_10", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SymmetricBetaGaussian_2_10__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SymmetricBetaGaussian_2_10__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricBetaGaussian_2_10'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,10U >::SymmetricBetaGaussian_p_h(double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,10U >::SymmetricBetaGaussian_p_h(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_10_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 2U,10U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 2U,10U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetricBetaGaussian_p_h< 2U,10U > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_10U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_2_10_clone" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 2U,10U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 2U,10U > * >(argp1);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,10U > *)((ase::SymmetricBetaGaussian_p_h< 2U,10U > const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_10U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricBetaGaussian_2_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 2U,10U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 2U,10U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_10U_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricBetaGaussian_2_10" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 2U,10U > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 2U,10U > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_10_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 2U,10U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 2U,10U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_10U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_2_10_classname" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 2U,10U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 2U,10U > * >(argp1);
  {
    try {
      result = ((ase::SymmetricBetaGaussian_p_h< 2U,10U > const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_10_minQuantileRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_2_10_minQuantileRatio", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 2U,10U >::SWIGTEMPLATEDISAMBIGUATOR minQuantileRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_10_minDescentDeltaRatio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_2_10_minDescentDeltaRatio" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 2U,10U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_10_minDescentDeltaRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 2U,10U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_10_minDescentDeltaRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_2_10_minDescentDeltaRatio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_SymmetricBetaGaussian_2_10_minDescentDeltaRatio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SymmetricBetaGaussian_2_10_minDescentDeltaRatio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_2_10_minDescentDeltaRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,10U >::minDescentDeltaRatio(double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,10U >::minDescentDeltaRatio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_10_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SymmetricBetaGaussian_p_h< 2U,10U > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_2_10_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_2_10_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_2_10_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_2_10_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,10U > *)ase::SymmetricBetaGaussian_p_h< 2U,10U >::SWIGTEMPLATEDISAMBIGUATOR fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_10U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_10_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 2U,10U > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_2_10_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_2_10_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_2_10_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_2_10_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,10U > *)ase::SymmetricBetaGaussian_p_h< 2U,10U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_10U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_10_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 2U,10U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_2_10_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_2_10_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_2_10_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,10U > *)ase::SymmetricBetaGaussian_p_h< 2U,10U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_10U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_10_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_2_10_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SymmetricBetaGaussian_2_10_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SymmetricBetaGaussian_2_10_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_2_10_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,10U >::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,10U >::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SymmetricBetaGaussian_2_10_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_10U_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricBetaGaussian_2_10_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_2_15__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 2U,15U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetricBetaGaussian_2_15" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian_2_15" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian_2_15" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,15U > *)new ase::SymmetricBetaGaussian_p_h< 2U,15U >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_15U_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_2_15__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::SymmetricBetaGaussian_p_h< 2U,15U > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricBetaGaussian_2_15" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricBetaGaussian_2_15" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,15U > *)new ase::SymmetricBetaGaussian_p_h< 2U,15U >((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_15U_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_2_15(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricBetaGaussian_2_15", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SymmetricBetaGaussian_2_15__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SymmetricBetaGaussian_2_15__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricBetaGaussian_2_15'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,15U >::SymmetricBetaGaussian_p_h(double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,15U >::SymmetricBetaGaussian_p_h(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_15_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 2U,15U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 2U,15U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetricBetaGaussian_p_h< 2U,15U > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_15U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_2_15_clone" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 2U,15U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 2U,15U > * >(argp1);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,15U > *)((ase::SymmetricBetaGaussian_p_h< 2U,15U > const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_15U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricBetaGaussian_2_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 2U,15U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 2U,15U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_15U_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricBetaGaussian_2_15" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 2U,15U > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 2U,15U > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_15_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 2U,15U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 2U,15U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_15U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_2_15_classname" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 2U,15U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 2U,15U > * >(argp1);
  {
    try {
      result = ((ase::SymmetricBetaGaussian_p_h< 2U,15U > const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_15_minQuantileRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_2_15_minQuantileRatio", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 2U,15U >::SWIGTEMPLATEDISAMBIGUATOR minQuantileRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_15_minDescentDeltaRatio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_2_15_minDescentDeltaRatio" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 2U,15U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_15_minDescentDeltaRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 2U,15U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_15_minDescentDeltaRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_2_15_minDescentDeltaRatio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_SymmetricBetaGaussian_2_15_minDescentDeltaRatio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SymmetricBetaGaussian_2_15_minDescentDeltaRatio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_2_15_minDescentDeltaRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,15U >::minDescentDeltaRatio(double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,15U >::minDescentDeltaRatio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_15_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SymmetricBetaGaussian_p_h< 2U,15U > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_2_15_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_2_15_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_2_15_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_2_15_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,15U > *)ase::SymmetricBetaGaussian_p_h< 2U,15U >::SWIGTEMPLATEDISAMBIGUATOR fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_15U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_15_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 2U,15U > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_2_15_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_2_15_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_2_15_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_2_15_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,15U > *)ase::SymmetricBetaGaussian_p_h< 2U,15U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_15U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_15_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 2U,15U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_2_15_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_2_15_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_2_15_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,15U > *)ase::SymmetricBetaGaussian_p_h< 2U,15U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_15U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_15_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_2_15_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SymmetricBetaGaussian_2_15_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SymmetricBetaGaussian_2_15_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_2_15_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,15U >::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,15U >::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SymmetricBetaGaussian_2_15_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_15U_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricBetaGaussian_2_15_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_2_20__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 2U,20U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetricBetaGaussian_2_20" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian_2_20" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian_2_20" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,20U > *)new ase::SymmetricBetaGaussian_p_h< 2U,20U >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_20U_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_2_20__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::SymmetricBetaGaussian_p_h< 2U,20U > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricBetaGaussian_2_20" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricBetaGaussian_2_20" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,20U > *)new ase::SymmetricBetaGaussian_p_h< 2U,20U >((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_20U_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_2_20(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricBetaGaussian_2_20", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SymmetricBetaGaussian_2_20__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SymmetricBetaGaussian_2_20__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricBetaGaussian_2_20'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,20U >::SymmetricBetaGaussian_p_h(double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,20U >::SymmetricBetaGaussian_p_h(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_20_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 2U,20U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 2U,20U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetricBetaGaussian_p_h< 2U,20U > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_20U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_2_20_clone" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 2U,20U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 2U,20U > * >(argp1);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,20U > *)((ase::SymmetricBetaGaussian_p_h< 2U,20U > const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_20U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricBetaGaussian_2_20(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 2U,20U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 2U,20U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_20U_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricBetaGaussian_2_20" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 2U,20U > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 2U,20U > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_20_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 2U,20U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 2U,20U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_20U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_2_20_classname" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 2U,20U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 2U,20U > * >(argp1);
  {
    try {
      result = ((ase::SymmetricBetaGaussian_p_h< 2U,20U > const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_20_minQuantileRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_2_20_minQuantileRatio", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 2U,20U >::SWIGTEMPLATEDISAMBIGUATOR minQuantileRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_20_minDescentDeltaRatio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_2_20_minDescentDeltaRatio" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 2U,20U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_20_minDescentDeltaRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 2U,20U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_20_minDescentDeltaRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_2_20_minDescentDeltaRatio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_SymmetricBetaGaussian_2_20_minDescentDeltaRatio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SymmetricBetaGaussian_2_20_minDescentDeltaRatio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_2_20_minDescentDeltaRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,20U >::minDescentDeltaRatio(double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,20U >::minDescentDeltaRatio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_20_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SymmetricBetaGaussian_p_h< 2U,20U > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_2_20_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_2_20_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_2_20_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_2_20_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,20U > *)ase::SymmetricBetaGaussian_p_h< 2U,20U >::SWIGTEMPLATEDISAMBIGUATOR fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_20U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_20_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 2U,20U > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_2_20_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_2_20_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_2_20_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_2_20_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,20U > *)ase::SymmetricBetaGaussian_p_h< 2U,20U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_20U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_20_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 2U,20U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_2_20_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_2_20_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_2_20_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,20U > *)ase::SymmetricBetaGaussian_p_h< 2U,20U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_20U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_20_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_2_20_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SymmetricBetaGaussian_2_20_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SymmetricBetaGaussian_2_20_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_2_20_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,20U >::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,20U >::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SymmetricBetaGaussian_2_20_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_20U_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricBetaGaussian_2_20_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_2_25__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 2U,25U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetricBetaGaussian_2_25" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian_2_25" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian_2_25" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,25U > *)new ase::SymmetricBetaGaussian_p_h< 2U,25U >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_25U_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_2_25__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::SymmetricBetaGaussian_p_h< 2U,25U > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricBetaGaussian_2_25" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricBetaGaussian_2_25" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,25U > *)new ase::SymmetricBetaGaussian_p_h< 2U,25U >((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_25U_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_2_25(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricBetaGaussian_2_25", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SymmetricBetaGaussian_2_25__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SymmetricBetaGaussian_2_25__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricBetaGaussian_2_25'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,25U >::SymmetricBetaGaussian_p_h(double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,25U >::SymmetricBetaGaussian_p_h(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_25_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 2U,25U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 2U,25U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetricBetaGaussian_p_h< 2U,25U > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_25U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_2_25_clone" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 2U,25U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 2U,25U > * >(argp1);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,25U > *)((ase::SymmetricBetaGaussian_p_h< 2U,25U > const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_25U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricBetaGaussian_2_25(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 2U,25U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 2U,25U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_25U_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricBetaGaussian_2_25" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 2U,25U > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 2U,25U > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_25_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 2U,25U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 2U,25U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_25U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_2_25_classname" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 2U,25U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 2U,25U > * >(argp1);
  {
    try {
      result = ((ase::SymmetricBetaGaussian_p_h< 2U,25U > const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_25_minQuantileRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_2_25_minQuantileRatio", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 2U,25U >::SWIGTEMPLATEDISAMBIGUATOR minQuantileRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_25_minDescentDeltaRatio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_2_25_minDescentDeltaRatio" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 2U,25U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_25_minDescentDeltaRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 2U,25U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_25_minDescentDeltaRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_2_25_minDescentDeltaRatio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_SymmetricBetaGaussian_2_25_minDescentDeltaRatio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SymmetricBetaGaussian_2_25_minDescentDeltaRatio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_2_25_minDescentDeltaRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,25U >::minDescentDeltaRatio(double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,25U >::minDescentDeltaRatio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_25_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SymmetricBetaGaussian_p_h< 2U,25U > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_2_25_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_2_25_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_2_25_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_2_25_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,25U > *)ase::SymmetricBetaGaussian_p_h< 2U,25U >::SWIGTEMPLATEDISAMBIGUATOR fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_25U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_25_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 2U,25U > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_2_25_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_2_25_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_2_25_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_2_25_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,25U > *)ase::SymmetricBetaGaussian_p_h< 2U,25U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_25U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_25_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 2U,25U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_2_25_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_2_25_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_2_25_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,25U > *)ase::SymmetricBetaGaussian_p_h< 2U,25U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_25U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_25_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_2_25_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SymmetricBetaGaussian_2_25_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SymmetricBetaGaussian_2_25_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_2_25_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,25U >::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,25U >::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SymmetricBetaGaussian_2_25_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_25U_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricBetaGaussian_2_25_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_2_30__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 2U,30U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetricBetaGaussian_2_30" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian_2_30" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian_2_30" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,30U > *)new ase::SymmetricBetaGaussian_p_h< 2U,30U >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_30U_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_2_30__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::SymmetricBetaGaussian_p_h< 2U,30U > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricBetaGaussian_2_30" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricBetaGaussian_2_30" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,30U > *)new ase::SymmetricBetaGaussian_p_h< 2U,30U >((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_30U_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_2_30(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricBetaGaussian_2_30", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SymmetricBetaGaussian_2_30__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SymmetricBetaGaussian_2_30__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricBetaGaussian_2_30'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,30U >::SymmetricBetaGaussian_p_h(double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,30U >::SymmetricBetaGaussian_p_h(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_30_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 2U,30U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 2U,30U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetricBetaGaussian_p_h< 2U,30U > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_30U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_2_30_clone" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 2U,30U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 2U,30U > * >(argp1);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,30U > *)((ase::SymmetricBetaGaussian_p_h< 2U,30U > const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_30U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricBetaGaussian_2_30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 2U,30U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 2U,30U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_30U_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricBetaGaussian_2_30" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 2U,30U > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 2U,30U > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_30_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 2U,30U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 2U,30U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_30U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_2_30_classname" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 2U,30U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 2U,30U > * >(argp1);
  {
    try {
      result = ((ase::SymmetricBetaGaussian_p_h< 2U,30U > const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_30_minQuantileRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_2_30_minQuantileRatio", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 2U,30U >::SWIGTEMPLATEDISAMBIGUATOR minQuantileRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_30_minDescentDeltaRatio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_2_30_minDescentDeltaRatio" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 2U,30U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_30_minDescentDeltaRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 2U,30U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_30_minDescentDeltaRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_2_30_minDescentDeltaRatio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_SymmetricBetaGaussian_2_30_minDescentDeltaRatio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SymmetricBetaGaussian_2_30_minDescentDeltaRatio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_2_30_minDescentDeltaRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,30U >::minDescentDeltaRatio(double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,30U >::minDescentDeltaRatio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_30_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SymmetricBetaGaussian_p_h< 2U,30U > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_2_30_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_2_30_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_2_30_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_2_30_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,30U > *)ase::SymmetricBetaGaussian_p_h< 2U,30U >::SWIGTEMPLATEDISAMBIGUATOR fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_30U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_30_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 2U,30U > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_2_30_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_2_30_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_2_30_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_2_30_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,30U > *)ase::SymmetricBetaGaussian_p_h< 2U,30U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_30U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_30_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 2U,30U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_2_30_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_2_30_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_2_30_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 2U,30U > *)ase::SymmetricBetaGaussian_p_h< 2U,30U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_30U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_2_30_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_2_30_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SymmetricBetaGaussian_2_30_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SymmetricBetaGaussian_2_30_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_2_30_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,30U >::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 2U,30U >::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SymmetricBetaGaussian_2_30_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_2U_30U_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricBetaGaussian_2_30_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_3_10__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 3U,10U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetricBetaGaussian_3_10" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian_3_10" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian_3_10" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,10U > *)new ase::SymmetricBetaGaussian_p_h< 3U,10U >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_10U_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_3_10__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::SymmetricBetaGaussian_p_h< 3U,10U > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricBetaGaussian_3_10" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricBetaGaussian_3_10" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,10U > *)new ase::SymmetricBetaGaussian_p_h< 3U,10U >((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_10U_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_3_10(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricBetaGaussian_3_10", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SymmetricBetaGaussian_3_10__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SymmetricBetaGaussian_3_10__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricBetaGaussian_3_10'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,10U >::SymmetricBetaGaussian_p_h(double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,10U >::SymmetricBetaGaussian_p_h(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_10_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 3U,10U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 3U,10U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetricBetaGaussian_p_h< 3U,10U > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_10U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_3_10_clone" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 3U,10U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 3U,10U > * >(argp1);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,10U > *)((ase::SymmetricBetaGaussian_p_h< 3U,10U > const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_10U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricBetaGaussian_3_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 3U,10U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 3U,10U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_10U_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricBetaGaussian_3_10" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 3U,10U > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 3U,10U > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_10_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 3U,10U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 3U,10U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_10U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_3_10_classname" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 3U,10U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 3U,10U > * >(argp1);
  {
    try {
      result = ((ase::SymmetricBetaGaussian_p_h< 3U,10U > const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_10_minQuantileRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_3_10_minQuantileRatio", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 3U,10U >::SWIGTEMPLATEDISAMBIGUATOR minQuantileRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_10_minDescentDeltaRatio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_3_10_minDescentDeltaRatio" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 3U,10U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_10_minDescentDeltaRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 3U,10U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_10_minDescentDeltaRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_3_10_minDescentDeltaRatio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_SymmetricBetaGaussian_3_10_minDescentDeltaRatio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SymmetricBetaGaussian_3_10_minDescentDeltaRatio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_3_10_minDescentDeltaRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,10U >::minDescentDeltaRatio(double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,10U >::minDescentDeltaRatio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_10_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SymmetricBetaGaussian_p_h< 3U,10U > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_3_10_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_3_10_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_3_10_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_3_10_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,10U > *)ase::SymmetricBetaGaussian_p_h< 3U,10U >::SWIGTEMPLATEDISAMBIGUATOR fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_10U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_10_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 3U,10U > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_3_10_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_3_10_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_3_10_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_3_10_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,10U > *)ase::SymmetricBetaGaussian_p_h< 3U,10U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_10U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_10_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 3U,10U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_3_10_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_3_10_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_3_10_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,10U > *)ase::SymmetricBetaGaussian_p_h< 3U,10U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_10U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_10_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_3_10_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SymmetricBetaGaussian_3_10_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SymmetricBetaGaussian_3_10_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_3_10_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,10U >::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,10U >::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SymmetricBetaGaussian_3_10_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_10U_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricBetaGaussian_3_10_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_3_15__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 3U,15U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetricBetaGaussian_3_15" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian_3_15" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian_3_15" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,15U > *)new ase::SymmetricBetaGaussian_p_h< 3U,15U >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_15U_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_3_15__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::SymmetricBetaGaussian_p_h< 3U,15U > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricBetaGaussian_3_15" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricBetaGaussian_3_15" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,15U > *)new ase::SymmetricBetaGaussian_p_h< 3U,15U >((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_15U_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_3_15(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricBetaGaussian_3_15", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SymmetricBetaGaussian_3_15__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SymmetricBetaGaussian_3_15__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricBetaGaussian_3_15'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,15U >::SymmetricBetaGaussian_p_h(double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,15U >::SymmetricBetaGaussian_p_h(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_15_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 3U,15U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 3U,15U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetricBetaGaussian_p_h< 3U,15U > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_15U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_3_15_clone" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 3U,15U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 3U,15U > * >(argp1);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,15U > *)((ase::SymmetricBetaGaussian_p_h< 3U,15U > const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_15U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricBetaGaussian_3_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 3U,15U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 3U,15U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_15U_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricBetaGaussian_3_15" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 3U,15U > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 3U,15U > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_15_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 3U,15U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 3U,15U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_15U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_3_15_classname" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 3U,15U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 3U,15U > * >(argp1);
  {
    try {
      result = ((ase::SymmetricBetaGaussian_p_h< 3U,15U > const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_15_minQuantileRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_3_15_minQuantileRatio", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 3U,15U >::SWIGTEMPLATEDISAMBIGUATOR minQuantileRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_15_minDescentDeltaRatio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_3_15_minDescentDeltaRatio" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 3U,15U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_15_minDescentDeltaRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 3U,15U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_15_minDescentDeltaRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_3_15_minDescentDeltaRatio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_SymmetricBetaGaussian_3_15_minDescentDeltaRatio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SymmetricBetaGaussian_3_15_minDescentDeltaRatio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_3_15_minDescentDeltaRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,15U >::minDescentDeltaRatio(double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,15U >::minDescentDeltaRatio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_15_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SymmetricBetaGaussian_p_h< 3U,15U > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_3_15_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_3_15_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_3_15_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_3_15_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,15U > *)ase::SymmetricBetaGaussian_p_h< 3U,15U >::SWIGTEMPLATEDISAMBIGUATOR fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_15U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_15_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 3U,15U > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_3_15_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_3_15_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_3_15_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_3_15_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,15U > *)ase::SymmetricBetaGaussian_p_h< 3U,15U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_15U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_15_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 3U,15U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_3_15_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_3_15_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_3_15_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,15U > *)ase::SymmetricBetaGaussian_p_h< 3U,15U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_15U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_15_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_3_15_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SymmetricBetaGaussian_3_15_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SymmetricBetaGaussian_3_15_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_3_15_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,15U >::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,15U >::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SymmetricBetaGaussian_3_15_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_15U_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricBetaGaussian_3_15_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_3_20__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 3U,20U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetricBetaGaussian_3_20" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian_3_20" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian_3_20" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,20U > *)new ase::SymmetricBetaGaussian_p_h< 3U,20U >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_20U_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_3_20__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::SymmetricBetaGaussian_p_h< 3U,20U > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricBetaGaussian_3_20" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricBetaGaussian_3_20" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,20U > *)new ase::SymmetricBetaGaussian_p_h< 3U,20U >((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_20U_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_3_20(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricBetaGaussian_3_20", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SymmetricBetaGaussian_3_20__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SymmetricBetaGaussian_3_20__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricBetaGaussian_3_20'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,20U >::SymmetricBetaGaussian_p_h(double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,20U >::SymmetricBetaGaussian_p_h(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_20_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 3U,20U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 3U,20U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetricBetaGaussian_p_h< 3U,20U > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_20U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_3_20_clone" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 3U,20U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 3U,20U > * >(argp1);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,20U > *)((ase::SymmetricBetaGaussian_p_h< 3U,20U > const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_20U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricBetaGaussian_3_20(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 3U,20U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 3U,20U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_20U_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricBetaGaussian_3_20" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 3U,20U > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 3U,20U > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_20_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 3U,20U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 3U,20U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_20U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_3_20_classname" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 3U,20U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 3U,20U > * >(argp1);
  {
    try {
      result = ((ase::SymmetricBetaGaussian_p_h< 3U,20U > const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_20_minQuantileRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_3_20_minQuantileRatio", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 3U,20U >::SWIGTEMPLATEDISAMBIGUATOR minQuantileRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_20_minDescentDeltaRatio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_3_20_minDescentDeltaRatio" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 3U,20U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_20_minDescentDeltaRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 3U,20U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_20_minDescentDeltaRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_3_20_minDescentDeltaRatio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_SymmetricBetaGaussian_3_20_minDescentDeltaRatio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SymmetricBetaGaussian_3_20_minDescentDeltaRatio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_3_20_minDescentDeltaRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,20U >::minDescentDeltaRatio(double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,20U >::minDescentDeltaRatio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_20_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SymmetricBetaGaussian_p_h< 3U,20U > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_3_20_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_3_20_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_3_20_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_3_20_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,20U > *)ase::SymmetricBetaGaussian_p_h< 3U,20U >::SWIGTEMPLATEDISAMBIGUATOR fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_20U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_20_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 3U,20U > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_3_20_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_3_20_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_3_20_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_3_20_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,20U > *)ase::SymmetricBetaGaussian_p_h< 3U,20U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_20U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_20_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 3U,20U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_3_20_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_3_20_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_3_20_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,20U > *)ase::SymmetricBetaGaussian_p_h< 3U,20U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_20U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_20_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_3_20_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SymmetricBetaGaussian_3_20_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SymmetricBetaGaussian_3_20_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_3_20_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,20U >::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,20U >::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SymmetricBetaGaussian_3_20_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_20U_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricBetaGaussian_3_20_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_3_25__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 3U,25U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetricBetaGaussian_3_25" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian_3_25" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian_3_25" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,25U > *)new ase::SymmetricBetaGaussian_p_h< 3U,25U >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_25U_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_3_25__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::SymmetricBetaGaussian_p_h< 3U,25U > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricBetaGaussian_3_25" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricBetaGaussian_3_25" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,25U > *)new ase::SymmetricBetaGaussian_p_h< 3U,25U >((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_25U_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_3_25(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricBetaGaussian_3_25", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SymmetricBetaGaussian_3_25__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SymmetricBetaGaussian_3_25__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricBetaGaussian_3_25'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,25U >::SymmetricBetaGaussian_p_h(double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,25U >::SymmetricBetaGaussian_p_h(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_25_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 3U,25U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 3U,25U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetricBetaGaussian_p_h< 3U,25U > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_25U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_3_25_clone" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 3U,25U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 3U,25U > * >(argp1);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,25U > *)((ase::SymmetricBetaGaussian_p_h< 3U,25U > const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_25U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricBetaGaussian_3_25(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 3U,25U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 3U,25U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_25U_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricBetaGaussian_3_25" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 3U,25U > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 3U,25U > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_25_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 3U,25U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 3U,25U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_25U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_3_25_classname" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 3U,25U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 3U,25U > * >(argp1);
  {
    try {
      result = ((ase::SymmetricBetaGaussian_p_h< 3U,25U > const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_25_minQuantileRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_3_25_minQuantileRatio", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 3U,25U >::SWIGTEMPLATEDISAMBIGUATOR minQuantileRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_25_minDescentDeltaRatio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_3_25_minDescentDeltaRatio" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 3U,25U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_25_minDescentDeltaRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 3U,25U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_25_minDescentDeltaRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_3_25_minDescentDeltaRatio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_SymmetricBetaGaussian_3_25_minDescentDeltaRatio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SymmetricBetaGaussian_3_25_minDescentDeltaRatio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_3_25_minDescentDeltaRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,25U >::minDescentDeltaRatio(double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,25U >::minDescentDeltaRatio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_25_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SymmetricBetaGaussian_p_h< 3U,25U > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_3_25_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_3_25_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_3_25_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_3_25_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,25U > *)ase::SymmetricBetaGaussian_p_h< 3U,25U >::SWIGTEMPLATEDISAMBIGUATOR fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_25U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_25_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 3U,25U > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_3_25_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_3_25_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_3_25_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_3_25_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,25U > *)ase::SymmetricBetaGaussian_p_h< 3U,25U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_25U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_25_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 3U,25U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_3_25_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_3_25_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_3_25_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,25U > *)ase::SymmetricBetaGaussian_p_h< 3U,25U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_25U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_25_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_3_25_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SymmetricBetaGaussian_3_25_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SymmetricBetaGaussian_3_25_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_3_25_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,25U >::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,25U >::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SymmetricBetaGaussian_3_25_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_25U_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricBetaGaussian_3_25_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_3_30__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 3U,30U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetricBetaGaussian_3_30" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian_3_30" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian_3_30" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,30U > *)new ase::SymmetricBetaGaussian_p_h< 3U,30U >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_30U_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_3_30__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::SymmetricBetaGaussian_p_h< 3U,30U > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricBetaGaussian_3_30" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricBetaGaussian_3_30" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,30U > *)new ase::SymmetricBetaGaussian_p_h< 3U,30U >((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_30U_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_3_30(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricBetaGaussian_3_30", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SymmetricBetaGaussian_3_30__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SymmetricBetaGaussian_3_30__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricBetaGaussian_3_30'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,30U >::SymmetricBetaGaussian_p_h(double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,30U >::SymmetricBetaGaussian_p_h(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_30_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 3U,30U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 3U,30U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetricBetaGaussian_p_h< 3U,30U > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_30U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_3_30_clone" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 3U,30U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 3U,30U > * >(argp1);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,30U > *)((ase::SymmetricBetaGaussian_p_h< 3U,30U > const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_30U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricBetaGaussian_3_30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 3U,30U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 3U,30U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_30U_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricBetaGaussian_3_30" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 3U,30U > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 3U,30U > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_30_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 3U,30U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 3U,30U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_30U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_3_30_classname" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 3U,30U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 3U,30U > * >(argp1);
  {
    try {
      result = ((ase::SymmetricBetaGaussian_p_h< 3U,30U > const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_30_minQuantileRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_3_30_minQuantileRatio", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 3U,30U >::SWIGTEMPLATEDISAMBIGUATOR minQuantileRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_30_minDescentDeltaRatio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_3_30_minDescentDeltaRatio" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 3U,30U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_30_minDescentDeltaRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 3U,30U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_30_minDescentDeltaRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_3_30_minDescentDeltaRatio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_SymmetricBetaGaussian_3_30_minDescentDeltaRatio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SymmetricBetaGaussian_3_30_minDescentDeltaRatio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_3_30_minDescentDeltaRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,30U >::minDescentDeltaRatio(double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,30U >::minDescentDeltaRatio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_30_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SymmetricBetaGaussian_p_h< 3U,30U > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_3_30_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_3_30_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_3_30_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_3_30_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,30U > *)ase::SymmetricBetaGaussian_p_h< 3U,30U >::SWIGTEMPLATEDISAMBIGUATOR fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_30U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_30_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 3U,30U > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_3_30_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_3_30_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_3_30_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_3_30_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,30U > *)ase::SymmetricBetaGaussian_p_h< 3U,30U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_30U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_30_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 3U,30U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_3_30_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_3_30_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_3_30_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 3U,30U > *)ase::SymmetricBetaGaussian_p_h< 3U,30U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_30U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_3_30_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_3_30_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SymmetricBetaGaussian_3_30_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SymmetricBetaGaussian_3_30_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_3_30_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,30U >::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 3U,30U >::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SymmetricBetaGaussian_3_30_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_3U_30U_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricBetaGaussian_3_30_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_4_10__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 4U,10U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetricBetaGaussian_4_10" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian_4_10" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian_4_10" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,10U > *)new ase::SymmetricBetaGaussian_p_h< 4U,10U >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_10U_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_4_10__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::SymmetricBetaGaussian_p_h< 4U,10U > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricBetaGaussian_4_10" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricBetaGaussian_4_10" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,10U > *)new ase::SymmetricBetaGaussian_p_h< 4U,10U >((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_10U_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_4_10(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricBetaGaussian_4_10", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SymmetricBetaGaussian_4_10__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SymmetricBetaGaussian_4_10__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricBetaGaussian_4_10'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,10U >::SymmetricBetaGaussian_p_h(double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,10U >::SymmetricBetaGaussian_p_h(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_10_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 4U,10U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 4U,10U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetricBetaGaussian_p_h< 4U,10U > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_10U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_4_10_clone" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 4U,10U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 4U,10U > * >(argp1);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,10U > *)((ase::SymmetricBetaGaussian_p_h< 4U,10U > const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_10U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricBetaGaussian_4_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 4U,10U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 4U,10U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_10U_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricBetaGaussian_4_10" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 4U,10U > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 4U,10U > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_10_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 4U,10U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 4U,10U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_10U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_4_10_classname" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 4U,10U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 4U,10U > * >(argp1);
  {
    try {
      result = ((ase::SymmetricBetaGaussian_p_h< 4U,10U > const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_10_minQuantileRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_4_10_minQuantileRatio", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 4U,10U >::SWIGTEMPLATEDISAMBIGUATOR minQuantileRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_10_minDescentDeltaRatio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_4_10_minDescentDeltaRatio" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 4U,10U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_10_minDescentDeltaRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 4U,10U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_10_minDescentDeltaRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_4_10_minDescentDeltaRatio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_SymmetricBetaGaussian_4_10_minDescentDeltaRatio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SymmetricBetaGaussian_4_10_minDescentDeltaRatio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_4_10_minDescentDeltaRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,10U >::minDescentDeltaRatio(double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,10U >::minDescentDeltaRatio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_10_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SymmetricBetaGaussian_p_h< 4U,10U > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_4_10_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_4_10_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_4_10_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_4_10_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,10U > *)ase::SymmetricBetaGaussian_p_h< 4U,10U >::SWIGTEMPLATEDISAMBIGUATOR fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_10U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_10_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 4U,10U > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_4_10_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_4_10_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_4_10_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_4_10_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,10U > *)ase::SymmetricBetaGaussian_p_h< 4U,10U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_10U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_10_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 4U,10U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_4_10_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_4_10_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_4_10_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,10U > *)ase::SymmetricBetaGaussian_p_h< 4U,10U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_10U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_10_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_4_10_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SymmetricBetaGaussian_4_10_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SymmetricBetaGaussian_4_10_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_4_10_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,10U >::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,10U >::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SymmetricBetaGaussian_4_10_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_10U_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricBetaGaussian_4_10_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_4_15__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 4U,15U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetricBetaGaussian_4_15" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian_4_15" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian_4_15" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,15U > *)new ase::SymmetricBetaGaussian_p_h< 4U,15U >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_15U_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_4_15__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::SymmetricBetaGaussian_p_h< 4U,15U > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricBetaGaussian_4_15" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricBetaGaussian_4_15" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,15U > *)new ase::SymmetricBetaGaussian_p_h< 4U,15U >((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_15U_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_4_15(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricBetaGaussian_4_15", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SymmetricBetaGaussian_4_15__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SymmetricBetaGaussian_4_15__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricBetaGaussian_4_15'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,15U >::SymmetricBetaGaussian_p_h(double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,15U >::SymmetricBetaGaussian_p_h(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_15_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 4U,15U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 4U,15U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetricBetaGaussian_p_h< 4U,15U > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_15U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_4_15_clone" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 4U,15U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 4U,15U > * >(argp1);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,15U > *)((ase::SymmetricBetaGaussian_p_h< 4U,15U > const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_15U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricBetaGaussian_4_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 4U,15U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 4U,15U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_15U_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricBetaGaussian_4_15" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 4U,15U > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 4U,15U > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_15_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 4U,15U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 4U,15U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_15U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_4_15_classname" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 4U,15U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 4U,15U > * >(argp1);
  {
    try {
      result = ((ase::SymmetricBetaGaussian_p_h< 4U,15U > const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_15_minQuantileRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_4_15_minQuantileRatio", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 4U,15U >::SWIGTEMPLATEDISAMBIGUATOR minQuantileRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_15_minDescentDeltaRatio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_4_15_minDescentDeltaRatio" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 4U,15U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_15_minDescentDeltaRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 4U,15U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_15_minDescentDeltaRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_4_15_minDescentDeltaRatio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_SymmetricBetaGaussian_4_15_minDescentDeltaRatio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SymmetricBetaGaussian_4_15_minDescentDeltaRatio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_4_15_minDescentDeltaRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,15U >::minDescentDeltaRatio(double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,15U >::minDescentDeltaRatio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_15_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SymmetricBetaGaussian_p_h< 4U,15U > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_4_15_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_4_15_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_4_15_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_4_15_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,15U > *)ase::SymmetricBetaGaussian_p_h< 4U,15U >::SWIGTEMPLATEDISAMBIGUATOR fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_15U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_15_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 4U,15U > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_4_15_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_4_15_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_4_15_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_4_15_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,15U > *)ase::SymmetricBetaGaussian_p_h< 4U,15U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_15U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_15_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 4U,15U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_4_15_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_4_15_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_4_15_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,15U > *)ase::SymmetricBetaGaussian_p_h< 4U,15U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_15U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_15_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_4_15_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SymmetricBetaGaussian_4_15_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SymmetricBetaGaussian_4_15_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_4_15_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,15U >::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,15U >::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SymmetricBetaGaussian_4_15_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_15U_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricBetaGaussian_4_15_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_4_20__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 4U,20U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetricBetaGaussian_4_20" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian_4_20" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian_4_20" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,20U > *)new ase::SymmetricBetaGaussian_p_h< 4U,20U >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_20U_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_4_20__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::SymmetricBetaGaussian_p_h< 4U,20U > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricBetaGaussian_4_20" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricBetaGaussian_4_20" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,20U > *)new ase::SymmetricBetaGaussian_p_h< 4U,20U >((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_20U_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_4_20(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricBetaGaussian_4_20", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SymmetricBetaGaussian_4_20__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SymmetricBetaGaussian_4_20__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricBetaGaussian_4_20'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,20U >::SymmetricBetaGaussian_p_h(double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,20U >::SymmetricBetaGaussian_p_h(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_20_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 4U,20U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 4U,20U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetricBetaGaussian_p_h< 4U,20U > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_20U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_4_20_clone" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 4U,20U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 4U,20U > * >(argp1);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,20U > *)((ase::SymmetricBetaGaussian_p_h< 4U,20U > const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_20U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricBetaGaussian_4_20(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 4U,20U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 4U,20U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_20U_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricBetaGaussian_4_20" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 4U,20U > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 4U,20U > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_20_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 4U,20U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 4U,20U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_20U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_4_20_classname" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 4U,20U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 4U,20U > * >(argp1);
  {
    try {
      result = ((ase::SymmetricBetaGaussian_p_h< 4U,20U > const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_20_minQuantileRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_4_20_minQuantileRatio", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 4U,20U >::SWIGTEMPLATEDISAMBIGUATOR minQuantileRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_20_minDescentDeltaRatio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_4_20_minDescentDeltaRatio" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 4U,20U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_20_minDescentDeltaRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 4U,20U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_20_minDescentDeltaRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_4_20_minDescentDeltaRatio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_SymmetricBetaGaussian_4_20_minDescentDeltaRatio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SymmetricBetaGaussian_4_20_minDescentDeltaRatio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_4_20_minDescentDeltaRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,20U >::minDescentDeltaRatio(double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,20U >::minDescentDeltaRatio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_20_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SymmetricBetaGaussian_p_h< 4U,20U > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_4_20_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_4_20_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_4_20_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_4_20_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,20U > *)ase::SymmetricBetaGaussian_p_h< 4U,20U >::SWIGTEMPLATEDISAMBIGUATOR fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_20U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_20_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 4U,20U > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_4_20_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_4_20_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_4_20_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_4_20_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,20U > *)ase::SymmetricBetaGaussian_p_h< 4U,20U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_20U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_20_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 4U,20U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_4_20_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_4_20_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_4_20_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,20U > *)ase::SymmetricBetaGaussian_p_h< 4U,20U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_20U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_20_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_4_20_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SymmetricBetaGaussian_4_20_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SymmetricBetaGaussian_4_20_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_4_20_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,20U >::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,20U >::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SymmetricBetaGaussian_4_20_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_20U_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricBetaGaussian_4_20_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_4_25__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 4U,25U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetricBetaGaussian_4_25" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian_4_25" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian_4_25" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,25U > *)new ase::SymmetricBetaGaussian_p_h< 4U,25U >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_25U_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_4_25__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::SymmetricBetaGaussian_p_h< 4U,25U > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricBetaGaussian_4_25" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricBetaGaussian_4_25" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,25U > *)new ase::SymmetricBetaGaussian_p_h< 4U,25U >((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_25U_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_4_25(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricBetaGaussian_4_25", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SymmetricBetaGaussian_4_25__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SymmetricBetaGaussian_4_25__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricBetaGaussian_4_25'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,25U >::SymmetricBetaGaussian_p_h(double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,25U >::SymmetricBetaGaussian_p_h(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_25_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 4U,25U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 4U,25U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetricBetaGaussian_p_h< 4U,25U > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_25U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_4_25_clone" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 4U,25U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 4U,25U > * >(argp1);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,25U > *)((ase::SymmetricBetaGaussian_p_h< 4U,25U > const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_25U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricBetaGaussian_4_25(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 4U,25U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 4U,25U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_25U_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricBetaGaussian_4_25" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 4U,25U > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 4U,25U > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_25_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 4U,25U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 4U,25U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_25U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_4_25_classname" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 4U,25U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 4U,25U > * >(argp1);
  {
    try {
      result = ((ase::SymmetricBetaGaussian_p_h< 4U,25U > const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_25_minQuantileRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_4_25_minQuantileRatio", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 4U,25U >::SWIGTEMPLATEDISAMBIGUATOR minQuantileRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_25_minDescentDeltaRatio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_4_25_minDescentDeltaRatio" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 4U,25U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_25_minDescentDeltaRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 4U,25U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_25_minDescentDeltaRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_4_25_minDescentDeltaRatio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_SymmetricBetaGaussian_4_25_minDescentDeltaRatio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SymmetricBetaGaussian_4_25_minDescentDeltaRatio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_4_25_minDescentDeltaRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,25U >::minDescentDeltaRatio(double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,25U >::minDescentDeltaRatio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_25_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SymmetricBetaGaussian_p_h< 4U,25U > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_4_25_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_4_25_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_4_25_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_4_25_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,25U > *)ase::SymmetricBetaGaussian_p_h< 4U,25U >::SWIGTEMPLATEDISAMBIGUATOR fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_25U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_25_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 4U,25U > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_4_25_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_4_25_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_4_25_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_4_25_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,25U > *)ase::SymmetricBetaGaussian_p_h< 4U,25U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_25U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_25_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 4U,25U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_4_25_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_4_25_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_4_25_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,25U > *)ase::SymmetricBetaGaussian_p_h< 4U,25U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_25U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_25_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_4_25_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SymmetricBetaGaussian_4_25_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SymmetricBetaGaussian_4_25_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_4_25_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,25U >::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,25U >::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SymmetricBetaGaussian_4_25_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_25U_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricBetaGaussian_4_25_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_4_30__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 4U,30U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetricBetaGaussian_4_30" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetricBetaGaussian_4_30" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetricBetaGaussian_4_30" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,30U > *)new ase::SymmetricBetaGaussian_p_h< 4U,30U >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_30U_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_4_30__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  ase::SymmetricBetaGaussian_p_h< 4U,30U > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymmetricBetaGaussian_4_30" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymmetricBetaGaussian_4_30" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,30U > *)new ase::SymmetricBetaGaussian_p_h< 4U,30U >((std::vector< double,std::allocator< double > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_30U_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetricBetaGaussian_4_30(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SymmetricBetaGaussian_4_30", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SymmetricBetaGaussian_4_30__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SymmetricBetaGaussian_4_30__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SymmetricBetaGaussian_4_30'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,30U >::SymmetricBetaGaussian_p_h(double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,30U >::SymmetricBetaGaussian_p_h(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_30_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 4U,30U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 4U,30U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetricBetaGaussian_p_h< 4U,30U > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_30U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_4_30_clone" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 4U,30U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 4U,30U > * >(argp1);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,30U > *)((ase::SymmetricBetaGaussian_p_h< 4U,30U > const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_30U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetricBetaGaussian_4_30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 4U,30U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 4U,30U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_30U_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetricBetaGaussian_4_30" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 4U,30U > *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 4U,30U > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_30_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetricBetaGaussian_p_h< 4U,30U > *arg1 = (ase::SymmetricBetaGaussian_p_h< 4U,30U > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_30U_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetricBetaGaussian_4_30_classname" "', argument " "1"" of type '" "ase::SymmetricBetaGaussian_p_h< 4U,30U > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetricBetaGaussian_p_h< 4U,30U > * >(argp1);
  {
    try {
      result = ((ase::SymmetricBetaGaussian_p_h< 4U,30U > const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_30_minQuantileRatio(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_4_30_minQuantileRatio", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 4U,30U >::SWIGTEMPLATEDISAMBIGUATOR minQuantileRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_30_minDescentDeltaRatio__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  std::pair< double,double > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_4_30_minDescentDeltaRatio" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 4U,30U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_30_minDescentDeltaRatio__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< double,double > result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = ase::SymmetricBetaGaussian_p_h< 4U,30U >::SWIGTEMPLATEDISAMBIGUATOR minDescentDeltaRatio();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< double,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_30_minDescentDeltaRatio(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_4_30_minDescentDeltaRatio", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_SymmetricBetaGaussian_4_30_minDescentDeltaRatio__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_SymmetricBetaGaussian_4_30_minDescentDeltaRatio__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_4_30_minDescentDeltaRatio'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,30U >::minDescentDeltaRatio(double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,30U >::minDescentDeltaRatio()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_30_fromQuantiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SymmetricBetaGaussian_p_h< 4U,30U > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_4_30_fromQuantiles", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_4_30_fromQuantiles" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_4_30_fromQuantiles" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_4_30_fromQuantiles" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,30U > *)ase::SymmetricBetaGaussian_p_h< 4U,30U >::SWIGTEMPLATEDISAMBIGUATOR fromQuantilesBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_30U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_30_fromModeAndDeltas__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 4U,30U > *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_4_30_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_4_30_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_4_30_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SymmetricBetaGaussian_4_30_fromModeAndDeltas" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,30U > *)ase::SymmetricBetaGaussian_p_h< 4U,30U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_30U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_30_fromModeAndDeltas__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::SymmetricBetaGaussian_p_h< 4U,30U > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SymmetricBetaGaussian_4_30_fromModeAndDeltas" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SymmetricBetaGaussian_4_30_fromModeAndDeltas" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SymmetricBetaGaussian_4_30_fromModeAndDeltas" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetricBetaGaussian_p_h< 4U,30U > *)ase::SymmetricBetaGaussian_p_h< 4U,30U >::SWIGTEMPLATEDISAMBIGUATOR fromModeAndDeltasBarePtr(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_30U_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetricBetaGaussian_4_30_fromModeAndDeltas(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SymmetricBetaGaussian_4_30_fromModeAndDeltas", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SymmetricBetaGaussian_4_30_fromModeAndDeltas__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SymmetricBetaGaussian_4_30_fromModeAndDeltas__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SymmetricBetaGaussian_4_30_fromModeAndDeltas'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,30U >::fromModeAndDeltasBarePtr(double const,double const,double const,double const)\n"
    "    ase::SymmetricBetaGaussian_p_h< 4U,30U >::fromModeAndDeltasBarePtr(double const,double const,double const)\n");
  return 0;
}


SWIGINTERN PyObject *SymmetricBetaGaussian_4_30_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetricBetaGaussian_p_hT_4U_30U_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetricBetaGaussian_4_30_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_arrayCumulants(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[2] ;
  std::vector< double,std::allocator< double > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "arrayCumulants", 2, 2, swig_obj)) SWIG_fail;
  {
    npy_intp size[1] = {
      -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(swig_obj[0],
      NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    arg1 = (double*) array_data(array1);
    arg2 = (int) array_size(array1,0);
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "arrayCumulants" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = ase::swigArrayCumulants((double const *)arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_densityIntegralGL__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "densityIntegralGL" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "densityIntegralGL" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "densityIntegralGL" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "densityIntegralGL" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "densityIntegralGL" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "densityIntegralGL" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  {
    try {
      result = (double)ase::densityIntegralGL((ase::AbsDistributionModel1D const &)*arg1,arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_densityIntegralGL__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  double result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "densityIntegralGL" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "densityIntegralGL" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "densityIntegralGL" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "densityIntegralGL" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "densityIntegralGL" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (double)ase::densityIntegralGL((ase::AbsDistributionModel1D const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_densityIntegralGL(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "densityIntegralGL", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_densityIntegralGL__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_densityIntegralGL__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'densityIntegralGL'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::densityIntegralGL(ase::AbsDistributionModel1D const &,double,double,unsigned int,unsigned int)\n"
    "    ase::densityIntegralGL(ase::AbsDistributionModel1D const &,double,double,unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_TabulatedDensity1D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  ase::TabulatedDensity1D *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TabulatedDensity1D" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TabulatedDensity1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_TabulatedDensity1D" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TabulatedDensity1D" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (ase::TabulatedDensity1D *)new ase::TabulatedDensity1D(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__TabulatedDensity1D, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TabulatedDensity1D_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TabulatedDensity1D *arg1 = (ase::TabulatedDensity1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::TabulatedDensity1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TabulatedDensity1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TabulatedDensity1D_clone" "', argument " "1"" of type '" "ase::TabulatedDensity1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TabulatedDensity1D * >(argp1);
  {
    try {
      result = (ase::TabulatedDensity1D *)((ase::TabulatedDensity1D const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__TabulatedDensity1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TabulatedDensity1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TabulatedDensity1D *arg1 = (ase::TabulatedDensity1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TabulatedDensity1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TabulatedDensity1D" "', argument " "1"" of type '" "ase::TabulatedDensity1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::TabulatedDensity1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TabulatedDensity1D_isUnimodal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TabulatedDensity1D *arg1 = (ase::TabulatedDensity1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TabulatedDensity1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TabulatedDensity1D_isUnimodal" "', argument " "1"" of type '" "ase::TabulatedDensity1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TabulatedDensity1D * >(argp1);
  {
    try {
      result = (bool)((ase::TabulatedDensity1D const *)arg1)->isUnimodal();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TabulatedDensity1D_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TabulatedDensity1D *arg1 = (ase::TabulatedDensity1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TabulatedDensity1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TabulatedDensity1D_classname" "', argument " "1"" of type '" "ase::TabulatedDensity1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TabulatedDensity1D * >(argp1);
  {
    try {
      result = ((ase::TabulatedDensity1D const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TabulatedDensity1D_entropy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TabulatedDensity1D *arg1 = (ase::TabulatedDensity1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TabulatedDensity1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TabulatedDensity1D_entropy" "', argument " "1"" of type '" "ase::TabulatedDensity1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TabulatedDensity1D * >(argp1);
  {
    try {
      result = (double)((ase::TabulatedDensity1D const *)arg1)->entropy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TabulatedDensity1D_nCoords(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TabulatedDensity1D *arg1 = (ase::TabulatedDensity1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TabulatedDensity1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TabulatedDensity1D_nCoords" "', argument " "1"" of type '" "ase::TabulatedDensity1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TabulatedDensity1D * >(argp1);
  {
    try {
      result = (unsigned int)((ase::TabulatedDensity1D const *)arg1)->nCoords();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TabulatedDensity1D__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  unsigned int arg3 ;
  asepy::PyFunctor1 *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  ase::TabulatedDensity1D *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TabulatedDensity1D" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TabulatedDensity1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TabulatedDensity1D" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_asepy__PyFunctor1,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_TabulatedDensity1D" "', argument " "4"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TabulatedDensity1D" "', argument " "4"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  arg4 = reinterpret_cast< asepy::PyFunctor1 * >(argp4);
  {
    try {
      result = (ase::TabulatedDensity1D *)new ase::TabulatedDensity1D(arg1,arg2,arg3,(asepy::PyFunctor1 const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__TabulatedDensity1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TabulatedDensity1D__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  unsigned int arg3 ;
  ase::NumericalConvolution *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  ase::TabulatedDensity1D *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TabulatedDensity1D" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TabulatedDensity1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TabulatedDensity1D" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_ase__NumericalConvolution,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_TabulatedDensity1D" "', argument " "4"" of type '" "ase::NumericalConvolution const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TabulatedDensity1D" "', argument " "4"" of type '" "ase::NumericalConvolution const &""'"); 
  }
  arg4 = reinterpret_cast< ase::NumericalConvolution * >(argp4);
  {
    try {
      result = (ase::TabulatedDensity1D *)new ase::TabulatedDensity1D(arg1,arg2,arg3,(ase::NumericalConvolution const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__TabulatedDensity1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TabulatedDensity1D__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  unsigned int arg3 ;
  ase::GaussianConvolution *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  ase::TabulatedDensity1D *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TabulatedDensity1D" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TabulatedDensity1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TabulatedDensity1D" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_ase__GaussianConvolution,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_TabulatedDensity1D" "', argument " "4"" of type '" "ase::GaussianConvolution const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TabulatedDensity1D" "', argument " "4"" of type '" "ase::GaussianConvolution const &""'"); 
  }
  arg4 = reinterpret_cast< ase::GaussianConvolution * >(argp4);
  {
    try {
      result = (ase::TabulatedDensity1D *)new ase::TabulatedDensity1D(arg1,arg2,arg3,(ase::GaussianConvolution const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__TabulatedDensity1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TabulatedDensity1D__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  unsigned int arg3 ;
  ase::DensityFunctor1D *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  ase::TabulatedDensity1D *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TabulatedDensity1D" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TabulatedDensity1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TabulatedDensity1D" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_ase__DensityFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_TabulatedDensity1D" "', argument " "4"" of type '" "ase::DensityFunctor1D const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TabulatedDensity1D" "', argument " "4"" of type '" "ase::DensityFunctor1D const &""'"); 
  }
  arg4 = reinterpret_cast< ase::DensityFunctor1D * >(argp4);
  {
    try {
      result = (ase::TabulatedDensity1D *)new ase::TabulatedDensity1D(arg1,arg2,arg3,(ase::DensityFunctor1D const &)*arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__TabulatedDensity1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TabulatedDensity1D(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_TabulatedDensity1D", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_TabulatedDensity1D__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_asepy__PyFunctor1, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_TabulatedDensity1D__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ase__NumericalConvolution, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_TabulatedDensity1D__SWIG_3(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ase__GaussianConvolution, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_TabulatedDensity1D__SWIG_4(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_ase__DensityFunctor1D, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_TabulatedDensity1D__SWIG_5(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_TabulatedDensity1D'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::TabulatedDensity1D::TabulatedDensity1D(double const,double const,std::vector< double,std::allocator< double > > const &)\n"
    "    ase::TabulatedDensity1D::TabulatedDensity1D(double const,double const,unsigned int const,asepy::PyFunctor1 const &)\n"
    "    ase::TabulatedDensity1D::TabulatedDensity1D(double const,double const,unsigned int const,ase::NumericalConvolution const &)\n"
    "    ase::TabulatedDensity1D::TabulatedDensity1D(double const,double const,unsigned int const,ase::GaussianConvolution const &)\n"
    "    ase::TabulatedDensity1D::TabulatedDensity1D(double const,double const,unsigned int const,ase::DensityFunctor1D const &)\n");
  return 0;
}


SWIGINTERN PyObject *TabulatedDensity1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__TabulatedDensity1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TabulatedDensity1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LikelihoodAccumulator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_LikelihoodAccumulator", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (ase::LikelihoodAccumulator *)new ase::LikelihoodAccumulator();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LikelihoodAccumulator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LikelihoodAccumulator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *arg1 = (ase::LikelihoodAccumulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodAccumulator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LikelihoodAccumulator" "', argument " "1"" of type '" "ase::LikelihoodAccumulator *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodAccumulator * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodAccumulator_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *arg1 = (ase::LikelihoodAccumulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::LikelihoodAccumulator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodAccumulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodAccumulator_clone" "', argument " "1"" of type '" "ase::LikelihoodAccumulator const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodAccumulator * >(argp1);
  {
    try {
      result = (ase::LikelihoodAccumulator *)((ase::LikelihoodAccumulator const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LikelihoodAccumulator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodAccumulator_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *arg1 = (ase::LikelihoodAccumulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodAccumulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodAccumulator_empty" "', argument " "1"" of type '" "ase::LikelihoodAccumulator const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodAccumulator * >(argp1);
  {
    try {
      result = (bool)((ase::LikelihoodAccumulator const *)arg1)->empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodAccumulator_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *arg1 = (ase::LikelihoodAccumulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodAccumulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodAccumulator_size" "', argument " "1"" of type '" "ase::LikelihoodAccumulator const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodAccumulator * >(argp1);
  {
    try {
      result = (unsigned int)((ase::LikelihoodAccumulator const *)arg1)->size();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodAccumulator_getCurve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *arg1 = (ase::LikelihoodAccumulator *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< ase::LikelihoodCurveCopy > result;
  
  if (!SWIG_Python_UnpackTuple(args, "LikelihoodAccumulator_getCurve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodAccumulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodAccumulator_getCurve" "', argument " "1"" of type '" "ase::LikelihoodAccumulator const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodAccumulator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LikelihoodAccumulator_getCurve" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((ase::LikelihoodAccumulator const *)arg1)->getCurve(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::LikelihoodCurveCopy(static_cast< const ase::LikelihoodCurveCopy& >(result))), SWIGTYPE_p_ase__LikelihoodCurveCopy, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodAccumulator_factor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *arg1 = (ase::LikelihoodAccumulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodAccumulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodAccumulator_factor" "', argument " "1"" of type '" "ase::LikelihoodAccumulator const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodAccumulator * >(argp1);
  {
    try {
      result = (double)((ase::LikelihoodAccumulator const *)arg1)->factor();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodAccumulator_accumulate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *arg1 = (ase::LikelihoodAccumulator *) 0 ;
  ase::AbsLogLikelihoodCurve *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LikelihoodAccumulator_accumulate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodAccumulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodAccumulator_accumulate" "', argument " "1"" of type '" "ase::LikelihoodAccumulator *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodAccumulator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsLogLikelihoodCurve,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LikelihoodAccumulator_accumulate" "', argument " "2"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LikelihoodAccumulator_accumulate" "', argument " "2"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp2);
  {
    try {
      (arg1)->accumulate((ase::AbsLogLikelihoodCurve const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodAccumulator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *arg1 = (ase::LikelihoodAccumulator *) 0 ;
  ase::AbsLogLikelihoodCurve *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::LikelihoodAccumulator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "LikelihoodAccumulator___iadd__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodAccumulator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodAccumulator___iadd__" "', argument " "1"" of type '" "ase::LikelihoodAccumulator *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodAccumulator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsLogLikelihoodCurve,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LikelihoodAccumulator___iadd__" "', argument " "2"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LikelihoodAccumulator___iadd__" "', argument " "2"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp2);
  {
    try {
      result = (ase::LikelihoodAccumulator *) &(arg1)->operator +=((ase::AbsLogLikelihoodCurve const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LikelihoodAccumulator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodAccumulator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *arg1 = (ase::LikelihoodAccumulator *) 0 ;
  ase::AbsLogLikelihoodCurve *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::LikelihoodAccumulator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "LikelihoodAccumulator___isub__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodAccumulator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodAccumulator___isub__" "', argument " "1"" of type '" "ase::LikelihoodAccumulator *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodAccumulator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsLogLikelihoodCurve,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LikelihoodAccumulator___isub__" "', argument " "2"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LikelihoodAccumulator___isub__" "', argument " "2"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp2);
  {
    try {
      result = (ase::LikelihoodAccumulator *) &(arg1)->operator -=((ase::AbsLogLikelihoodCurve const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LikelihoodAccumulator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodAccumulator_parMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *arg1 = (ase::LikelihoodAccumulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodAccumulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodAccumulator_parMin" "', argument " "1"" of type '" "ase::LikelihoodAccumulator const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodAccumulator * >(argp1);
  {
    try {
      result = (double)((ase::LikelihoodAccumulator const *)arg1)->parMin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodAccumulator_parMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *arg1 = (ase::LikelihoodAccumulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodAccumulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodAccumulator_parMax" "', argument " "1"" of type '" "ase::LikelihoodAccumulator const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodAccumulator * >(argp1);
  {
    try {
      result = (double)((ase::LikelihoodAccumulator const *)arg1)->parMax();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodAccumulator_location(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *arg1 = (ase::LikelihoodAccumulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodAccumulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodAccumulator_location" "', argument " "1"" of type '" "ase::LikelihoodAccumulator const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodAccumulator * >(argp1);
  {
    try {
      result = (double)((ase::LikelihoodAccumulator const *)arg1)->location();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodAccumulator_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *arg1 = (ase::LikelihoodAccumulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodAccumulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodAccumulator_stepSize" "', argument " "1"" of type '" "ase::LikelihoodAccumulator const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodAccumulator * >(argp1);
  {
    try {
      result = (double)((ase::LikelihoodAccumulator const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodAccumulator_maximum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *arg1 = (ase::LikelihoodAccumulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodAccumulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodAccumulator_maximum" "', argument " "1"" of type '" "ase::LikelihoodAccumulator const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodAccumulator * >(argp1);
  {
    try {
      result = (double)((ase::LikelihoodAccumulator const *)arg1)->maximum();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodAccumulator_argmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *arg1 = (ase::LikelihoodAccumulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodAccumulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodAccumulator_argmax" "', argument " "1"" of type '" "ase::LikelihoodAccumulator const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodAccumulator * >(argp1);
  {
    try {
      result = (double)((ase::LikelihoodAccumulator const *)arg1)->argmax();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodAccumulator___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *arg1 = (ase::LikelihoodAccumulator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LikelihoodAccumulator___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodAccumulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodAccumulator___call__" "', argument " "1"" of type '" "ase::LikelihoodAccumulator const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodAccumulator * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LikelihoodAccumulator___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::LikelihoodAccumulator const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodAccumulator_derivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *arg1 = (ase::LikelihoodAccumulator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LikelihoodAccumulator_derivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodAccumulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodAccumulator_derivative" "', argument " "1"" of type '" "ase::LikelihoodAccumulator const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodAccumulator * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LikelihoodAccumulator_derivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::LikelihoodAccumulator const *)arg1)->derivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodAccumulator_secondDerivative__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *arg1 = (ase::LikelihoodAccumulator *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodAccumulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodAccumulator_secondDerivative" "', argument " "1"" of type '" "ase::LikelihoodAccumulator const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodAccumulator * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LikelihoodAccumulator_secondDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LikelihoodAccumulator_secondDerivative" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::LikelihoodAccumulator const *)arg1)->secondDerivative(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodAccumulator_secondDerivative__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *arg1 = (ase::LikelihoodAccumulator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodAccumulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodAccumulator_secondDerivative" "', argument " "1"" of type '" "ase::LikelihoodAccumulator const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodAccumulator * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LikelihoodAccumulator_secondDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::LikelihoodAccumulator const *)arg1)->secondDerivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodAccumulator_secondDerivative(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LikelihoodAccumulator_secondDerivative", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__LikelihoodAccumulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LikelihoodAccumulator_secondDerivative__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__LikelihoodAccumulator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LikelihoodAccumulator_secondDerivative__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LikelihoodAccumulator_secondDerivative'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::LikelihoodAccumulator::secondDerivative(double,double) const\n"
    "    ase::LikelihoodAccumulator::secondDerivative(double) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LikelihoodAccumulator_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *arg1 = (ase::LikelihoodAccumulator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodAccumulator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodAccumulator_classname" "', argument " "1"" of type '" "ase::LikelihoodAccumulator const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodAccumulator * >(argp1);
  {
    try {
      result = ((ase::LikelihoodAccumulator const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LikelihoodAccumulator___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LikelihoodAccumulator *arg1 = (ase::LikelihoodAccumulator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::AbsLogLikelihoodCurve *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "LikelihoodAccumulator___imul__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LikelihoodAccumulator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LikelihoodAccumulator___imul__" "', argument " "1"" of type '" "ase::LikelihoodAccumulator *""'"); 
  }
  arg1 = reinterpret_cast< ase::LikelihoodAccumulator * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LikelihoodAccumulator___imul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (ase::AbsLogLikelihoodCurve *) &(arg1)->operator *=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__AbsLogLikelihoodCurve, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LikelihoodAccumulator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__LikelihoodAccumulator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LikelihoodAccumulator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_AbsShiftableLogli(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AbsShiftableLogli" "', argument " "1"" of type '" "ase::AbsShiftableLogli *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::AbsShiftableLogli *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli_clone" "', argument " "1"" of type '" "ase::AbsShiftableLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  {
    try {
      result = (ase::AbsShiftableLogli *)((ase::AbsShiftableLogli const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__AbsShiftableLogli, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_shift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli_shift" "', argument " "1"" of type '" "ase::AbsShiftableLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  {
    try {
      result = (double)((ase::AbsShiftableLogli const *)arg1)->shift();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_factor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli_factor" "', argument " "1"" of type '" "ase::AbsShiftableLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  {
    try {
      result = (double)((ase::AbsShiftableLogli const *)arg1)->factor();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_setShift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsShiftableLogli_setShift", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli_setShift" "', argument " "1"" of type '" "ase::AbsShiftableLogli *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsShiftableLogli_setShift" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setShift(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_setFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsShiftableLogli_setFactor", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli_setFactor" "', argument " "1"" of type '" "ase::AbsShiftableLogli *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsShiftableLogli_setFactor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->setFactor(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_parMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli_parMin" "', argument " "1"" of type '" "ase::AbsShiftableLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  {
    try {
      result = (double)((ase::AbsShiftableLogli const *)arg1)->parMin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_parMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli_parMax" "', argument " "1"" of type '" "ase::AbsShiftableLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  {
    try {
      result = (double)((ase::AbsShiftableLogli const *)arg1)->parMax();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_location(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli_location" "', argument " "1"" of type '" "ase::AbsShiftableLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  {
    try {
      result = (double)((ase::AbsShiftableLogli const *)arg1)->location();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli_stepSize" "', argument " "1"" of type '" "ase::AbsShiftableLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  {
    try {
      result = (double)((ase::AbsShiftableLogli const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_maximum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli_maximum" "', argument " "1"" of type '" "ase::AbsShiftableLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  {
    try {
      result = (double)((ase::AbsShiftableLogli const *)arg1)->maximum();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_argmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli_argmax" "', argument " "1"" of type '" "ase::AbsShiftableLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  {
    try {
      result = (double)((ase::AbsShiftableLogli const *)arg1)->argmax();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsShiftableLogli___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli___call__" "', argument " "1"" of type '" "ase::AbsShiftableLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsShiftableLogli___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsShiftableLogli const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_derivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsShiftableLogli_derivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli_derivative" "', argument " "1"" of type '" "ase::AbsShiftableLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsShiftableLogli_derivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsShiftableLogli const *)arg1)->derivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_secondDerivative__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli_secondDerivative" "', argument " "1"" of type '" "ase::AbsShiftableLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsShiftableLogli_secondDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbsShiftableLogli_secondDerivative" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::AbsShiftableLogli const *)arg1)->secondDerivative(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_secondDerivative__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli_secondDerivative" "', argument " "1"" of type '" "ase::AbsShiftableLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsShiftableLogli_secondDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsShiftableLogli const *)arg1)->secondDerivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_secondDerivative(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AbsShiftableLogli_secondDerivative", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsShiftableLogli, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AbsShiftableLogli_secondDerivative__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsShiftableLogli, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AbsShiftableLogli_secondDerivative__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AbsShiftableLogli_secondDerivative'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::AbsShiftableLogli::secondDerivative(double const,double const) const\n"
    "    ase::AbsShiftableLogli::secondDerivative(double const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli_classname" "', argument " "1"" of type '" "ase::AbsShiftableLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  {
    try {
      result = ((ase::AbsShiftableLogli const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::AbsLogLikelihoodCurve *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "AbsShiftableLogli___imul__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli___imul__" "', argument " "1"" of type '" "ase::AbsShiftableLogli *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsShiftableLogli___imul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (ase::AbsLogLikelihoodCurve *) &(arg1)->operator *=(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__AbsLogLikelihoodCurve, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_sigmaPlus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli_sigmaPlus" "', argument " "1"" of type '" "ase::AbsShiftableLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsShiftableLogli_sigmaPlus" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbsShiftableLogli_sigmaPlus" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::AbsShiftableLogli const *)arg1)->sigmaPlus(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_sigmaPlus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli_sigmaPlus" "', argument " "1"" of type '" "ase::AbsShiftableLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsShiftableLogli_sigmaPlus" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsShiftableLogli const *)arg1)->sigmaPlus(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_sigmaPlus__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli_sigmaPlus" "', argument " "1"" of type '" "ase::AbsShiftableLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  {
    try {
      result = (double)((ase::AbsShiftableLogli const *)arg1)->sigmaPlus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_sigmaPlus(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AbsShiftableLogli_sigmaPlus", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsShiftableLogli, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AbsShiftableLogli_sigmaPlus__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsShiftableLogli, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AbsShiftableLogli_sigmaPlus__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsShiftableLogli, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AbsShiftableLogli_sigmaPlus__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AbsShiftableLogli_sigmaPlus'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::AbsShiftableLogli::sigmaPlus(double,double) const\n"
    "    ase::AbsShiftableLogli::sigmaPlus(double) const\n"
    "    ase::AbsShiftableLogli::sigmaPlus() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_sigmaMinus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli_sigmaMinus" "', argument " "1"" of type '" "ase::AbsShiftableLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsShiftableLogli_sigmaMinus" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AbsShiftableLogli_sigmaMinus" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::AbsShiftableLogli const *)arg1)->sigmaMinus(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_sigmaMinus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli_sigmaMinus" "', argument " "1"" of type '" "ase::AbsShiftableLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AbsShiftableLogli_sigmaMinus" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::AbsShiftableLogli const *)arg1)->sigmaMinus(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_sigmaMinus__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsShiftableLogli *arg1 = (ase::AbsShiftableLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsShiftableLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AbsShiftableLogli_sigmaMinus" "', argument " "1"" of type '" "ase::AbsShiftableLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsShiftableLogli * >(argp1);
  {
    try {
      result = (double)((ase::AbsShiftableLogli const *)arg1)->sigmaMinus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AbsShiftableLogli_sigmaMinus(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "AbsShiftableLogli_sigmaMinus", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsShiftableLogli, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AbsShiftableLogli_sigmaMinus__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsShiftableLogli, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AbsShiftableLogli_sigmaMinus__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsShiftableLogli, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AbsShiftableLogli_sigmaMinus__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AbsShiftableLogli_sigmaMinus'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::AbsShiftableLogli::sigmaMinus(double,double) const\n"
    "    ase::AbsShiftableLogli::sigmaMinus(double) const\n"
    "    ase::AbsShiftableLogli::sigmaMinus() const\n");
  return 0;
}


SWIGINTERN PyObject *AbsShiftableLogli_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__AbsShiftableLogli, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_moldingVarianceAt0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  unsigned int arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "moldingVarianceAt0", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "moldingVarianceAt0" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "moldingVarianceAt0" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "moldingVarianceAt0" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (double)ase::moldingVarianceAt0(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SymmetrizedParabola(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SymmetrizedParabola *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_SymmetrizedParabola", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SymmetrizedParabola" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SymmetrizedParabola" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymmetrizedParabola" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SymmetrizedParabola *)new ase::SymmetrizedParabola(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetrizedParabola, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymmetrizedParabola(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetrizedParabola *arg1 = (ase::SymmetrizedParabola *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetrizedParabola, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymmetrizedParabola" "', argument " "1"" of type '" "ase::SymmetrizedParabola *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetrizedParabola * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetrizedParabola_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetrizedParabola *arg1 = (ase::SymmetrizedParabola *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SymmetrizedParabola *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetrizedParabola, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetrizedParabola_clone" "', argument " "1"" of type '" "ase::SymmetrizedParabola const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetrizedParabola * >(argp1);
  {
    try {
      result = (ase::SymmetrizedParabola *)((ase::SymmetrizedParabola const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SymmetrizedParabola, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetrizedParabola_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetrizedParabola *arg1 = (ase::SymmetrizedParabola *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetrizedParabola, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetrizedParabola_stepSize" "', argument " "1"" of type '" "ase::SymmetrizedParabola const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetrizedParabola * >(argp1);
  {
    try {
      result = (double)((ase::SymmetrizedParabola const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetrizedParabola_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetrizedParabola *arg1 = (ase::SymmetrizedParabola *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetrizedParabola, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetrizedParabola_classname" "', argument " "1"" of type '" "ase::SymmetrizedParabola const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetrizedParabola * >(argp1);
  {
    try {
      result = ((ase::SymmetrizedParabola const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetrizedParabola_posteriorMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetrizedParabola *arg1 = (ase::SymmetrizedParabola *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetrizedParabola, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetrizedParabola_posteriorMean" "', argument " "1"" of type '" "ase::SymmetrizedParabola const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetrizedParabola * >(argp1);
  {
    try {
      result = (double)((ase::SymmetrizedParabola const *)arg1)->posteriorMean();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymmetrizedParabola_posteriorVariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SymmetrizedParabola *arg1 = (ase::SymmetrizedParabola *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SymmetrizedParabola, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymmetrizedParabola_posteriorVariance" "', argument " "1"" of type '" "ase::SymmetrizedParabola const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SymmetrizedParabola * >(argp1);
  {
    try {
      result = (double)((ase::SymmetrizedParabola const *)arg1)->posteriorVariance();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SymmetrizedParabola_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SymmetrizedParabola, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymmetrizedParabola_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_BrokenParabola(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::BrokenParabola *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_BrokenParabola", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BrokenParabola" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BrokenParabola" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BrokenParabola" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::BrokenParabola *)new ase::BrokenParabola(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__BrokenParabola, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BrokenParabola(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::BrokenParabola *arg1 = (ase::BrokenParabola *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__BrokenParabola, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BrokenParabola" "', argument " "1"" of type '" "ase::BrokenParabola *""'"); 
  }
  arg1 = reinterpret_cast< ase::BrokenParabola * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BrokenParabola_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::BrokenParabola *arg1 = (ase::BrokenParabola *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::BrokenParabola *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__BrokenParabola, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BrokenParabola_clone" "', argument " "1"" of type '" "ase::BrokenParabola const *""'"); 
  }
  arg1 = reinterpret_cast< ase::BrokenParabola * >(argp1);
  {
    try {
      result = (ase::BrokenParabola *)((ase::BrokenParabola const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__BrokenParabola, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BrokenParabola_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::BrokenParabola *arg1 = (ase::BrokenParabola *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__BrokenParabola, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BrokenParabola_stepSize" "', argument " "1"" of type '" "ase::BrokenParabola const *""'"); 
  }
  arg1 = reinterpret_cast< ase::BrokenParabola * >(argp1);
  {
    try {
      result = (double)((ase::BrokenParabola const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BrokenParabola_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::BrokenParabola *arg1 = (ase::BrokenParabola *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__BrokenParabola, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BrokenParabola_classname" "', argument " "1"" of type '" "ase::BrokenParabola const *""'"); 
  }
  arg1 = reinterpret_cast< ase::BrokenParabola * >(argp1);
  {
    try {
      result = ((ase::BrokenParabola const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BrokenParabola_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__BrokenParabola, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *BrokenParabola_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_TruncatedCubicLogli(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::TruncatedCubicLogli *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_TruncatedCubicLogli", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TruncatedCubicLogli" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TruncatedCubicLogli" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TruncatedCubicLogli" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::TruncatedCubicLogli *)new ase::TruncatedCubicLogli(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__TruncatedCubicLogli, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TruncatedCubicLogli(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TruncatedCubicLogli *arg1 = (ase::TruncatedCubicLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TruncatedCubicLogli, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TruncatedCubicLogli" "', argument " "1"" of type '" "ase::TruncatedCubicLogli *""'"); 
  }
  arg1 = reinterpret_cast< ase::TruncatedCubicLogli * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TruncatedCubicLogli_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TruncatedCubicLogli *arg1 = (ase::TruncatedCubicLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::TruncatedCubicLogli *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TruncatedCubicLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TruncatedCubicLogli_clone" "', argument " "1"" of type '" "ase::TruncatedCubicLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TruncatedCubicLogli * >(argp1);
  {
    try {
      result = (ase::TruncatedCubicLogli *)((ase::TruncatedCubicLogli const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__TruncatedCubicLogli, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TruncatedCubicLogli_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TruncatedCubicLogli *arg1 = (ase::TruncatedCubicLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TruncatedCubicLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TruncatedCubicLogli_stepSize" "', argument " "1"" of type '" "ase::TruncatedCubicLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TruncatedCubicLogli * >(argp1);
  {
    try {
      result = (double)((ase::TruncatedCubicLogli const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TruncatedCubicLogli_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TruncatedCubicLogli *arg1 = (ase::TruncatedCubicLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TruncatedCubicLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TruncatedCubicLogli_classname" "', argument " "1"" of type '" "ase::TruncatedCubicLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TruncatedCubicLogli * >(argp1);
  {
    try {
      result = ((ase::TruncatedCubicLogli const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TruncatedCubicLogli_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__TruncatedCubicLogli, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TruncatedCubicLogli_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LogarithmicLogli(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::LogarithmicLogli *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_LogarithmicLogli", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LogarithmicLogli" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LogarithmicLogli" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LogarithmicLogli" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::LogarithmicLogli *)new ase::LogarithmicLogli(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LogarithmicLogli, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LogarithmicLogli(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LogarithmicLogli *arg1 = (ase::LogarithmicLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LogarithmicLogli, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LogarithmicLogli" "', argument " "1"" of type '" "ase::LogarithmicLogli *""'"); 
  }
  arg1 = reinterpret_cast< ase::LogarithmicLogli * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogarithmicLogli_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LogarithmicLogli *arg1 = (ase::LogarithmicLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::LogarithmicLogli *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LogarithmicLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogarithmicLogli_clone" "', argument " "1"" of type '" "ase::LogarithmicLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LogarithmicLogli * >(argp1);
  {
    try {
      result = (ase::LogarithmicLogli *)((ase::LogarithmicLogli const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LogarithmicLogli, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogarithmicLogli_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LogarithmicLogli *arg1 = (ase::LogarithmicLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LogarithmicLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogarithmicLogli_stepSize" "', argument " "1"" of type '" "ase::LogarithmicLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LogarithmicLogli * >(argp1);
  {
    try {
      result = (double)((ase::LogarithmicLogli const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogarithmicLogli_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LogarithmicLogli *arg1 = (ase::LogarithmicLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LogarithmicLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogarithmicLogli_classname" "', argument " "1"" of type '" "ase::LogarithmicLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LogarithmicLogli * >(argp1);
  {
    try {
      result = ((ase::LogarithmicLogli const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LogarithmicLogli_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__LogarithmicLogli, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LogarithmicLogli_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_GeneralisedPoisson(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::GeneralisedPoisson *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_GeneralisedPoisson", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GeneralisedPoisson" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GeneralisedPoisson" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GeneralisedPoisson" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::GeneralisedPoisson *)new ase::GeneralisedPoisson(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__GeneralisedPoisson, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GeneralisedPoisson(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::GeneralisedPoisson *arg1 = (ase::GeneralisedPoisson *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GeneralisedPoisson, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeneralisedPoisson" "', argument " "1"" of type '" "ase::GeneralisedPoisson *""'"); 
  }
  arg1 = reinterpret_cast< ase::GeneralisedPoisson * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralisedPoisson_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::GeneralisedPoisson *arg1 = (ase::GeneralisedPoisson *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::GeneralisedPoisson *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GeneralisedPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralisedPoisson_clone" "', argument " "1"" of type '" "ase::GeneralisedPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GeneralisedPoisson * >(argp1);
  {
    try {
      result = (ase::GeneralisedPoisson *)((ase::GeneralisedPoisson const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__GeneralisedPoisson, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralisedPoisson_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::GeneralisedPoisson *arg1 = (ase::GeneralisedPoisson *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GeneralisedPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralisedPoisson_stepSize" "', argument " "1"" of type '" "ase::GeneralisedPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GeneralisedPoisson * >(argp1);
  {
    try {
      result = (double)((ase::GeneralisedPoisson const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralisedPoisson_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::GeneralisedPoisson *arg1 = (ase::GeneralisedPoisson *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GeneralisedPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralisedPoisson_classname" "', argument " "1"" of type '" "ase::GeneralisedPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GeneralisedPoisson * >(argp1);
  {
    try {
      result = ((ase::GeneralisedPoisson const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralisedPoisson_posteriorMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::GeneralisedPoisson *arg1 = (ase::GeneralisedPoisson *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GeneralisedPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralisedPoisson_posteriorMean" "', argument " "1"" of type '" "ase::GeneralisedPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GeneralisedPoisson * >(argp1);
  {
    try {
      result = (double)((ase::GeneralisedPoisson const *)arg1)->posteriorMean();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeneralisedPoisson_posteriorVariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::GeneralisedPoisson *arg1 = (ase::GeneralisedPoisson *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GeneralisedPoisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeneralisedPoisson_posteriorVariance" "', argument " "1"" of type '" "ase::GeneralisedPoisson const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GeneralisedPoisson * >(argp1);
  {
    try {
      result = (double)((ase::GeneralisedPoisson const *)arg1)->posteriorVariance();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GeneralisedPoisson_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__GeneralisedPoisson, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *GeneralisedPoisson_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ConstrainedQuartic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::ConstrainedQuartic *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ConstrainedQuartic", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ConstrainedQuartic" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ConstrainedQuartic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ConstrainedQuartic" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::ConstrainedQuartic *)new ase::ConstrainedQuartic(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ConstrainedQuartic, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ConstrainedQuartic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConstrainedQuartic *arg1 = (ase::ConstrainedQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConstrainedQuartic, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConstrainedQuartic" "', argument " "1"" of type '" "ase::ConstrainedQuartic *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConstrainedQuartic * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstrainedQuartic_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConstrainedQuartic *arg1 = (ase::ConstrainedQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::ConstrainedQuartic *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConstrainedQuartic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstrainedQuartic_clone" "', argument " "1"" of type '" "ase::ConstrainedQuartic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConstrainedQuartic * >(argp1);
  {
    try {
      result = (ase::ConstrainedQuartic *)((ase::ConstrainedQuartic const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ConstrainedQuartic, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstrainedQuartic_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConstrainedQuartic *arg1 = (ase::ConstrainedQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConstrainedQuartic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstrainedQuartic_alpha" "', argument " "1"" of type '" "ase::ConstrainedQuartic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConstrainedQuartic * >(argp1);
  {
    try {
      result = (double)((ase::ConstrainedQuartic const *)arg1)->alpha();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstrainedQuartic_beta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConstrainedQuartic *arg1 = (ase::ConstrainedQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConstrainedQuartic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstrainedQuartic_beta" "', argument " "1"" of type '" "ase::ConstrainedQuartic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConstrainedQuartic * >(argp1);
  {
    try {
      result = (double)((ase::ConstrainedQuartic const *)arg1)->beta();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstrainedQuartic_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConstrainedQuartic *arg1 = (ase::ConstrainedQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConstrainedQuartic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstrainedQuartic_stepSize" "', argument " "1"" of type '" "ase::ConstrainedQuartic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConstrainedQuartic * >(argp1);
  {
    try {
      result = (double)((ase::ConstrainedQuartic const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstrainedQuartic_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConstrainedQuartic *arg1 = (ase::ConstrainedQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConstrainedQuartic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstrainedQuartic_classname" "', argument " "1"" of type '" "ase::ConstrainedQuartic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConstrainedQuartic * >(argp1);
  {
    try {
      result = ((ase::ConstrainedQuartic const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ConstrainedQuartic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__ConstrainedQuartic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ConstrainedQuartic_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MoldedQuartic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::MoldedQuartic *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_MoldedQuartic", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MoldedQuartic" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MoldedQuartic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MoldedQuartic" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::MoldedQuartic *)new ase::MoldedQuartic(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__MoldedQuartic, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MoldedQuartic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MoldedQuartic *arg1 = (ase::MoldedQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MoldedQuartic, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MoldedQuartic" "', argument " "1"" of type '" "ase::MoldedQuartic *""'"); 
  }
  arg1 = reinterpret_cast< ase::MoldedQuartic * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoldedQuartic_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MoldedQuartic *arg1 = (ase::MoldedQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::MoldedQuartic *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MoldedQuartic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoldedQuartic_clone" "', argument " "1"" of type '" "ase::MoldedQuartic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MoldedQuartic * >(argp1);
  {
    try {
      result = (ase::MoldedQuartic *)((ase::MoldedQuartic const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__MoldedQuartic, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoldedQuartic_a(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MoldedQuartic *arg1 = (ase::MoldedQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MoldedQuartic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoldedQuartic_a" "', argument " "1"" of type '" "ase::MoldedQuartic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MoldedQuartic * >(argp1);
  {
    try {
      result = (double)((ase::MoldedQuartic const *)arg1)->a();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoldedQuartic_b(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MoldedQuartic *arg1 = (ase::MoldedQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MoldedQuartic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoldedQuartic_b" "', argument " "1"" of type '" "ase::MoldedQuartic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MoldedQuartic * >(argp1);
  {
    try {
      result = (double)((ase::MoldedQuartic const *)arg1)->b();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoldedQuartic_c(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MoldedQuartic *arg1 = (ase::MoldedQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MoldedQuartic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoldedQuartic_c" "', argument " "1"" of type '" "ase::MoldedQuartic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MoldedQuartic * >(argp1);
  {
    try {
      result = (double)((ase::MoldedQuartic const *)arg1)->c();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoldedQuartic_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MoldedQuartic *arg1 = (ase::MoldedQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MoldedQuartic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoldedQuartic_stepSize" "', argument " "1"" of type '" "ase::MoldedQuartic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MoldedQuartic * >(argp1);
  {
    try {
      result = (double)((ase::MoldedQuartic const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoldedQuartic_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MoldedQuartic *arg1 = (ase::MoldedQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MoldedQuartic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoldedQuartic_classname" "', argument " "1"" of type '" "ase::MoldedQuartic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MoldedQuartic * >(argp1);
  {
    try {
      result = ((ase::MoldedQuartic const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MoldedQuartic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__MoldedQuartic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MoldedQuartic_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MatchedQuintic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::MatchedQuintic *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_MatchedQuintic", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MatchedQuintic" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MatchedQuintic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MatchedQuintic" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::MatchedQuintic *)new ase::MatchedQuintic(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__MatchedQuintic, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MatchedQuintic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MatchedQuintic *arg1 = (ase::MatchedQuintic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MatchedQuintic, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatchedQuintic" "', argument " "1"" of type '" "ase::MatchedQuintic *""'"); 
  }
  arg1 = reinterpret_cast< ase::MatchedQuintic * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchedQuintic_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MatchedQuintic *arg1 = (ase::MatchedQuintic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::MatchedQuintic *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MatchedQuintic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchedQuintic_clone" "', argument " "1"" of type '" "ase::MatchedQuintic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MatchedQuintic * >(argp1);
  {
    try {
      result = (ase::MatchedQuintic *)((ase::MatchedQuintic const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__MatchedQuintic, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchedQuintic_a(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MatchedQuintic *arg1 = (ase::MatchedQuintic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MatchedQuintic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchedQuintic_a" "', argument " "1"" of type '" "ase::MatchedQuintic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MatchedQuintic * >(argp1);
  {
    try {
      result = (double)((ase::MatchedQuintic const *)arg1)->a();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchedQuintic_b(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MatchedQuintic *arg1 = (ase::MatchedQuintic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MatchedQuintic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchedQuintic_b" "', argument " "1"" of type '" "ase::MatchedQuintic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MatchedQuintic * >(argp1);
  {
    try {
      result = (double)((ase::MatchedQuintic const *)arg1)->b();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchedQuintic_c(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MatchedQuintic *arg1 = (ase::MatchedQuintic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MatchedQuintic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchedQuintic_c" "', argument " "1"" of type '" "ase::MatchedQuintic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MatchedQuintic * >(argp1);
  {
    try {
      result = (double)((ase::MatchedQuintic const *)arg1)->c();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchedQuintic_d(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MatchedQuintic *arg1 = (ase::MatchedQuintic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MatchedQuintic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchedQuintic_d" "', argument " "1"" of type '" "ase::MatchedQuintic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MatchedQuintic * >(argp1);
  {
    try {
      result = (double)((ase::MatchedQuintic const *)arg1)->d();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchedQuintic_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MatchedQuintic *arg1 = (ase::MatchedQuintic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MatchedQuintic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchedQuintic_stepSize" "', argument " "1"" of type '" "ase::MatchedQuintic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MatchedQuintic * >(argp1);
  {
    try {
      result = (double)((ase::MatchedQuintic const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatchedQuintic_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MatchedQuintic *arg1 = (ase::MatchedQuintic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MatchedQuintic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatchedQuintic_classname" "', argument " "1"" of type '" "ase::MatchedQuintic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MatchedQuintic * >(argp1);
  {
    try {
      result = ((ase::MatchedQuintic const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MatchedQuintic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__MatchedQuintic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MatchedQuintic_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_DoubleQuartic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleQuartic *arg1 = (ase::DoubleQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DoubleQuartic, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleQuartic" "', argument " "1"" of type '" "ase::DoubleQuartic *""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleQuartic * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleQuartic_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleQuartic *arg1 = (ase::DoubleQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::AbsShiftableLogli *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DoubleQuartic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleQuartic_clone" "', argument " "1"" of type '" "ase::DoubleQuartic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleQuartic * >(argp1);
  {
    try {
      result = (ase::AbsShiftableLogli *)((ase::DoubleQuartic const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__AbsShiftableLogli, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleQuartic_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleQuartic *arg1 = (ase::DoubleQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DoubleQuartic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleQuartic_stepSize" "', argument " "1"" of type '" "ase::DoubleQuartic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleQuartic * >(argp1);
  {
    try {
      result = (double)((ase::DoubleQuartic const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleQuartic_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleQuartic *arg1 = (ase::DoubleQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DoubleQuartic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleQuartic_classname" "', argument " "1"" of type '" "ase::DoubleQuartic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleQuartic * >(argp1);
  {
    try {
      result = ((ase::DoubleQuartic const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DoubleQuartic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__DoubleQuartic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MoldedDoubleQuartic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::MoldedDoubleQuartic *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_MoldedDoubleQuartic", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MoldedDoubleQuartic" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MoldedDoubleQuartic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MoldedDoubleQuartic" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::MoldedDoubleQuartic *)new ase::MoldedDoubleQuartic(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__MoldedDoubleQuartic, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MoldedDoubleQuartic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MoldedDoubleQuartic *arg1 = (ase::MoldedDoubleQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MoldedDoubleQuartic, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MoldedDoubleQuartic" "', argument " "1"" of type '" "ase::MoldedDoubleQuartic *""'"); 
  }
  arg1 = reinterpret_cast< ase::MoldedDoubleQuartic * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoldedDoubleQuartic_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MoldedDoubleQuartic *arg1 = (ase::MoldedDoubleQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::MoldedDoubleQuartic *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MoldedDoubleQuartic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoldedDoubleQuartic_clone" "', argument " "1"" of type '" "ase::MoldedDoubleQuartic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MoldedDoubleQuartic * >(argp1);
  {
    try {
      result = (ase::MoldedDoubleQuartic *)((ase::MoldedDoubleQuartic const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__MoldedDoubleQuartic, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoldedDoubleQuartic_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MoldedDoubleQuartic *arg1 = (ase::MoldedDoubleQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MoldedDoubleQuartic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoldedDoubleQuartic_classname" "', argument " "1"" of type '" "ase::MoldedDoubleQuartic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MoldedDoubleQuartic * >(argp1);
  {
    try {
      result = ((ase::MoldedDoubleQuartic const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MoldedDoubleQuartic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__MoldedDoubleQuartic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MoldedDoubleQuartic_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SimpleDoubleQuartic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SimpleDoubleQuartic *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_SimpleDoubleQuartic", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SimpleDoubleQuartic" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SimpleDoubleQuartic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SimpleDoubleQuartic" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SimpleDoubleQuartic *)new ase::SimpleDoubleQuartic(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SimpleDoubleQuartic, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SimpleDoubleQuartic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SimpleDoubleQuartic *arg1 = (ase::SimpleDoubleQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SimpleDoubleQuartic, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SimpleDoubleQuartic" "', argument " "1"" of type '" "ase::SimpleDoubleQuartic *""'"); 
  }
  arg1 = reinterpret_cast< ase::SimpleDoubleQuartic * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimpleDoubleQuartic_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SimpleDoubleQuartic *arg1 = (ase::SimpleDoubleQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SimpleDoubleQuartic *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SimpleDoubleQuartic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleDoubleQuartic_clone" "', argument " "1"" of type '" "ase::SimpleDoubleQuartic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SimpleDoubleQuartic * >(argp1);
  {
    try {
      result = (ase::SimpleDoubleQuartic *)((ase::SimpleDoubleQuartic const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SimpleDoubleQuartic, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimpleDoubleQuartic_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SimpleDoubleQuartic *arg1 = (ase::SimpleDoubleQuartic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SimpleDoubleQuartic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleDoubleQuartic_classname" "', argument " "1"" of type '" "ase::SimpleDoubleQuartic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SimpleDoubleQuartic * >(argp1);
  {
    try {
      result = ((ase::SimpleDoubleQuartic const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SimpleDoubleQuartic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SimpleDoubleQuartic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SimpleDoubleQuartic_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_DoubleQuintic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleQuintic *arg1 = (ase::DoubleQuintic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DoubleQuintic, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleQuintic" "', argument " "1"" of type '" "ase::DoubleQuintic *""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleQuintic * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleQuintic_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleQuintic *arg1 = (ase::DoubleQuintic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::AbsShiftableLogli *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DoubleQuintic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleQuintic_clone" "', argument " "1"" of type '" "ase::DoubleQuintic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleQuintic * >(argp1);
  {
    try {
      result = (ase::AbsShiftableLogli *)((ase::DoubleQuintic const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__AbsShiftableLogli, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleQuintic_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleQuintic *arg1 = (ase::DoubleQuintic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DoubleQuintic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleQuintic_stepSize" "', argument " "1"" of type '" "ase::DoubleQuintic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleQuintic * >(argp1);
  {
    try {
      result = (double)((ase::DoubleQuintic const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleQuintic_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleQuintic *arg1 = (ase::DoubleQuintic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DoubleQuintic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleQuintic_classname" "', argument " "1"" of type '" "ase::DoubleQuintic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleQuintic * >(argp1);
  {
    try {
      result = ((ase::DoubleQuintic const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DoubleQuintic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__DoubleQuintic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MoldedDoubleQuintic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::MoldedDoubleQuintic *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_MoldedDoubleQuintic", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MoldedDoubleQuintic" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MoldedDoubleQuintic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MoldedDoubleQuintic" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::MoldedDoubleQuintic *)new ase::MoldedDoubleQuintic(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__MoldedDoubleQuintic, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MoldedDoubleQuintic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MoldedDoubleQuintic *arg1 = (ase::MoldedDoubleQuintic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MoldedDoubleQuintic, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MoldedDoubleQuintic" "', argument " "1"" of type '" "ase::MoldedDoubleQuintic *""'"); 
  }
  arg1 = reinterpret_cast< ase::MoldedDoubleQuintic * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoldedDoubleQuintic_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MoldedDoubleQuintic *arg1 = (ase::MoldedDoubleQuintic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::MoldedDoubleQuintic *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MoldedDoubleQuintic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoldedDoubleQuintic_clone" "', argument " "1"" of type '" "ase::MoldedDoubleQuintic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MoldedDoubleQuintic * >(argp1);
  {
    try {
      result = (ase::MoldedDoubleQuintic *)((ase::MoldedDoubleQuintic const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__MoldedDoubleQuintic, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoldedDoubleQuintic_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MoldedDoubleQuintic *arg1 = (ase::MoldedDoubleQuintic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MoldedDoubleQuintic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoldedDoubleQuintic_classname" "', argument " "1"" of type '" "ase::MoldedDoubleQuintic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MoldedDoubleQuintic * >(argp1);
  {
    try {
      result = ((ase::MoldedDoubleQuintic const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MoldedDoubleQuintic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__MoldedDoubleQuintic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MoldedDoubleQuintic_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SimpleDoubleQuintic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::SimpleDoubleQuintic *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_SimpleDoubleQuintic", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SimpleDoubleQuintic" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SimpleDoubleQuintic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SimpleDoubleQuintic" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::SimpleDoubleQuintic *)new ase::SimpleDoubleQuintic(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SimpleDoubleQuintic, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SimpleDoubleQuintic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SimpleDoubleQuintic *arg1 = (ase::SimpleDoubleQuintic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SimpleDoubleQuintic, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SimpleDoubleQuintic" "', argument " "1"" of type '" "ase::SimpleDoubleQuintic *""'"); 
  }
  arg1 = reinterpret_cast< ase::SimpleDoubleQuintic * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimpleDoubleQuintic_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SimpleDoubleQuintic *arg1 = (ase::SimpleDoubleQuintic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::SimpleDoubleQuintic *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SimpleDoubleQuintic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleDoubleQuintic_clone" "', argument " "1"" of type '" "ase::SimpleDoubleQuintic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SimpleDoubleQuintic * >(argp1);
  {
    try {
      result = (ase::SimpleDoubleQuintic *)((ase::SimpleDoubleQuintic const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__SimpleDoubleQuintic, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimpleDoubleQuintic_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::SimpleDoubleQuintic *arg1 = (ase::SimpleDoubleQuintic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__SimpleDoubleQuintic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleDoubleQuintic_classname" "', argument " "1"" of type '" "ase::SimpleDoubleQuintic const *""'"); 
  }
  arg1 = reinterpret_cast< ase::SimpleDoubleQuintic * >(argp1);
  {
    try {
      result = ((ase::SimpleDoubleQuintic const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SimpleDoubleQuintic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__SimpleDoubleQuintic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SimpleDoubleQuintic_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Interpolated7thDegree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::Interpolated7thDegree *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_Interpolated7thDegree", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Interpolated7thDegree" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Interpolated7thDegree" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Interpolated7thDegree" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::Interpolated7thDegree *)new ase::Interpolated7thDegree(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__Interpolated7thDegree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Interpolated7thDegree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Interpolated7thDegree *arg1 = (ase::Interpolated7thDegree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Interpolated7thDegree, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Interpolated7thDegree" "', argument " "1"" of type '" "ase::Interpolated7thDegree *""'"); 
  }
  arg1 = reinterpret_cast< ase::Interpolated7thDegree * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interpolated7thDegree_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Interpolated7thDegree *arg1 = (ase::Interpolated7thDegree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::Interpolated7thDegree *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Interpolated7thDegree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interpolated7thDegree_clone" "', argument " "1"" of type '" "ase::Interpolated7thDegree const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Interpolated7thDegree * >(argp1);
  {
    try {
      result = (ase::Interpolated7thDegree *)((ase::Interpolated7thDegree const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__Interpolated7thDegree, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interpolated7thDegree_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Interpolated7thDegree *arg1 = (ase::Interpolated7thDegree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Interpolated7thDegree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interpolated7thDegree_stepSize" "', argument " "1"" of type '" "ase::Interpolated7thDegree const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Interpolated7thDegree * >(argp1);
  {
    try {
      result = (double)((ase::Interpolated7thDegree const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interpolated7thDegree_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Interpolated7thDegree *arg1 = (ase::Interpolated7thDegree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__Interpolated7thDegree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interpolated7thDegree_classname" "', argument " "1"" of type '" "ase::Interpolated7thDegree const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Interpolated7thDegree * >(argp1);
  {
    try {
      result = ((ase::Interpolated7thDegree const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Interpolated7thDegree_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__Interpolated7thDegree, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Interpolated7thDegree_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_VariableSigmaLogli(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::VariableSigmaLogli *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_VariableSigmaLogli", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VariableSigmaLogli" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VariableSigmaLogli" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VariableSigmaLogli" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::VariableSigmaLogli *)new ase::VariableSigmaLogli(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__VariableSigmaLogli, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VariableSigmaLogli(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::VariableSigmaLogli *arg1 = (ase::VariableSigmaLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__VariableSigmaLogli, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VariableSigmaLogli" "', argument " "1"" of type '" "ase::VariableSigmaLogli *""'"); 
  }
  arg1 = reinterpret_cast< ase::VariableSigmaLogli * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableSigmaLogli_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::VariableSigmaLogli *arg1 = (ase::VariableSigmaLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::VariableSigmaLogli *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__VariableSigmaLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableSigmaLogli_clone" "', argument " "1"" of type '" "ase::VariableSigmaLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::VariableSigmaLogli * >(argp1);
  {
    try {
      result = (ase::VariableSigmaLogli *)((ase::VariableSigmaLogli const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__VariableSigmaLogli, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableSigmaLogli_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::VariableSigmaLogli *arg1 = (ase::VariableSigmaLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__VariableSigmaLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableSigmaLogli_stepSize" "', argument " "1"" of type '" "ase::VariableSigmaLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::VariableSigmaLogli * >(argp1);
  {
    try {
      result = (double)((ase::VariableSigmaLogli const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableSigmaLogli_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::VariableSigmaLogli *arg1 = (ase::VariableSigmaLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__VariableSigmaLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableSigmaLogli_classname" "', argument " "1"" of type '" "ase::VariableSigmaLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::VariableSigmaLogli * >(argp1);
  {
    try {
      result = ((ase::VariableSigmaLogli const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VariableSigmaLogli_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__VariableSigmaLogli, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VariableSigmaLogli_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_VariableVarianceLogli(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::VariableVarianceLogli *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_VariableVarianceLogli", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VariableVarianceLogli" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VariableVarianceLogli" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VariableVarianceLogli" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::VariableVarianceLogli *)new ase::VariableVarianceLogli(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__VariableVarianceLogli, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VariableVarianceLogli(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::VariableVarianceLogli *arg1 = (ase::VariableVarianceLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__VariableVarianceLogli, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VariableVarianceLogli" "', argument " "1"" of type '" "ase::VariableVarianceLogli *""'"); 
  }
  arg1 = reinterpret_cast< ase::VariableVarianceLogli * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVarianceLogli_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::VariableVarianceLogli *arg1 = (ase::VariableVarianceLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::VariableVarianceLogli *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__VariableVarianceLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVarianceLogli_clone" "', argument " "1"" of type '" "ase::VariableVarianceLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::VariableVarianceLogli * >(argp1);
  {
    try {
      result = (ase::VariableVarianceLogli *)((ase::VariableVarianceLogli const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__VariableVarianceLogli, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVarianceLogli_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::VariableVarianceLogli *arg1 = (ase::VariableVarianceLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__VariableVarianceLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVarianceLogli_stepSize" "', argument " "1"" of type '" "ase::VariableVarianceLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::VariableVarianceLogli * >(argp1);
  {
    try {
      result = (double)((ase::VariableVarianceLogli const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableVarianceLogli_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::VariableVarianceLogli *arg1 = (ase::VariableVarianceLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__VariableVarianceLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableVarianceLogli_classname" "', argument " "1"" of type '" "ase::VariableVarianceLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::VariableVarianceLogli * >(argp1);
  {
    try {
      result = ((ase::VariableVarianceLogli const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VariableVarianceLogli_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__VariableVarianceLogli, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VariableVarianceLogli_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_VariableLogSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::VariableLogSigma *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_VariableLogSigma", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VariableLogSigma" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VariableLogSigma" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_VariableLogSigma" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::VariableLogSigma *)new ase::VariableLogSigma(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__VariableLogSigma, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VariableLogSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::VariableLogSigma *arg1 = (ase::VariableLogSigma *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__VariableLogSigma, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VariableLogSigma" "', argument " "1"" of type '" "ase::VariableLogSigma *""'"); 
  }
  arg1 = reinterpret_cast< ase::VariableLogSigma * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableLogSigma_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::VariableLogSigma *arg1 = (ase::VariableLogSigma *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::VariableLogSigma *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__VariableLogSigma, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableLogSigma_clone" "', argument " "1"" of type '" "ase::VariableLogSigma const *""'"); 
  }
  arg1 = reinterpret_cast< ase::VariableLogSigma * >(argp1);
  {
    try {
      result = (ase::VariableLogSigma *)((ase::VariableLogSigma const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__VariableLogSigma, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableLogSigma_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::VariableLogSigma *arg1 = (ase::VariableLogSigma *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__VariableLogSigma, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableLogSigma_stepSize" "', argument " "1"" of type '" "ase::VariableLogSigma const *""'"); 
  }
  arg1 = reinterpret_cast< ase::VariableLogSigma * >(argp1);
  {
    try {
      result = (double)((ase::VariableLogSigma const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VariableLogSigma_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::VariableLogSigma *arg1 = (ase::VariableLogSigma *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__VariableLogSigma, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VariableLogSigma_classname" "', argument " "1"" of type '" "ase::VariableLogSigma const *""'"); 
  }
  arg1 = reinterpret_cast< ase::VariableLogSigma * >(argp1);
  {
    try {
      result = ((ase::VariableLogSigma const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VariableLogSigma_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__VariableLogSigma, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *VariableLogSigma_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_delete_DoubleCubicLogSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleCubicLogSigma *arg1 = (ase::DoubleCubicLogSigma *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DoubleCubicLogSigma, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleCubicLogSigma" "', argument " "1"" of type '" "ase::DoubleCubicLogSigma *""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleCubicLogSigma * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleCubicLogSigma_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleCubicLogSigma *arg1 = (ase::DoubleCubicLogSigma *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::DoubleCubicLogSigma *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DoubleCubicLogSigma, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleCubicLogSigma_clone" "', argument " "1"" of type '" "ase::DoubleCubicLogSigma const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleCubicLogSigma * >(argp1);
  {
    try {
      result = (ase::DoubleCubicLogSigma *)((ase::DoubleCubicLogSigma const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DoubleCubicLogSigma, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleCubicLogSigma_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleCubicLogSigma *arg1 = (ase::DoubleCubicLogSigma *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DoubleCubicLogSigma, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleCubicLogSigma_stepSize" "', argument " "1"" of type '" "ase::DoubleCubicLogSigma const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleCubicLogSigma * >(argp1);
  {
    try {
      result = (double)((ase::DoubleCubicLogSigma const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleCubicLogSigma_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleCubicLogSigma *arg1 = (ase::DoubleCubicLogSigma *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DoubleCubicLogSigma, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleCubicLogSigma_classname" "', argument " "1"" of type '" "ase::DoubleCubicLogSigma const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleCubicLogSigma * >(argp1);
  {
    try {
      result = ((ase::DoubleCubicLogSigma const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DoubleCubicLogSigma_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__DoubleCubicLogSigma, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MoldedCubicLogSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::MoldedCubicLogSigma *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_MoldedCubicLogSigma", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MoldedCubicLogSigma" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MoldedCubicLogSigma" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MoldedCubicLogSigma" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::MoldedCubicLogSigma *)new ase::MoldedCubicLogSigma(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__MoldedCubicLogSigma, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MoldedCubicLogSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MoldedCubicLogSigma *arg1 = (ase::MoldedCubicLogSigma *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MoldedCubicLogSigma, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MoldedCubicLogSigma" "', argument " "1"" of type '" "ase::MoldedCubicLogSigma *""'"); 
  }
  arg1 = reinterpret_cast< ase::MoldedCubicLogSigma * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoldedCubicLogSigma_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MoldedCubicLogSigma *arg1 = (ase::MoldedCubicLogSigma *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::MoldedCubicLogSigma *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MoldedCubicLogSigma, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoldedCubicLogSigma_clone" "', argument " "1"" of type '" "ase::MoldedCubicLogSigma const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MoldedCubicLogSigma * >(argp1);
  {
    try {
      result = (ase::MoldedCubicLogSigma *)((ase::MoldedCubicLogSigma const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__MoldedCubicLogSigma, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoldedCubicLogSigma_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MoldedCubicLogSigma *arg1 = (ase::MoldedCubicLogSigma *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MoldedCubicLogSigma, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoldedCubicLogSigma_classname" "', argument " "1"" of type '" "ase::MoldedCubicLogSigma const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MoldedCubicLogSigma * >(argp1);
  {
    try {
      result = ((ase::MoldedCubicLogSigma const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MoldedCubicLogSigma_getEffectiveSigmaAt0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "MoldedCubicLogSigma_getEffectiveSigmaAt0", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MoldedCubicLogSigma_getEffectiveSigmaAt0" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MoldedCubicLogSigma_getEffectiveSigmaAt0" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)ase::MoldedCubicLogSigma::getEffectiveSigmaAt0(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MoldedCubicLogSigma_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__MoldedCubicLogSigma, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MoldedCubicLogSigma_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_QuinticLogSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::QuinticLogSigma *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_QuinticLogSigma", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_QuinticLogSigma" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_QuinticLogSigma" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_QuinticLogSigma" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::QuinticLogSigma *)new ase::QuinticLogSigma(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__QuinticLogSigma, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_QuinticLogSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::QuinticLogSigma *arg1 = (ase::QuinticLogSigma *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__QuinticLogSigma, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_QuinticLogSigma" "', argument " "1"" of type '" "ase::QuinticLogSigma *""'"); 
  }
  arg1 = reinterpret_cast< ase::QuinticLogSigma * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuinticLogSigma_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::QuinticLogSigma *arg1 = (ase::QuinticLogSigma *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::QuinticLogSigma *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__QuinticLogSigma, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuinticLogSigma_clone" "', argument " "1"" of type '" "ase::QuinticLogSigma const *""'"); 
  }
  arg1 = reinterpret_cast< ase::QuinticLogSigma * >(argp1);
  {
    try {
      result = (ase::QuinticLogSigma *)((ase::QuinticLogSigma const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__QuinticLogSigma, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuinticLogSigma_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::QuinticLogSigma *arg1 = (ase::QuinticLogSigma *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__QuinticLogSigma, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuinticLogSigma_stepSize" "', argument " "1"" of type '" "ase::QuinticLogSigma const *""'"); 
  }
  arg1 = reinterpret_cast< ase::QuinticLogSigma * >(argp1);
  {
    try {
      result = (double)((ase::QuinticLogSigma const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QuinticLogSigma_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::QuinticLogSigma *arg1 = (ase::QuinticLogSigma *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__QuinticLogSigma, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QuinticLogSigma_classname" "', argument " "1"" of type '" "ase::QuinticLogSigma const *""'"); 
  }
  arg1 = reinterpret_cast< ase::QuinticLogSigma * >(argp1);
  {
    try {
      result = ((ase::QuinticLogSigma const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *QuinticLogSigma_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__QuinticLogSigma, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *QuinticLogSigma_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PDGLogli(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::PDGLogli *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_PDGLogli", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PDGLogli" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PDGLogli" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PDGLogli" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::PDGLogli *)new ase::PDGLogli(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__PDGLogli, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PDGLogli(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::PDGLogli *arg1 = (ase::PDGLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PDGLogli, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PDGLogli" "', argument " "1"" of type '" "ase::PDGLogli *""'"); 
  }
  arg1 = reinterpret_cast< ase::PDGLogli * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PDGLogli_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::PDGLogli *arg1 = (ase::PDGLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::PDGLogli *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PDGLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PDGLogli_clone" "', argument " "1"" of type '" "ase::PDGLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::PDGLogli * >(argp1);
  {
    try {
      result = (ase::PDGLogli *)((ase::PDGLogli const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__PDGLogli, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PDGLogli_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::PDGLogli *arg1 = (ase::PDGLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PDGLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PDGLogli_stepSize" "', argument " "1"" of type '" "ase::PDGLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::PDGLogli * >(argp1);
  {
    try {
      result = (double)((ase::PDGLogli const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PDGLogli_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::PDGLogli *arg1 = (ase::PDGLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__PDGLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PDGLogli_classname" "', argument " "1"" of type '" "ase::PDGLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::PDGLogli * >(argp1);
  {
    try {
      result = ((ase::PDGLogli const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PDGLogli_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__PDGLogli, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PDGLogli_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LogLogisticBeta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::LogLogisticBeta *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_LogLogisticBeta", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LogLogisticBeta" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LogLogisticBeta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LogLogisticBeta" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::LogLogisticBeta *)new ase::LogLogisticBeta(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LogLogisticBeta, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LogLogisticBeta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LogLogisticBeta *arg1 = (ase::LogLogisticBeta *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LogLogisticBeta, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LogLogisticBeta" "', argument " "1"" of type '" "ase::LogLogisticBeta *""'"); 
  }
  arg1 = reinterpret_cast< ase::LogLogisticBeta * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogLogisticBeta_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LogLogisticBeta *arg1 = (ase::LogLogisticBeta *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::LogLogisticBeta *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LogLogisticBeta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogLogisticBeta_clone" "', argument " "1"" of type '" "ase::LogLogisticBeta const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LogLogisticBeta * >(argp1);
  {
    try {
      result = (ase::LogLogisticBeta *)((ase::LogLogisticBeta const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LogLogisticBeta, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogLogisticBeta_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LogLogisticBeta *arg1 = (ase::LogLogisticBeta *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LogLogisticBeta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogLogisticBeta_stepSize" "', argument " "1"" of type '" "ase::LogLogisticBeta const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LogLogisticBeta * >(argp1);
  {
    try {
      result = (double)((ase::LogLogisticBeta const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LogLogisticBeta_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LogLogisticBeta *arg1 = (ase::LogLogisticBeta *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LogLogisticBeta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LogLogisticBeta_classname" "', argument " "1"" of type '" "ase::LogLogisticBeta const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LogLogisticBeta * >(argp1);
  {
    try {
      result = ((ase::LogLogisticBeta const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LogLogisticBeta_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__LogLogisticBeta, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LogLogisticBeta_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_DistributionLogli__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  ase::DistributionLogli *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DistributionLogli" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DistributionLogli" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DistributionLogli" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DistributionLogli" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::DistributionLogli *)new ase::DistributionLogli((ase::AbsDistributionModel1D const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DistributionLogli, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DistributionLogli__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  ase::DistributionLogli *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DistributionLogli" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DistributionLogli" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DistributionLogli" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (ase::DistributionLogli *)new ase::DistributionLogli((ase::AbsDistributionModel1D const &)*arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DistributionLogli, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DistributionLogli(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_DistributionLogli", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DistributionLogli__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_DistributionLogli__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_DistributionLogli'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::DistributionLogli::DistributionLogli(ase::AbsDistributionModel1D const &,double,double)\n"
    "    ase::DistributionLogli::DistributionLogli(ase::AbsDistributionModel1D const &,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DistributionLogli(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionLogli *arg1 = (ase::DistributionLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionLogli, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DistributionLogli" "', argument " "1"" of type '" "ase::DistributionLogli *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionLogli * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionLogli_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionLogli *arg1 = (ase::DistributionLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::DistributionLogli *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionLogli_clone" "', argument " "1"" of type '" "ase::DistributionLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionLogli * >(argp1);
  {
    try {
      result = (ase::DistributionLogli *)((ase::DistributionLogli const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DistributionLogli, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionLogli_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionLogli *arg1 = (ase::DistributionLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionLogli_stepSize" "', argument " "1"" of type '" "ase::DistributionLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionLogli * >(argp1);
  {
    try {
      result = (double)((ase::DistributionLogli const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionLogli_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionLogli *arg1 = (ase::DistributionLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionLogli_classname" "', argument " "1"" of type '" "ase::DistributionLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionLogli * >(argp1);
  {
    try {
      result = ((ase::DistributionLogli const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionLogli_x0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionLogli *arg1 = (ase::DistributionLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionLogli_x0" "', argument " "1"" of type '" "ase::DistributionLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionLogli * >(argp1);
  {
    try {
      result = (double)((ase::DistributionLogli const *)arg1)->x0();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionLogli_distribution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionLogli *arg1 = (ase::DistributionLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::AbsDistributionModel1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionLogli_distribution" "', argument " "1"" of type '" "ase::DistributionLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionLogli * >(argp1);
  {
    try {
      result = (ase::AbsDistributionModel1D *) &((ase::DistributionLogli const *)arg1)->distribution();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionLogli_posteriorMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionLogli *arg1 = (ase::DistributionLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionLogli_posteriorMean" "', argument " "1"" of type '" "ase::DistributionLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionLogli * >(argp1);
  {
    try {
      result = (double)((ase::DistributionLogli const *)arg1)->posteriorMean();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionLogli_posteriorVariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionLogli *arg1 = (ase::DistributionLogli *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionLogli, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionLogli_posteriorVariance" "', argument " "1"" of type '" "ase::DistributionLogli const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionLogli * >(argp1);
  {
    try {
      result = (double)((ase::DistributionLogli const *)arg1)->posteriorVariance();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DistributionLogli_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__DistributionLogli, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DistributionLogli_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ConservativeSpline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  ase::ConservativeSpline *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ConservativeSpline", 4, 4, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ConservativeSpline" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ConservativeSpline" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ConservativeSpline" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ConservativeSpline" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (ase::ConservativeSpline *)new ase::ConservativeSpline(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ConservativeSpline, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ConservativeSpline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConservativeSpline *arg1 = (ase::ConservativeSpline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConservativeSpline, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConservativeSpline" "', argument " "1"" of type '" "ase::ConservativeSpline *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConservativeSpline * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConservativeSpline_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConservativeSpline *arg1 = (ase::ConservativeSpline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::ConservativeSpline *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConservativeSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConservativeSpline_clone" "', argument " "1"" of type '" "ase::ConservativeSpline const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConservativeSpline * >(argp1);
  {
    try {
      result = (ase::ConservativeSpline *)((ase::ConservativeSpline const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ConservativeSpline, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConservativeSpline_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConservativeSpline *arg1 = (ase::ConservativeSpline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConservativeSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConservativeSpline_stepSize" "', argument " "1"" of type '" "ase::ConservativeSpline const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConservativeSpline * >(argp1);
  {
    try {
      result = (double)((ase::ConservativeSpline const *)arg1)->stepSize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConservativeSpline_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConservativeSpline *arg1 = (ase::ConservativeSpline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConservativeSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConservativeSpline_classname" "', argument " "1"" of type '" "ase::ConservativeSpline const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConservativeSpline * >(argp1);
  {
    try {
      result = ((ase::ConservativeSpline const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConservativeSpline_limitingFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConservativeSpline *arg1 = (ase::ConservativeSpline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConservativeSpline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConservativeSpline_limitingFactor" "', argument " "1"" of type '" "ase::ConservativeSpline const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConservativeSpline * >(argp1);
  {
    try {
      result = (double)((ase::ConservativeSpline const *)arg1)->limitingFactor();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConservativeSpline_maxDerivLimitFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "ConservativeSpline_maxDerivLimitFactor", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ConservativeSpline_maxDerivLimitFactor" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConservativeSpline_maxDerivLimitFactor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)ase::ConservativeSpline::maxDerivLimitFactor(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ConservativeSpline_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__ConservativeSpline, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ConservativeSpline_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ConservativeSigma05(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::ConservativeSigma05 *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ConservativeSigma05", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ConservativeSigma05" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ConservativeSigma05" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ConservativeSigma05" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::ConservativeSigma05 *)new ase::ConservativeSigma05(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ConservativeSigma05, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ConservativeSigma05(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConservativeSigma05 *arg1 = (ase::ConservativeSigma05 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConservativeSigma05, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConservativeSigma05" "', argument " "1"" of type '" "ase::ConservativeSigma05 *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConservativeSigma05 * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConservativeSigma05_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConservativeSigma05 *arg1 = (ase::ConservativeSigma05 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::ConservativeSigma05 *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConservativeSigma05, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConservativeSigma05_clone" "', argument " "1"" of type '" "ase::ConservativeSigma05 const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConservativeSigma05 * >(argp1);
  {
    try {
      result = (ase::ConservativeSigma05 *)((ase::ConservativeSigma05 const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ConservativeSigma05, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConservativeSigma05_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConservativeSigma05 *arg1 = (ase::ConservativeSigma05 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConservativeSigma05, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConservativeSigma05_classname" "', argument " "1"" of type '" "ase::ConservativeSigma05 const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConservativeSigma05 * >(argp1);
  {
    try {
      result = ((ase::ConservativeSigma05 const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ConservativeSigma05_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__ConservativeSigma05, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ConservativeSigma05_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ConservativeSigma10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::ConservativeSigma10 *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ConservativeSigma10", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ConservativeSigma10" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ConservativeSigma10" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ConservativeSigma10" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::ConservativeSigma10 *)new ase::ConservativeSigma10(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ConservativeSigma10, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ConservativeSigma10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConservativeSigma10 *arg1 = (ase::ConservativeSigma10 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConservativeSigma10, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConservativeSigma10" "', argument " "1"" of type '" "ase::ConservativeSigma10 *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConservativeSigma10 * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConservativeSigma10_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConservativeSigma10 *arg1 = (ase::ConservativeSigma10 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::ConservativeSigma10 *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConservativeSigma10, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConservativeSigma10_clone" "', argument " "1"" of type '" "ase::ConservativeSigma10 const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConservativeSigma10 * >(argp1);
  {
    try {
      result = (ase::ConservativeSigma10 *)((ase::ConservativeSigma10 const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ConservativeSigma10, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConservativeSigma10_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConservativeSigma10 *arg1 = (ase::ConservativeSigma10 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConservativeSigma10, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConservativeSigma10_classname" "', argument " "1"" of type '" "ase::ConservativeSigma10 const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConservativeSigma10 * >(argp1);
  {
    try {
      result = ((ase::ConservativeSigma10 const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ConservativeSigma10_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__ConservativeSigma10, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ConservativeSigma10_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ConservativeSigma15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::ConservativeSigma15 *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ConservativeSigma15", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ConservativeSigma15" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ConservativeSigma15" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ConservativeSigma15" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::ConservativeSigma15 *)new ase::ConservativeSigma15(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ConservativeSigma15, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ConservativeSigma15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConservativeSigma15 *arg1 = (ase::ConservativeSigma15 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConservativeSigma15, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConservativeSigma15" "', argument " "1"" of type '" "ase::ConservativeSigma15 *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConservativeSigma15 * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConservativeSigma15_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConservativeSigma15 *arg1 = (ase::ConservativeSigma15 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::ConservativeSigma15 *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConservativeSigma15, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConservativeSigma15_clone" "', argument " "1"" of type '" "ase::ConservativeSigma15 const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConservativeSigma15 * >(argp1);
  {
    try {
      result = (ase::ConservativeSigma15 *)((ase::ConservativeSigma15 const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ConservativeSigma15, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConservativeSigma15_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConservativeSigma15 *arg1 = (ase::ConservativeSigma15 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConservativeSigma15, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConservativeSigma15_classname" "', argument " "1"" of type '" "ase::ConservativeSigma15 const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConservativeSigma15 * >(argp1);
  {
    try {
      result = ((ase::ConservativeSigma15 const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ConservativeSigma15_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__ConservativeSigma15, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ConservativeSigma15_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ConservativeSigma20(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::ConservativeSigma20 *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ConservativeSigma20", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ConservativeSigma20" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ConservativeSigma20" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ConservativeSigma20" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::ConservativeSigma20 *)new ase::ConservativeSigma20(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ConservativeSigma20, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ConservativeSigma20(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConservativeSigma20 *arg1 = (ase::ConservativeSigma20 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConservativeSigma20, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConservativeSigma20" "', argument " "1"" of type '" "ase::ConservativeSigma20 *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConservativeSigma20 * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConservativeSigma20_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConservativeSigma20 *arg1 = (ase::ConservativeSigma20 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::ConservativeSigma20 *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConservativeSigma20, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConservativeSigma20_clone" "', argument " "1"" of type '" "ase::ConservativeSigma20 const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConservativeSigma20 * >(argp1);
  {
    try {
      result = (ase::ConservativeSigma20 *)((ase::ConservativeSigma20 const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ConservativeSigma20, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConservativeSigma20_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConservativeSigma20 *arg1 = (ase::ConservativeSigma20 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConservativeSigma20, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConservativeSigma20_classname" "', argument " "1"" of type '" "ase::ConservativeSigma20 const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConservativeSigma20 * >(argp1);
  {
    try {
      result = ((ase::ConservativeSigma20 const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ConservativeSigma20_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__ConservativeSigma20, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ConservativeSigma20_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ConservativeSigmaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::ConservativeSigmaMax *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ConservativeSigmaMax", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ConservativeSigmaMax" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ConservativeSigmaMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ConservativeSigmaMax" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::ConservativeSigmaMax *)new ase::ConservativeSigmaMax(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ConservativeSigmaMax, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ConservativeSigmaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConservativeSigmaMax *arg1 = (ase::ConservativeSigmaMax *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConservativeSigmaMax, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConservativeSigmaMax" "', argument " "1"" of type '" "ase::ConservativeSigmaMax *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConservativeSigmaMax * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConservativeSigmaMax_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConservativeSigmaMax *arg1 = (ase::ConservativeSigmaMax *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::ConservativeSigmaMax *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConservativeSigmaMax, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConservativeSigmaMax_clone" "', argument " "1"" of type '" "ase::ConservativeSigmaMax const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConservativeSigmaMax * >(argp1);
  {
    try {
      result = (ase::ConservativeSigmaMax *)((ase::ConservativeSigmaMax const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__ConservativeSigmaMax, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConservativeSigmaMax_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::ConservativeSigmaMax *arg1 = (ase::ConservativeSigmaMax *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__ConservativeSigmaMax, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConservativeSigmaMax_classname" "', argument " "1"" of type '" "ase::ConservativeSigmaMax const *""'"); 
  }
  arg1 = reinterpret_cast< ase::ConservativeSigmaMax * >(argp1);
  {
    try {
      result = ((ase::ConservativeSigmaMax const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ConservativeSigmaMax_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__ConservativeSigmaMax, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ConservativeSigmaMax_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_EquidistantGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  double arg2 ;
  double arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::EquidistantGrid *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_EquidistantGrid", 3, 3, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_EquidistantGrid" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_EquidistantGrid" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_EquidistantGrid" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::EquidistantGrid *)new ase::EquidistantGrid(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__EquidistantGrid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquidistantGrid_nCoords(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EquidistantGrid *arg1 = (ase::EquidistantGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EquidistantGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquidistantGrid_nCoords" "', argument " "1"" of type '" "ase::EquidistantGrid const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EquidistantGrid * >(argp1);
  {
    try {
      result = (unsigned int)((ase::EquidistantGrid const *)arg1)->nCoords();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquidistantGrid_min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EquidistantGrid *arg1 = (ase::EquidistantGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EquidistantGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquidistantGrid_min" "', argument " "1"" of type '" "ase::EquidistantGrid const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EquidistantGrid * >(argp1);
  {
    try {
      result = (double)((ase::EquidistantGrid const *)arg1)->min();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquidistantGrid_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EquidistantGrid *arg1 = (ase::EquidistantGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EquidistantGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquidistantGrid_max" "', argument " "1"" of type '" "ase::EquidistantGrid const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EquidistantGrid * >(argp1);
  {
    try {
      result = (double)((ase::EquidistantGrid const *)arg1)->max();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquidistantGrid_getInterval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EquidistantGrid *arg1 = (ase::EquidistantGrid *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::pair< unsigned int,double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "EquidistantGrid_getInterval", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EquidistantGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquidistantGrid_getInterval" "', argument " "1"" of type '" "ase::EquidistantGrid const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EquidistantGrid * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquidistantGrid_getInterval" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((ase::EquidistantGrid const *)arg1)->getInterval(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::pair< unsigned int,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquidistantGrid_coords(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EquidistantGrid *arg1 = (ase::EquidistantGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double,std::allocator< double > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EquidistantGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquidistantGrid_coords" "', argument " "1"" of type '" "ase::EquidistantGrid const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EquidistantGrid * >(argp1);
  {
    try {
      result = ((ase::EquidistantGrid const *)arg1)->coords();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquidistantGrid_coordinate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EquidistantGrid *arg1 = (ase::EquidistantGrid *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "EquidistantGrid_coordinate", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EquidistantGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquidistantGrid_coordinate" "', argument " "1"" of type '" "ase::EquidistantGrid const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EquidistantGrid * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquidistantGrid_coordinate" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (double)((ase::EquidistantGrid const *)arg1)->coordinate(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquidistantGrid_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EquidistantGrid *arg1 = (ase::EquidistantGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EquidistantGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquidistantGrid_length" "', argument " "1"" of type '" "ase::EquidistantGrid const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EquidistantGrid * >(argp1);
  {
    try {
      result = (double)((ase::EquidistantGrid const *)arg1)->length();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquidistantGrid_isUniform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EquidistantGrid *arg1 = (ase::EquidistantGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EquidistantGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquidistantGrid_isUniform" "', argument " "1"" of type '" "ase::EquidistantGrid const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EquidistantGrid * >(argp1);
  {
    try {
      result = (bool)((ase::EquidistantGrid const *)arg1)->isUniform();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquidistantGrid_nIntervals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EquidistantGrid *arg1 = (ase::EquidistantGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EquidistantGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquidistantGrid_nIntervals" "', argument " "1"" of type '" "ase::EquidistantGrid const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EquidistantGrid * >(argp1);
  {
    try {
      result = (unsigned int)((ase::EquidistantGrid const *)arg1)->nIntervals();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquidistantGrid_intervalWidth__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::EquidistantGrid *arg1 = (ase::EquidistantGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EquidistantGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquidistantGrid_intervalWidth" "', argument " "1"" of type '" "ase::EquidistantGrid const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EquidistantGrid * >(argp1);
  {
    try {
      result = (double)((ase::EquidistantGrid const *)arg1)->intervalWidth();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquidistantGrid_intervalWidth__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::EquidistantGrid *arg1 = (ase::EquidistantGrid *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EquidistantGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EquidistantGrid_intervalWidth" "', argument " "1"" of type '" "ase::EquidistantGrid const *""'"); 
  }
  arg1 = reinterpret_cast< ase::EquidistantGrid * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EquidistantGrid_intervalWidth" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (double)((ase::EquidistantGrid const *)arg1)->intervalWidth(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EquidistantGrid_intervalWidth(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "EquidistantGrid_intervalWidth", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__EquidistantGrid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_EquidistantGrid_intervalWidth__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__EquidistantGrid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_EquidistantGrid_intervalWidth__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'EquidistantGrid_intervalWidth'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::EquidistantGrid::intervalWidth() const\n"
    "    ase::EquidistantGrid::intervalWidth(unsigned int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_EquidistantGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EquidistantGrid *arg1 = (ase::EquidistantGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__EquidistantGrid, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EquidistantGrid" "', argument " "1"" of type '" "ase::EquidistantGrid *""'"); 
  }
  arg1 = reinterpret_cast< ase::EquidistantGrid * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EquidistantGrid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__EquidistantGrid, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *EquidistantGrid_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_kullbackLeiblerDivergence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  ase::AbsDistributionModel1D *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  double result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "kullbackLeiblerDivergence" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "kullbackLeiblerDivergence" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "kullbackLeiblerDivergence" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "kullbackLeiblerDivergence" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "kullbackLeiblerDivergence" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "kullbackLeiblerDivergence" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (double)ase::kullbackLeiblerDivergence((ase::AbsDistributionModel1D const &)*arg1,(ase::AbsDistributionModel1D const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_kullbackLeiblerDivergence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  ase::AbsDistributionModel1D *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "kullbackLeiblerDivergence" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "kullbackLeiblerDivergence" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "kullbackLeiblerDivergence" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "kullbackLeiblerDivergence" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "kullbackLeiblerDivergence" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (double)ase::kullbackLeiblerDivergence((ase::AbsDistributionModel1D const &)*arg1,(ase::AbsDistributionModel1D const &)*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_kullbackLeiblerDivergence__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  ase::AbsDistributionModel1D *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  double result;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "kullbackLeiblerDivergence" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "kullbackLeiblerDivergence" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "kullbackLeiblerDivergence" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "kullbackLeiblerDivergence" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "kullbackLeiblerDivergence" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "kullbackLeiblerDivergence" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "kullbackLeiblerDivergence" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "kullbackLeiblerDivergence" "', argument " "6"" of type '" "unsigned int""'");
  } 
  arg6 = static_cast< unsigned int >(val6);
  {
    try {
      result = (double)ase::kullbackLeiblerDivergence((ase::AbsDistributionModel1D const &)*arg1,(ase::AbsDistributionModel1D const &)*arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_kullbackLeiblerDivergence__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  ase::AbsDistributionModel1D *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "kullbackLeiblerDivergence" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "kullbackLeiblerDivergence" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "kullbackLeiblerDivergence" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "kullbackLeiblerDivergence" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "kullbackLeiblerDivergence" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "kullbackLeiblerDivergence" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "kullbackLeiblerDivergence" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  {
    try {
      result = (double)ase::kullbackLeiblerDivergence((ase::AbsDistributionModel1D const &)*arg1,(ase::AbsDistributionModel1D const &)*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_kullbackLeiblerDivergence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "kullbackLeiblerDivergence", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_kullbackLeiblerDivergence__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_kullbackLeiblerDivergence__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_kullbackLeiblerDivergence__SWIG_3(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_kullbackLeiblerDivergence__SWIG_2(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'kullbackLeiblerDivergence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::kullbackLeiblerDivergence(ase::AbsDistributionModel1D const &,ase::AbsDistributionModel1D const &,unsigned int,unsigned int)\n"
    "    ase::kullbackLeiblerDivergence(ase::AbsDistributionModel1D const &,ase::AbsDistributionModel1D const &,unsigned int)\n"
    "    ase::kullbackLeiblerDivergence(ase::AbsDistributionModel1D const &,ase::AbsDistributionModel1D const &,double,double,unsigned int,unsigned int)\n"
    "    ase::kullbackLeiblerDivergence(ase::AbsDistributionModel1D const &,ase::AbsDistributionModel1D const &,double,double,unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_GaussLegendreQuadrature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::GaussLegendreQuadrature *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GaussLegendreQuadrature" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (ase::GaussLegendreQuadrature *)new ase::GaussLegendreQuadrature(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__GaussLegendreQuadrature, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GaussLegendreQuadrature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::GaussLegendreQuadrature *arg1 = (ase::GaussLegendreQuadrature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GaussLegendreQuadrature, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GaussLegendreQuadrature" "', argument " "1"" of type '" "ase::GaussLegendreQuadrature *""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussLegendreQuadrature * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLegendreQuadrature_npoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::GaussLegendreQuadrature *arg1 = (ase::GaussLegendreQuadrature *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GaussLegendreQuadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussLegendreQuadrature_npoints" "', argument " "1"" of type '" "ase::GaussLegendreQuadrature const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussLegendreQuadrature * >(argp1);
  {
    try {
      result = (unsigned int)((ase::GaussLegendreQuadrature const *)arg1)->npoints();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLegendreQuadrature_isAllowed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GaussLegendreQuadrature_isAllowed" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (bool)ase::GaussLegendreQuadrature::isAllowed(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLegendreQuadrature_allowedNPonts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::vector< unsigned int,std::allocator< unsigned int > > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "GaussLegendreQuadrature_allowedNPonts", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ase::GaussLegendreQuadrature::allowedNPonts();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< unsigned int,std::allocator< unsigned int > >(static_cast< const std::vector< unsigned int,std::allocator< unsigned int > >& >(result))), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLegendreQuadrature_minimalExactRule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GaussLegendreQuadrature_minimalExactRule" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (unsigned int)ase::GaussLegendreQuadrature::minimalExactRule(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLegendreQuadrature_integrate__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::GaussLegendreQuadrature *arg1 = (ase::GaussLegendreQuadrature *) 0 ;
  ase::MomentFunctor1D *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GaussLegendreQuadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "1"" of type '" "ase::GaussLegendreQuadrature const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussLegendreQuadrature * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__MomentFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "2"" of type '" "ase::MomentFunctor1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussLegendreQuadrature_integrate" "', argument " "2"" of type '" "ase::MomentFunctor1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::MomentFunctor1D * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (double)((ase::GaussLegendreQuadrature const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR integrate2< ase::MomentFunctor1D >((ase::MomentFunctor1D const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLegendreQuadrature_integrate__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::GaussLegendreQuadrature *arg1 = (ase::GaussLegendreQuadrature *) 0 ;
  ase::MomentFunctor1D *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GaussLegendreQuadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "1"" of type '" "ase::GaussLegendreQuadrature const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussLegendreQuadrature * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__MomentFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "2"" of type '" "ase::MomentFunctor1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussLegendreQuadrature_integrate" "', argument " "2"" of type '" "ase::MomentFunctor1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::MomentFunctor1D * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  {
    try {
      result = (double)((ase::GaussLegendreQuadrature const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR integrate2< ase::MomentFunctor1D >((ase::MomentFunctor1D const &)*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLegendreQuadrature_integrate__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::GaussLegendreQuadrature *arg1 = (ase::GaussLegendreQuadrature *) 0 ;
  asepy::PyFunctor1 *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GaussLegendreQuadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "1"" of type '" "ase::GaussLegendreQuadrature const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussLegendreQuadrature * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_asepy__PyFunctor1,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "2"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussLegendreQuadrature_integrate" "', argument " "2"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  arg2 = reinterpret_cast< asepy::PyFunctor1 * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (double)((ase::GaussLegendreQuadrature const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR integrate2< asepy::PyFunctor1 >((asepy::PyFunctor1 const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLegendreQuadrature_integrate__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::GaussLegendreQuadrature *arg1 = (ase::GaussLegendreQuadrature *) 0 ;
  asepy::PyFunctor1 *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GaussLegendreQuadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "1"" of type '" "ase::GaussLegendreQuadrature const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussLegendreQuadrature * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_asepy__PyFunctor1,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "2"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussLegendreQuadrature_integrate" "', argument " "2"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  arg2 = reinterpret_cast< asepy::PyFunctor1 * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  {
    try {
      result = (double)((ase::GaussLegendreQuadrature const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR integrate2< asepy::PyFunctor1 >((asepy::PyFunctor1 const &)*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLegendreQuadrature_integrate__SWIG_6(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::GaussLegendreQuadrature *arg1 = (ase::GaussLegendreQuadrature *) 0 ;
  ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GaussLegendreQuadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "1"" of type '" "ase::GaussLegendreQuadrature const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussLegendreQuadrature * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__FunctorTimesShiftedXHelperT_ase__NumericalConvolution_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "2"" of type '" "ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussLegendreQuadrature_integrate" "', argument " "2"" of type '" "ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > const &""'"); 
  }
  arg2 = reinterpret_cast< ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (double)((ase::GaussLegendreQuadrature const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR integrate2< ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > >((ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLegendreQuadrature_integrate__SWIG_7(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::GaussLegendreQuadrature *arg1 = (ase::GaussLegendreQuadrature *) 0 ;
  ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GaussLegendreQuadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "1"" of type '" "ase::GaussLegendreQuadrature const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussLegendreQuadrature * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__FunctorTimesShiftedXHelperT_ase__NumericalConvolution_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "2"" of type '" "ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussLegendreQuadrature_integrate" "', argument " "2"" of type '" "ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > const &""'"); 
  }
  arg2 = reinterpret_cast< ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  {
    try {
      result = (double)((ase::GaussLegendreQuadrature const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR integrate2< ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > >((ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > const &)*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLegendreQuadrature_integrate__SWIG_8(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::GaussLegendreQuadrature *arg1 = (ase::GaussLegendreQuadrature *) 0 ;
  ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GaussLegendreQuadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "1"" of type '" "ase::GaussLegendreQuadrature const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussLegendreQuadrature * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__FunctorTimesShiftedXHelperT_ase__GaussianConvolution_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "2"" of type '" "ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussLegendreQuadrature_integrate" "', argument " "2"" of type '" "ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > const &""'"); 
  }
  arg2 = reinterpret_cast< ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (double)((ase::GaussLegendreQuadrature const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR integrate2< ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > >((ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLegendreQuadrature_integrate__SWIG_9(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::GaussLegendreQuadrature *arg1 = (ase::GaussLegendreQuadrature *) 0 ;
  ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double result;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__GaussLegendreQuadrature, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "1"" of type '" "ase::GaussLegendreQuadrature const *""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussLegendreQuadrature * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__FunctorTimesShiftedXHelperT_ase__GaussianConvolution_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "2"" of type '" "ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussLegendreQuadrature_integrate" "', argument " "2"" of type '" "ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > const &""'"); 
  }
  arg2 = reinterpret_cast< ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GaussLegendreQuadrature_integrate" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  {
    try {
      result = (double)((ase::GaussLegendreQuadrature const *)arg1)->SWIGTEMPLATEDISAMBIGUATOR integrate2< ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > >((ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > const &)*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussLegendreQuadrature_integrate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "GaussLegendreQuadrature_integrate", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__GaussLegendreQuadrature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ase__MomentFunctor1D, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_GaussLegendreQuadrature_integrate__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__GaussLegendreQuadrature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_asepy__PyFunctor1, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_GaussLegendreQuadrature_integrate__SWIG_4(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__GaussLegendreQuadrature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ase__FunctorTimesShiftedXHelperT_ase__NumericalConvolution_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_GaussLegendreQuadrature_integrate__SWIG_6(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__GaussLegendreQuadrature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ase__FunctorTimesShiftedXHelperT_ase__GaussianConvolution_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_GaussLegendreQuadrature_integrate__SWIG_8(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__GaussLegendreQuadrature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ase__MomentFunctor1D, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_GaussLegendreQuadrature_integrate__SWIG_3(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__GaussLegendreQuadrature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ase__FunctorTimesShiftedXHelperT_ase__NumericalConvolution_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_GaussLegendreQuadrature_integrate__SWIG_7(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__GaussLegendreQuadrature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_asepy__PyFunctor1, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_GaussLegendreQuadrature_integrate__SWIG_5(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__GaussLegendreQuadrature, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ase__FunctorTimesShiftedXHelperT_ase__GaussianConvolution_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_GaussLegendreQuadrature_integrate__SWIG_9(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'GaussLegendreQuadrature_integrate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::GaussLegendreQuadrature::integrate2< ase::MomentFunctor1D >(ase::MomentFunctor1D const &,double const,double const) const\n"
    "    ase::GaussLegendreQuadrature::integrate2< ase::MomentFunctor1D >(ase::MomentFunctor1D const &,double const,double const,unsigned int const) const\n"
    "    ase::GaussLegendreQuadrature::integrate2< asepy::PyFunctor1 >(asepy::PyFunctor1 const &,double const,double const) const\n"
    "    ase::GaussLegendreQuadrature::integrate2< asepy::PyFunctor1 >(asepy::PyFunctor1 const &,double const,double const,unsigned int const) const\n"
    "    ase::GaussLegendreQuadrature::integrate2< ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > >(ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > const &,double const,double const) const\n"
    "    ase::GaussLegendreQuadrature::integrate2< ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > >(ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > const &,double const,double const,unsigned int const) const\n"
    "    ase::GaussLegendreQuadrature::integrate2< ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > >(ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > const &,double const,double const) const\n"
    "    ase::GaussLegendreQuadrature::integrate2< ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > >(ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > const &,double const,double const,unsigned int const) const\n");
  return 0;
}


SWIGINTERN PyObject *GaussLegendreQuadrature_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__GaussLegendreQuadrature, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *GaussLegendreQuadrature_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_DiscretizedConvolution__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  ase::AbsDistributionModel1D *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  unsigned int arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  ase::DiscretizedConvolution *result = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DiscretizedConvolution" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiscretizedConvolution" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DiscretizedConvolution" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiscretizedConvolution" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DiscretizedConvolution" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DiscretizedConvolution" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_DiscretizedConvolution" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  ecode6 = SWIG_AsVal_bool(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_DiscretizedConvolution" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  {
    try {
      result = (ase::DiscretizedConvolution *)new ase::DiscretizedConvolution((ase::AbsDistributionModel1D const &)*arg1,(ase::AbsDistributionModel1D const &)*arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DiscretizedConvolution, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiscretizedConvolution__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  ase::AbsDistributionModel1D *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  ase::DiscretizedConvolution *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DiscretizedConvolution" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiscretizedConvolution" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DiscretizedConvolution" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiscretizedConvolution" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DiscretizedConvolution" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DiscretizedConvolution" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_DiscretizedConvolution" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  {
    try {
      result = (ase::DiscretizedConvolution *)new ase::DiscretizedConvolution((ase::AbsDistributionModel1D const &)*arg1,(ase::AbsDistributionModel1D const &)*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DiscretizedConvolution, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiscretizedConvolution(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_DiscretizedConvolution", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_DiscretizedConvolution__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_DiscretizedConvolution__SWIG_0(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_DiscretizedConvolution'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::DiscretizedConvolution::DiscretizedConvolution(ase::AbsDistributionModel1D const &,ase::AbsDistributionModel1D const &,double,double,unsigned int,bool)\n"
    "    ase::DiscretizedConvolution::DiscretizedConvolution(ase::AbsDistributionModel1D const &,ase::AbsDistributionModel1D const &,double,double,unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DiscretizedConvolution_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DiscretizedConvolution *arg1 = (ase::DiscretizedConvolution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DiscretizedConvolution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedConvolution_normalize" "', argument " "1"" of type '" "ase::DiscretizedConvolution *""'"); 
  }
  arg1 = reinterpret_cast< ase::DiscretizedConvolution * >(argp1);
  {
    try {
      (arg1)->normalize();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedConvolution___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DiscretizedConvolution *arg1 = (ase::DiscretizedConvolution *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DiscretizedConvolution___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DiscretizedConvolution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedConvolution___call__" "', argument " "1"" of type '" "ase::DiscretizedConvolution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DiscretizedConvolution * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiscretizedConvolution___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::DiscretizedConvolution const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedConvolution_densityIntegral(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DiscretizedConvolution *arg1 = (ase::DiscretizedConvolution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DiscretizedConvolution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedConvolution_densityIntegral" "', argument " "1"" of type '" "ase::DiscretizedConvolution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DiscretizedConvolution * >(argp1);
  {
    try {
      result = (double)((ase::DiscretizedConvolution const *)arg1)->densityIntegral();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedConvolution_xmin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DiscretizedConvolution *arg1 = (ase::DiscretizedConvolution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DiscretizedConvolution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedConvolution_xmin" "', argument " "1"" of type '" "ase::DiscretizedConvolution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DiscretizedConvolution * >(argp1);
  {
    try {
      result = (double)((ase::DiscretizedConvolution const *)arg1)->xmin();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedConvolution_xmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DiscretizedConvolution *arg1 = (ase::DiscretizedConvolution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DiscretizedConvolution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedConvolution_xmax" "', argument " "1"" of type '" "ase::DiscretizedConvolution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DiscretizedConvolution * >(argp1);
  {
    try {
      result = (double)((ase::DiscretizedConvolution const *)arg1)->xmax();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedConvolution_nIntervals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DiscretizedConvolution *arg1 = (ase::DiscretizedConvolution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DiscretizedConvolution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedConvolution_nIntervals" "', argument " "1"" of type '" "ase::DiscretizedConvolution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DiscretizedConvolution * >(argp1);
  {
    try {
      result = (unsigned int)((ase::DiscretizedConvolution const *)arg1)->nIntervals();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedConvolution_intervalWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DiscretizedConvolution *arg1 = (ase::DiscretizedConvolution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DiscretizedConvolution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedConvolution_intervalWidth" "', argument " "1"" of type '" "ase::DiscretizedConvolution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DiscretizedConvolution * >(argp1);
  {
    try {
      result = (double)((ase::DiscretizedConvolution const *)arg1)->intervalWidth();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedConvolution_isNormalized(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DiscretizedConvolution *arg1 = (ase::DiscretizedConvolution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DiscretizedConvolution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedConvolution_isNormalized" "', argument " "1"" of type '" "ase::DiscretizedConvolution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DiscretizedConvolution * >(argp1);
  {
    try {
      result = (bool)((ase::DiscretizedConvolution const *)arg1)->isNormalized();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedConvolution_convolvedValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DiscretizedConvolution *arg1 = (ase::DiscretizedConvolution *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DiscretizedConvolution_convolvedValue", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DiscretizedConvolution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedConvolution_convolvedValue" "', argument " "1"" of type '" "ase::DiscretizedConvolution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DiscretizedConvolution * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiscretizedConvolution_convolvedValue" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (double)((ase::DiscretizedConvolution const *)arg1)->convolvedValue(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedConvolution_coordinateAt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DiscretizedConvolution *arg1 = (ase::DiscretizedConvolution *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DiscretizedConvolution_coordinateAt", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DiscretizedConvolution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedConvolution_coordinateAt" "', argument " "1"" of type '" "ase::DiscretizedConvolution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DiscretizedConvolution * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiscretizedConvolution_coordinateAt" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (double)((ase::DiscretizedConvolution const *)arg1)->coordinateAt(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedConvolution_constructTabulatedDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DiscretizedConvolution *arg1 = (ase::DiscretizedConvolution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< ase::TabulatedDensity1D > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DiscretizedConvolution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedConvolution_constructTabulatedDensity" "', argument " "1"" of type '" "ase::DiscretizedConvolution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DiscretizedConvolution * >(argp1);
  {
    try {
      result = ((ase::DiscretizedConvolution const *)arg1)->constructTabulatedDensity();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::TabulatedDensity1D(static_cast< const ase::TabulatedDensity1D& >(result))), SWIGTYPE_p_ase__TabulatedDensity1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscretizedConvolution_constructInterpolatedDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DiscretizedConvolution *arg1 = (ase::DiscretizedConvolution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< ase::InterpolatedDensity1D > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DiscretizedConvolution, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscretizedConvolution_constructInterpolatedDensity" "', argument " "1"" of type '" "ase::DiscretizedConvolution const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DiscretizedConvolution * >(argp1);
  {
    try {
      result = ((ase::DiscretizedConvolution const *)arg1)->constructInterpolatedDensity();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::InterpolatedDensity1D(static_cast< const ase::InterpolatedDensity1D& >(result))), SWIGTYPE_p_ase__InterpolatedDensity1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DiscretizedConvolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DiscretizedConvolution *arg1 = (ase::DiscretizedConvolution *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DiscretizedConvolution, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DiscretizedConvolution" "', argument " "1"" of type '" "ase::DiscretizedConvolution *""'"); 
  }
  arg1 = reinterpret_cast< ase::DiscretizedConvolution * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DiscretizedConvolution_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__DiscretizedConvolution, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DiscretizedConvolution_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_TruncatedDistribution1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::TruncatedDistribution1D *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_TruncatedDistribution1D", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TruncatedDistribution1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TruncatedDistribution1D" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TruncatedDistribution1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TruncatedDistribution1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::TruncatedDistribution1D *)new ase::TruncatedDistribution1D((ase::AbsDistributionModel1D const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__TruncatedDistribution1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TruncatedDistribution1D_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TruncatedDistribution1D *arg1 = (ase::TruncatedDistribution1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::TruncatedDistribution1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TruncatedDistribution1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TruncatedDistribution1D_clone" "', argument " "1"" of type '" "ase::TruncatedDistribution1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TruncatedDistribution1D * >(argp1);
  {
    try {
      result = (ase::TruncatedDistribution1D *)((ase::TruncatedDistribution1D const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__TruncatedDistribution1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TruncatedDistribution1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TruncatedDistribution1D *arg1 = (ase::TruncatedDistribution1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TruncatedDistribution1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TruncatedDistribution1D" "', argument " "1"" of type '" "ase::TruncatedDistribution1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::TruncatedDistribution1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TruncatedDistribution1D_density(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TruncatedDistribution1D *arg1 = (ase::TruncatedDistribution1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "TruncatedDistribution1D_density", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TruncatedDistribution1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TruncatedDistribution1D_density" "', argument " "1"" of type '" "ase::TruncatedDistribution1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TruncatedDistribution1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TruncatedDistribution1D_density" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::TruncatedDistribution1D const *)arg1)->density(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TruncatedDistribution1D_isDensityContinuous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TruncatedDistribution1D *arg1 = (ase::TruncatedDistribution1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TruncatedDistribution1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TruncatedDistribution1D_isDensityContinuous" "', argument " "1"" of type '" "ase::TruncatedDistribution1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TruncatedDistribution1D * >(argp1);
  {
    try {
      result = (bool)((ase::TruncatedDistribution1D const *)arg1)->isDensityContinuous();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TruncatedDistribution1D_isNonNegative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TruncatedDistribution1D *arg1 = (ase::TruncatedDistribution1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TruncatedDistribution1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TruncatedDistribution1D_isNonNegative" "', argument " "1"" of type '" "ase::TruncatedDistribution1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TruncatedDistribution1D * >(argp1);
  {
    try {
      result = (bool)((ase::TruncatedDistribution1D const *)arg1)->isNonNegative();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TruncatedDistribution1D_isUnimodal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TruncatedDistribution1D *arg1 = (ase::TruncatedDistribution1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TruncatedDistribution1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TruncatedDistribution1D_isUnimodal" "', argument " "1"" of type '" "ase::TruncatedDistribution1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TruncatedDistribution1D * >(argp1);
  {
    try {
      result = (bool)((ase::TruncatedDistribution1D const *)arg1)->isUnimodal();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TruncatedDistribution1D_densityDerivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TruncatedDistribution1D *arg1 = (ase::TruncatedDistribution1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "TruncatedDistribution1D_densityDerivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TruncatedDistribution1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TruncatedDistribution1D_densityDerivative" "', argument " "1"" of type '" "ase::TruncatedDistribution1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TruncatedDistribution1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TruncatedDistribution1D_densityDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::TruncatedDistribution1D const *)arg1)->densityDerivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TruncatedDistribution1D_cdf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TruncatedDistribution1D *arg1 = (ase::TruncatedDistribution1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "TruncatedDistribution1D_cdf", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TruncatedDistribution1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TruncatedDistribution1D_cdf" "', argument " "1"" of type '" "ase::TruncatedDistribution1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TruncatedDistribution1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TruncatedDistribution1D_cdf" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::TruncatedDistribution1D const *)arg1)->cdf(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TruncatedDistribution1D_exceedance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TruncatedDistribution1D *arg1 = (ase::TruncatedDistribution1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "TruncatedDistribution1D_exceedance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TruncatedDistribution1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TruncatedDistribution1D_exceedance" "', argument " "1"" of type '" "ase::TruncatedDistribution1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TruncatedDistribution1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TruncatedDistribution1D_exceedance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::TruncatedDistribution1D const *)arg1)->exceedance(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TruncatedDistribution1D_quantile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TruncatedDistribution1D *arg1 = (ase::TruncatedDistribution1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "TruncatedDistribution1D_quantile", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TruncatedDistribution1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TruncatedDistribution1D_quantile" "', argument " "1"" of type '" "ase::TruncatedDistribution1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TruncatedDistribution1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TruncatedDistribution1D_quantile" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::TruncatedDistribution1D const *)arg1)->quantile(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TruncatedDistribution1D_invExceedance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TruncatedDistribution1D *arg1 = (ase::TruncatedDistribution1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "TruncatedDistribution1D_invExceedance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TruncatedDistribution1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TruncatedDistribution1D_invExceedance" "', argument " "1"" of type '" "ase::TruncatedDistribution1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TruncatedDistribution1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TruncatedDistribution1D_invExceedance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::TruncatedDistribution1D const *)arg1)->invExceedance(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TruncatedDistribution1D_cumulant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TruncatedDistribution1D *arg1 = (ase::TruncatedDistribution1D *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "TruncatedDistribution1D_cumulant", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TruncatedDistribution1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TruncatedDistribution1D_cumulant" "', argument " "1"" of type '" "ase::TruncatedDistribution1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TruncatedDistribution1D * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TruncatedDistribution1D_cumulant" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (double)((ase::TruncatedDistribution1D const *)arg1)->cumulant(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TruncatedDistribution1D_mode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TruncatedDistribution1D *arg1 = (ase::TruncatedDistribution1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TruncatedDistribution1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TruncatedDistribution1D_mode" "', argument " "1"" of type '" "ase::TruncatedDistribution1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TruncatedDistribution1D * >(argp1);
  {
    try {
      result = (double)((ase::TruncatedDistribution1D const *)arg1)->mode();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TruncatedDistribution1D_descentDelta__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::TruncatedDistribution1D *arg1 = (ase::TruncatedDistribution1D *) 0 ;
  bool arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TruncatedDistribution1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TruncatedDistribution1D_descentDelta" "', argument " "1"" of type '" "ase::TruncatedDistribution1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TruncatedDistribution1D * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TruncatedDistribution1D_descentDelta" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TruncatedDistribution1D_descentDelta" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::TruncatedDistribution1D const *)arg1)->descentDelta(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TruncatedDistribution1D_descentDelta__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::TruncatedDistribution1D *arg1 = (ase::TruncatedDistribution1D *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TruncatedDistribution1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TruncatedDistribution1D_descentDelta" "', argument " "1"" of type '" "ase::TruncatedDistribution1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TruncatedDistribution1D * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TruncatedDistribution1D_descentDelta" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (double)((ase::TruncatedDistribution1D const *)arg1)->descentDelta(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TruncatedDistribution1D_descentDelta(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "TruncatedDistribution1D_descentDelta", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__TruncatedDistribution1D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TruncatedDistribution1D_descentDelta__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__TruncatedDistribution1D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TruncatedDistribution1D_descentDelta__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TruncatedDistribution1D_descentDelta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::TruncatedDistribution1D::descentDelta(bool,double) const\n"
    "    ase::TruncatedDistribution1D::descentDelta(bool) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TruncatedDistribution1D_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::TruncatedDistribution1D *arg1 = (ase::TruncatedDistribution1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__TruncatedDistribution1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TruncatedDistribution1D_classname" "', argument " "1"" of type '" "ase::TruncatedDistribution1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::TruncatedDistribution1D * >(argp1);
  {
    try {
      result = ((ase::TruncatedDistribution1D const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TruncatedDistribution1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__TruncatedDistribution1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TruncatedDistribution1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Interval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  ase::Interval< double > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (ase::Interval< double > *)new ase::Interval< double >();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__IntervalT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Interval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  ase::IntervalType arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  ase::Interval< double > *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Interval" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Interval" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Interval" "', argument " "3"" of type '" "ase::IntervalType""'");
  } 
  arg3 = static_cast< ase::IntervalType >(val3);
  {
    try {
      result = (ase::Interval< double > *)new ase::Interval< double >(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__IntervalT_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Interval(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Interval", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Interval__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Interval__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Interval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::Interval< double >::Interval()\n"
    "    ase::Interval< double >::Interval(double const,double const,ase::IntervalType const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Interval_min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Interval< double > *arg1 = (ase::Interval< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__IntervalT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interval_min" "', argument " "1"" of type '" "ase::Interval< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Interval< double > * >(argp1);
  {
    try {
      result = (double)((ase::Interval< double > const *)arg1)->min();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interval_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Interval< double > *arg1 = (ase::Interval< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__IntervalT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interval_max" "', argument " "1"" of type '" "ase::Interval< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Interval< double > * >(argp1);
  {
    try {
      result = (double)((ase::Interval< double > const *)arg1)->max();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interval_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Interval< double > *arg1 = (ase::Interval< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::IntervalType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__IntervalT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interval_type" "', argument " "1"" of type '" "ase::Interval< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Interval< double > * >(argp1);
  {
    try {
      result = (ase::IntervalType)((ase::Interval< double > const *)arg1)->type();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interval_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Interval< double > *arg1 = (ase::Interval< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__IntervalT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interval_length" "', argument " "1"" of type '" "ase::Interval< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Interval< double > * >(argp1);
  {
    try {
      result = (double)((ase::Interval< double > const *)arg1)->length();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interval_midpoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Interval< double > *arg1 = (ase::Interval< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__IntervalT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interval_midpoint" "', argument " "1"" of type '" "ase::Interval< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Interval< double > * >(argp1);
  {
    try {
      result = (double)((ase::Interval< double > const *)arg1)->midpoint();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interval_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Interval< double > *arg1 = (ase::Interval< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__IntervalT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interval_empty" "', argument " "1"" of type '" "ase::Interval< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Interval< double > * >(argp1);
  {
    try {
      result = (bool)((ase::Interval< double > const *)arg1)->empty();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interval_includesLeft(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Interval< double > *arg1 = (ase::Interval< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__IntervalT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interval_includesLeft" "', argument " "1"" of type '" "ase::Interval< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Interval< double > * >(argp1);
  {
    try {
      result = (bool)((ase::Interval< double > const *)arg1)->includesLeft();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interval_includesRight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Interval< double > *arg1 = (ase::Interval< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__IntervalT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interval_includesRight" "', argument " "1"" of type '" "ase::Interval< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Interval< double > * >(argp1);
  {
    try {
      result = (bool)((ase::Interval< double > const *)arg1)->includesRight();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interval_contains__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::Interval< double > *arg1 = (ase::Interval< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__IntervalT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interval_contains" "', argument " "1"" of type '" "ase::Interval< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Interval< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Interval_contains" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)((ase::Interval< double > const *)arg1)->contains(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interval_contains__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::Interval< double > *arg1 = (ase::Interval< double > *) 0 ;
  ase::Interval< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__IntervalT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interval_contains" "', argument " "1"" of type '" "ase::Interval< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Interval< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__IntervalT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Interval_contains" "', argument " "2"" of type '" "ase::Interval< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Interval_contains" "', argument " "2"" of type '" "ase::Interval< double > const &""'"); 
  }
  arg2 = reinterpret_cast< ase::Interval< double > * >(argp2);
  {
    try {
      result = (bool)((ase::Interval< double > const *)arg1)->contains((ase::Interval< double > const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interval_contains(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Interval_contains", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__IntervalT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ase__IntervalT_double_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Interval_contains__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__IntervalT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Interval_contains__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Interval_contains'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::Interval< double >::contains(double const) const\n"
    "    ase::Interval< double >::contains(ase::Interval< double > const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Interval_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Interval< double > *arg1 = (ase::Interval< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "Interval_distance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__IntervalT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interval_distance" "', argument " "1"" of type '" "ase::Interval< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Interval< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Interval_distance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::Interval< double > const *)arg1)->distance(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interval_overlap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Interval< double > *arg1 = (ase::Interval< double > *) 0 ;
  ase::Interval< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::Interval< double > result;
  
  if (!SWIG_Python_UnpackTuple(args, "Interval_overlap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__IntervalT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Interval_overlap" "', argument " "1"" of type '" "ase::Interval< double > const *""'"); 
  }
  arg1 = reinterpret_cast< ase::Interval< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__IntervalT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Interval_overlap" "', argument " "2"" of type '" "ase::Interval< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Interval_overlap" "', argument " "2"" of type '" "ase::Interval< double > const &""'"); 
  }
  arg2 = reinterpret_cast< ase::Interval< double > * >(argp2);
  {
    try {
      result = ((ase::Interval< double > const *)arg1)->overlap((ase::Interval< double > const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::Interval< double >(static_cast< const ase::Interval< double >& >(result))), SWIGTYPE_p_ase__IntervalT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Interval_fromInclusions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool arg2 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::IntervalType result;
  
  if (!SWIG_Python_UnpackTuple(args, "Interval_fromInclusions", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Interval_fromInclusions" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Interval_fromInclusions" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (ase::IntervalType)ase::Interval< double >::SWIGTEMPLATEDISAMBIGUATOR fromInclusions(arg1,arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Interval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::Interval< double > *arg1 = (ase::Interval< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__IntervalT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Interval" "', argument " "1"" of type '" "ase::Interval< double > *""'"); 
  }
  arg1 = reinterpret_cast< ase::Interval< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Interval_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__IntervalT_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Interval_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MixtureModel1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MixtureModel1D *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_MixtureModel1D", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (ase::MixtureModel1D *)new ase::MixtureModel1D();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__MixtureModel1D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel1D_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MixtureModel1D *arg1 = (ase::MixtureModel1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::MixtureModel1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MixtureModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel1D_clone" "', argument " "1"" of type '" "ase::MixtureModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MixtureModel1D * >(argp1);
  {
    try {
      result = (ase::MixtureModel1D *)((ase::MixtureModel1D const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__MixtureModel1D, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MixtureModel1D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MixtureModel1D *arg1 = (ase::MixtureModel1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MixtureModel1D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MixtureModel1D" "', argument " "1"" of type '" "ase::MixtureModel1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::MixtureModel1D * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel1D_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MixtureModel1D *arg1 = (ase::MixtureModel1D *) 0 ;
  ase::AbsDistributionModel1D *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ase::MixtureModel1D *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "MixtureModel1D_add", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MixtureModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel1D_add" "', argument " "1"" of type '" "ase::MixtureModel1D *""'"); 
  }
  arg1 = reinterpret_cast< ase::MixtureModel1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixtureModel1D_add" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixtureModel1D_add" "', argument " "2"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MixtureModel1D_add" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (ase::MixtureModel1D *) &(arg1)->add((ase::AbsDistributionModel1D const &)*arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__MixtureModel1D, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel1D_nComponents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MixtureModel1D *arg1 = (ase::MixtureModel1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MixtureModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel1D_nComponents" "', argument " "1"" of type '" "ase::MixtureModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MixtureModel1D * >(argp1);
  {
    try {
      result = (unsigned int)((ase::MixtureModel1D const *)arg1)->nComponents();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel1D_getComponent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MixtureModel1D *arg1 = (ase::MixtureModel1D *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  ase::AbsDistributionModel1D *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "MixtureModel1D_getComponent", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MixtureModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel1D_getComponent" "', argument " "1"" of type '" "ase::MixtureModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MixtureModel1D * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixtureModel1D_getComponent" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (ase::AbsDistributionModel1D *) &((ase::MixtureModel1D const *)arg1)->getComponent(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel1D_getWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MixtureModel1D *arg1 = (ase::MixtureModel1D *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "MixtureModel1D_getWeight", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MixtureModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel1D_getWeight" "', argument " "1"" of type '" "ase::MixtureModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MixtureModel1D * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixtureModel1D_getWeight" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (double)((ase::MixtureModel1D const *)arg1)->getWeight(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel1D_density(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MixtureModel1D *arg1 = (ase::MixtureModel1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "MixtureModel1D_density", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MixtureModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel1D_density" "', argument " "1"" of type '" "ase::MixtureModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MixtureModel1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixtureModel1D_density" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::MixtureModel1D const *)arg1)->density(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel1D_isDensityContinuous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MixtureModel1D *arg1 = (ase::MixtureModel1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MixtureModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel1D_isDensityContinuous" "', argument " "1"" of type '" "ase::MixtureModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MixtureModel1D * >(argp1);
  {
    try {
      result = (bool)((ase::MixtureModel1D const *)arg1)->isDensityContinuous();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel1D_isUnimodal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MixtureModel1D *arg1 = (ase::MixtureModel1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MixtureModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel1D_isUnimodal" "', argument " "1"" of type '" "ase::MixtureModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MixtureModel1D * >(argp1);
  {
    try {
      result = (bool)((ase::MixtureModel1D const *)arg1)->isUnimodal();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel1D_densityDerivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MixtureModel1D *arg1 = (ase::MixtureModel1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "MixtureModel1D_densityDerivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MixtureModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel1D_densityDerivative" "', argument " "1"" of type '" "ase::MixtureModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MixtureModel1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixtureModel1D_densityDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::MixtureModel1D const *)arg1)->densityDerivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel1D_cdf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MixtureModel1D *arg1 = (ase::MixtureModel1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "MixtureModel1D_cdf", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MixtureModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel1D_cdf" "', argument " "1"" of type '" "ase::MixtureModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MixtureModel1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixtureModel1D_cdf" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::MixtureModel1D const *)arg1)->cdf(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel1D_exceedance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MixtureModel1D *arg1 = (ase::MixtureModel1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "MixtureModel1D_exceedance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MixtureModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel1D_exceedance" "', argument " "1"" of type '" "ase::MixtureModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MixtureModel1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixtureModel1D_exceedance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::MixtureModel1D const *)arg1)->exceedance(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel1D_quantile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MixtureModel1D *arg1 = (ase::MixtureModel1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "MixtureModel1D_quantile", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MixtureModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel1D_quantile" "', argument " "1"" of type '" "ase::MixtureModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MixtureModel1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixtureModel1D_quantile" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::MixtureModel1D const *)arg1)->quantile(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel1D_invExceedance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MixtureModel1D *arg1 = (ase::MixtureModel1D *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "MixtureModel1D_invExceedance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MixtureModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel1D_invExceedance" "', argument " "1"" of type '" "ase::MixtureModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MixtureModel1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixtureModel1D_invExceedance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::MixtureModel1D const *)arg1)->invExceedance(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel1D_cumulant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MixtureModel1D *arg1 = (ase::MixtureModel1D *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "MixtureModel1D_cumulant", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MixtureModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel1D_cumulant" "', argument " "1"" of type '" "ase::MixtureModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MixtureModel1D * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixtureModel1D_cumulant" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (double)((ase::MixtureModel1D const *)arg1)->cumulant(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel1D_mode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MixtureModel1D *arg1 = (ase::MixtureModel1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MixtureModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel1D_mode" "', argument " "1"" of type '" "ase::MixtureModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MixtureModel1D * >(argp1);
  {
    try {
      result = (double)((ase::MixtureModel1D const *)arg1)->mode();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel1D_descentDelta__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::MixtureModel1D *arg1 = (ase::MixtureModel1D *) 0 ;
  bool arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MixtureModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel1D_descentDelta" "', argument " "1"" of type '" "ase::MixtureModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MixtureModel1D * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixtureModel1D_descentDelta" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MixtureModel1D_descentDelta" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::MixtureModel1D const *)arg1)->descentDelta(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel1D_descentDelta__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::MixtureModel1D *arg1 = (ase::MixtureModel1D *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MixtureModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel1D_descentDelta" "', argument " "1"" of type '" "ase::MixtureModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MixtureModel1D * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixtureModel1D_descentDelta" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (double)((ase::MixtureModel1D const *)arg1)->descentDelta(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel1D_descentDelta(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MixtureModel1D_descentDelta", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__MixtureModel1D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MixtureModel1D_descentDelta__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__MixtureModel1D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MixtureModel1D_descentDelta__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MixtureModel1D_descentDelta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::MixtureModel1D::descentDelta(bool,double) const\n"
    "    ase::MixtureModel1D::descentDelta(bool) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MixtureModel1D_random(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MixtureModel1D *arg1 = (ase::MixtureModel1D *) 0 ;
  ase::AbsRNG *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "MixtureModel1D_random", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MixtureModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel1D_random" "', argument " "1"" of type '" "ase::MixtureModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MixtureModel1D * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsRNG,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixtureModel1D_random" "', argument " "2"" of type '" "ase::AbsRNG &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixtureModel1D_random" "', argument " "2"" of type '" "ase::AbsRNG &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsRNG * >(argp2);
  {
    try {
      result = (double)((ase::MixtureModel1D const *)arg1)->random(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel1D_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::MixtureModel1D *arg1 = (ase::MixtureModel1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__MixtureModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel1D_classname" "', argument " "1"" of type '" "ase::MixtureModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::MixtureModel1D * >(argp1);
  {
    try {
      result = ((ase::MixtureModel1D const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MixtureModel1D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__MixtureModel1D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MixtureModel1D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_DoubleFunctor1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double (*arg1)(double) = (double (*)(double)) 0 ;
  PyObject *swig_obj[1] ;
  ase::DoubleFunctor1 *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg1), SWIGTYPE_p_f_double__double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_DoubleFunctor1" "', argument " "1"" of type '" "double (*)(double)""'"); 
    }
  }
  {
    try {
      result = (ase::DoubleFunctor1 *)new ase::DoubleFunctor1(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DoubleFunctor1, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleFunctor1___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleFunctor1 *arg1 = (ase::DoubleFunctor1 *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DoubleFunctor1___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DoubleFunctor1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleFunctor1___call__" "', argument " "1"" of type '" "ase::DoubleFunctor1 const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleFunctor1 * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleFunctor1___call__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::DoubleFunctor1 const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DoubleFunctor1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DoubleFunctor1 *arg1 = (ase::DoubleFunctor1 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DoubleFunctor1, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleFunctor1" "', argument " "1"" of type '" "ase::DoubleFunctor1 *""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleFunctor1 * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DoubleFunctor1_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__DoubleFunctor1, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DoubleFunctor1_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LongDoubleFunctor1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long double (*arg1)(long double) = (long double (*)(long double)) 0 ;
  PyObject *swig_obj[1] ;
  ase::LongDoubleFunctor1 *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int res = SWIG_ConvertFunctionPtr(swig_obj[0], (void**)(&arg1), SWIGTYPE_p_f_long_double__long_double);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "new_LongDoubleFunctor1" "', argument " "1"" of type '" "long double (*)(long double)""'"); 
    }
  }
  {
    try {
      result = (ase::LongDoubleFunctor1 *)new ase::LongDoubleFunctor1(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__LongDoubleFunctor1, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongDoubleFunctor1___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LongDoubleFunctor1 *arg1 = (ase::LongDoubleFunctor1 *) 0 ;
  long double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  long double result;
  
  if (!SWIG_Python_UnpackTuple(args, "LongDoubleFunctor1___call__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LongDoubleFunctor1, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongDoubleFunctor1___call__" "', argument " "1"" of type '" "ase::LongDoubleFunctor1 const *""'"); 
  }
  arg1 = reinterpret_cast< ase::LongDoubleFunctor1 * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LongDoubleFunctor1___call__" "', argument " "2"" of type '" "long double const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LongDoubleFunctor1___call__" "', argument " "2"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (long double)((ase::LongDoubleFunctor1 const *)arg1)->operator ()(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LongDoubleFunctor1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::LongDoubleFunctor1 *arg1 = (ase::LongDoubleFunctor1 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__LongDoubleFunctor1, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LongDoubleFunctor1" "', argument " "1"" of type '" "ase::LongDoubleFunctor1 *""'"); 
  }
  arg1 = reinterpret_cast< ase::LongDoubleFunctor1 * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LongDoubleFunctor1_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__LongDoubleFunctor1, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LongDoubleFunctor1_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_AsymmetricEstimate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  ase::ErrorType arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  ase::AsymmetricEstimate *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_AsymmetricEstimate", 4, 4, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AsymmetricEstimate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AsymmetricEstimate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AsymmetricEstimate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_AsymmetricEstimate" "', argument " "4"" of type '" "ase::ErrorType""'");
  } 
  arg4 = static_cast< ase::ErrorType >(val4);
  {
    try {
      result = (ase::AsymmetricEstimate *)new ase::AsymmetricEstimate(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__AsymmetricEstimate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AsymmetricEstimate_location(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AsymmetricEstimate *arg1 = (ase::AsymmetricEstimate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AsymmetricEstimate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AsymmetricEstimate_location" "', argument " "1"" of type '" "ase::AsymmetricEstimate const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AsymmetricEstimate * >(argp1);
  {
    try {
      result = (double)((ase::AsymmetricEstimate const *)arg1)->location();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AsymmetricEstimate_sigmaPlus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AsymmetricEstimate *arg1 = (ase::AsymmetricEstimate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AsymmetricEstimate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AsymmetricEstimate_sigmaPlus" "', argument " "1"" of type '" "ase::AsymmetricEstimate const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AsymmetricEstimate * >(argp1);
  {
    try {
      result = (double)((ase::AsymmetricEstimate const *)arg1)->sigmaPlus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AsymmetricEstimate_sigmaMinus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AsymmetricEstimate *arg1 = (ase::AsymmetricEstimate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AsymmetricEstimate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AsymmetricEstimate_sigmaMinus" "', argument " "1"" of type '" "ase::AsymmetricEstimate const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AsymmetricEstimate * >(argp1);
  {
    try {
      result = (double)((ase::AsymmetricEstimate const *)arg1)->sigmaMinus();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AsymmetricEstimate_errorType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AsymmetricEstimate *arg1 = (ase::AsymmetricEstimate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::ErrorType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AsymmetricEstimate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AsymmetricEstimate_errorType" "', argument " "1"" of type '" "ase::AsymmetricEstimate const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AsymmetricEstimate * >(argp1);
  {
    try {
      result = (ase::ErrorType)((ase::AsymmetricEstimate const *)arg1)->errorType();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AsymmetricEstimate_intervalEstimate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AsymmetricEstimate *arg1 = (ase::AsymmetricEstimate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::Interval< double > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AsymmetricEstimate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AsymmetricEstimate_intervalEstimate" "', argument " "1"" of type '" "ase::AsymmetricEstimate const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AsymmetricEstimate * >(argp1);
  {
    try {
      result = ((ase::AsymmetricEstimate const *)arg1)->intervalEstimate();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::Interval< double >(static_cast< const ase::Interval< double >& >(result))), SWIGTYPE_p_ase__IntervalT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AsymmetricEstimate_width(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AsymmetricEstimate *arg1 = (ase::AsymmetricEstimate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AsymmetricEstimate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AsymmetricEstimate_width" "', argument " "1"" of type '" "ase::AsymmetricEstimate const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AsymmetricEstimate * >(argp1);
  {
    try {
      result = (double)((ase::AsymmetricEstimate const *)arg1)->width();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AsymmetricEstimate_asymmetry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AsymmetricEstimate *arg1 = (ase::AsymmetricEstimate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AsymmetricEstimate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AsymmetricEstimate_asymmetry" "', argument " "1"" of type '" "ase::AsymmetricEstimate const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AsymmetricEstimate * >(argp1);
  {
    try {
      result = (double)((ase::AsymmetricEstimate const *)arg1)->asymmetry();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AsymmetricEstimate___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AsymmetricEstimate *arg1 = (ase::AsymmetricEstimate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AsymmetricEstimate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AsymmetricEstimate___repr__" "', argument " "1"" of type '" "ase::AsymmetricEstimate const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AsymmetricEstimate * >(argp1);
  {
    try {
      result = ase_AsymmetricEstimate___repr__((ase::AsymmetricEstimate const *)arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AsymmetricEstimate___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AsymmetricEstimate *arg1 = (ase::AsymmetricEstimate *) 0 ;
  ase::AsymmetricEstimate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "AsymmetricEstimate___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AsymmetricEstimate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AsymmetricEstimate___eq__" "', argument " "1"" of type '" "ase::AsymmetricEstimate const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AsymmetricEstimate * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AsymmetricEstimate,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AsymmetricEstimate___eq__" "', argument " "2"" of type '" "ase::AsymmetricEstimate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AsymmetricEstimate___eq__" "', argument " "2"" of type '" "ase::AsymmetricEstimate const &""'"); 
  }
  arg2 = reinterpret_cast< ase::AsymmetricEstimate * >(argp2);
  {
    try {
      result = (bool)ase_AsymmetricEstimate___eq__((ase::AsymmetricEstimate const *)arg1,(ase::AsymmetricEstimate const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_AsymmetricEstimate___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AsymmetricEstimate *arg1 = (ase::AsymmetricEstimate *) 0 ;
  ase::AsymmetricEstimate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "AsymmetricEstimate___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AsymmetricEstimate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AsymmetricEstimate___ne__" "', argument " "1"" of type '" "ase::AsymmetricEstimate const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AsymmetricEstimate * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AsymmetricEstimate,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AsymmetricEstimate___ne__" "', argument " "2"" of type '" "ase::AsymmetricEstimate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AsymmetricEstimate___ne__" "', argument " "2"" of type '" "ase::AsymmetricEstimate const &""'"); 
  }
  arg2 = reinterpret_cast< ase::AsymmetricEstimate * >(argp2);
  {
    try {
      result = (bool)ase_AsymmetricEstimate___ne__((ase::AsymmetricEstimate const *)arg1,(ase::AsymmetricEstimate const &)*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_delete_AsymmetricEstimate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::AsymmetricEstimate *arg1 = (ase::AsymmetricEstimate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AsymmetricEstimate, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AsymmetricEstimate" "', argument " "1"" of type '" "ase::AsymmetricEstimate *""'"); 
  }
  arg1 = reinterpret_cast< ase::AsymmetricEstimate * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AsymmetricEstimate_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__AsymmetricEstimate, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *AsymmetricEstimate_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_parseAsymmetricEstimate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< ase::AsymmetricEstimate > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res1 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parseAsymmetricEstimate" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseAsymmetricEstimate" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = ase::parseAsymmetricEstimate((std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new ase::AsymmetricEstimate(static_cast< const ase::AsymmetricEstimate& >(result))), SWIGTYPE_p_ase__AsymmetricEstimate, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_readAsymmetricEstimates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< ase::AsymmetricEstimate,std::allocator< ase::AsymmetricEstimate > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::basic_string<char> *ptr = (std::basic_string<char> *)0;
    res1 = SWIG_AsPtr_std_basic_string_Sl_char_Sg_(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "readAsymmetricEstimates" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "readAsymmetricEstimates" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = ase::readAsymmetricEstimates((std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< ase::AsymmetricEstimate,std::allocator< ase::AsymmetricEstimate > >(static_cast< const std::vector< ase::AsymmetricEstimate,std::allocator< ase::AsymmetricEstimate > >& >(result))), SWIGTYPE_p_std__vectorT_ase__AsymmetricEstimate_std__allocatorT_ase__AsymmetricEstimate_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DistributionModel1DCopy__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = (ase::AbsDistributionModel1D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ase::DistributionModel1DCopy *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DistributionModel1DCopy" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const *""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  {
    try {
      result = (ase::DistributionModel1DCopy *)new ase::DistributionModel1DCopy((ase::AbsDistributionModel1D const *)arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DistributionModel1DCopy, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DistributionModel1DCopy__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsDistributionModel1D *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ase::DistributionModel1DCopy *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsDistributionModel1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DistributionModel1DCopy" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DistributionModel1DCopy" "', argument " "1"" of type '" "ase::AbsDistributionModel1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsDistributionModel1D * >(argp1);
  {
    try {
      result = (ase::DistributionModel1DCopy *)new ase::DistributionModel1DCopy((ase::AbsDistributionModel1D const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DistributionModel1DCopy, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DistributionModel1DCopy__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ase::DistributionModel1DCopy *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DistributionModel1DCopy,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DistributionModel1DCopy" "', argument " "1"" of type '" "ase::DistributionModel1DCopy const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DistributionModel1DCopy" "', argument " "1"" of type '" "ase::DistributionModel1DCopy const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  {
    try {
      result = (ase::DistributionModel1DCopy *)new ase::DistributionModel1DCopy((ase::DistributionModel1DCopy const &)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DistributionModel1DCopy, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DistributionModel1DCopy__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ase::DistributionModel1DCopy *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DistributionModel1DCopy,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DistributionModel1DCopy" "', argument " "1"" of type '" "ase::DistributionModel1DCopy &&""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DistributionModel1DCopy" "', argument " "1"" of type '" "ase::DistributionModel1DCopy &&""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  {
    try {
      result = (ase::DistributionModel1DCopy *)new ase::DistributionModel1DCopy((ase::DistributionModel1DCopy &&)*arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DistributionModel1DCopy, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DistributionModel1DCopy(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_DistributionModel1DCopy", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DistributionModel1DCopy, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DistributionModel1DCopy__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__DistributionModel1DCopy, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DistributionModel1DCopy__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__AbsDistributionModel1D, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DistributionModel1DCopy__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__AbsDistributionModel1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DistributionModel1DCopy__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_DistributionModel1DCopy'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::DistributionModel1DCopy::DistributionModel1DCopy(ase::AbsDistributionModel1D const *)\n"
    "    ase::DistributionModel1DCopy::DistributionModel1DCopy(ase::AbsDistributionModel1D const &)\n"
    "    ase::DistributionModel1DCopy::DistributionModel1DCopy(ase::DistributionModel1DCopy const &)\n"
    "    ase::DistributionModel1DCopy::DistributionModel1DCopy(ase::DistributionModel1DCopy &&)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DistributionModel1DCopy_clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = (ase::DistributionModel1DCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::DistributionModel1DCopy *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionModel1DCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionModel1DCopy_clone" "', argument " "1"" of type '" "ase::DistributionModel1DCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  {
    try {
      result = (ase::DistributionModel1DCopy *)((ase::DistributionModel1DCopy const *)arg1)->clone();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__DistributionModel1DCopy, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DistributionModel1DCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = (ase::DistributionModel1DCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionModel1DCopy, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DistributionModel1DCopy" "', argument " "1"" of type '" "ase::DistributionModel1DCopy *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionModel1DCopy_theCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = (ase::DistributionModel1DCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ase::AbsDistributionModel1D *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionModel1DCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionModel1DCopy_theCopy" "', argument " "1"" of type '" "ase::DistributionModel1DCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  {
    try {
      result = (ase::AbsDistributionModel1D *) &((ase::DistributionModel1DCopy const *)arg1)->theCopy();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ase__AbsDistributionModel1D, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionModel1DCopy_density(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = (ase::DistributionModel1DCopy *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DistributionModel1DCopy_density", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionModel1DCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionModel1DCopy_density" "', argument " "1"" of type '" "ase::DistributionModel1DCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DistributionModel1DCopy_density" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::DistributionModel1DCopy const *)arg1)->density(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionModel1DCopy_isDensityContinuous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = (ase::DistributionModel1DCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionModel1DCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionModel1DCopy_isDensityContinuous" "', argument " "1"" of type '" "ase::DistributionModel1DCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  {
    try {
      result = (bool)((ase::DistributionModel1DCopy const *)arg1)->isDensityContinuous();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionModel1DCopy_isNonNegative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = (ase::DistributionModel1DCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionModel1DCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionModel1DCopy_isNonNegative" "', argument " "1"" of type '" "ase::DistributionModel1DCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  {
    try {
      result = (bool)((ase::DistributionModel1DCopy const *)arg1)->isNonNegative();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionModel1DCopy_isUnimodal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = (ase::DistributionModel1DCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionModel1DCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionModel1DCopy_isUnimodal" "', argument " "1"" of type '" "ase::DistributionModel1DCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  {
    try {
      result = (bool)((ase::DistributionModel1DCopy const *)arg1)->isUnimodal();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionModel1DCopy_densityDerivative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = (ase::DistributionModel1DCopy *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DistributionModel1DCopy_densityDerivative", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionModel1DCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionModel1DCopy_densityDerivative" "', argument " "1"" of type '" "ase::DistributionModel1DCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DistributionModel1DCopy_densityDerivative" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::DistributionModel1DCopy const *)arg1)->densityDerivative(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionModel1DCopy_cdf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = (ase::DistributionModel1DCopy *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DistributionModel1DCopy_cdf", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionModel1DCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionModel1DCopy_cdf" "', argument " "1"" of type '" "ase::DistributionModel1DCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DistributionModel1DCopy_cdf" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::DistributionModel1DCopy const *)arg1)->cdf(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionModel1DCopy_exceedance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = (ase::DistributionModel1DCopy *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DistributionModel1DCopy_exceedance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionModel1DCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionModel1DCopy_exceedance" "', argument " "1"" of type '" "ase::DistributionModel1DCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DistributionModel1DCopy_exceedance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::DistributionModel1DCopy const *)arg1)->exceedance(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionModel1DCopy_quantile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = (ase::DistributionModel1DCopy *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DistributionModel1DCopy_quantile", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionModel1DCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionModel1DCopy_quantile" "', argument " "1"" of type '" "ase::DistributionModel1DCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DistributionModel1DCopy_quantile" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::DistributionModel1DCopy const *)arg1)->quantile(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionModel1DCopy_invExceedance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = (ase::DistributionModel1DCopy *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DistributionModel1DCopy_invExceedance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionModel1DCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionModel1DCopy_invExceedance" "', argument " "1"" of type '" "ase::DistributionModel1DCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DistributionModel1DCopy_invExceedance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (double)((ase::DistributionModel1DCopy const *)arg1)->invExceedance(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionModel1DCopy_cumulant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = (ase::DistributionModel1DCopy *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DistributionModel1DCopy_cumulant", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionModel1DCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionModel1DCopy_cumulant" "', argument " "1"" of type '" "ase::DistributionModel1DCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DistributionModel1DCopy_cumulant" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (double)((ase::DistributionModel1DCopy const *)arg1)->cumulant(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionModel1DCopy_mode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = (ase::DistributionModel1DCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionModel1DCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionModel1DCopy_mode" "', argument " "1"" of type '" "ase::DistributionModel1DCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  {
    try {
      result = (double)((ase::DistributionModel1DCopy const *)arg1)->mode();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionModel1DCopy_descentDelta__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = (ase::DistributionModel1DCopy *) 0 ;
  bool arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionModel1DCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionModel1DCopy_descentDelta" "', argument " "1"" of type '" "ase::DistributionModel1DCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DistributionModel1DCopy_descentDelta" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DistributionModel1DCopy_descentDelta" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (double)((ase::DistributionModel1DCopy const *)arg1)->descentDelta(arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionModel1DCopy_descentDelta__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = (ase::DistributionModel1DCopy *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  double result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionModel1DCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionModel1DCopy_descentDelta" "', argument " "1"" of type '" "ase::DistributionModel1DCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DistributionModel1DCopy_descentDelta" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (double)((ase::DistributionModel1DCopy const *)arg1)->descentDelta(arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionModel1DCopy_descentDelta(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DistributionModel1DCopy_descentDelta", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__DistributionModel1DCopy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DistributionModel1DCopy_descentDelta__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ase__DistributionModel1DCopy, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DistributionModel1DCopy_descentDelta__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DistributionModel1DCopy_descentDelta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ase::DistributionModel1DCopy::descentDelta(bool const,double const) const\n"
    "    ase::DistributionModel1DCopy::descentDelta(bool const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DistributionModel1DCopy_classname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = (ase::DistributionModel1DCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionModel1DCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionModel1DCopy_classname" "', argument " "1"" of type '" "ase::DistributionModel1DCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  {
    try {
      result = ((ase::DistributionModel1DCopy const *)arg1)->classname();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_basic_string_Sl_char_Sg_(static_cast< std::basic_string<char> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionModel1DCopy_random(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = (ase::DistributionModel1DCopy *) 0 ;
  ase::AbsRNG *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DistributionModel1DCopy_random", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionModel1DCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionModel1DCopy_random" "', argument " "1"" of type '" "ase::DistributionModel1DCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ase__AbsRNG,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DistributionModel1DCopy_random" "', argument " "2"" of type '" "ase::AbsRNG &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DistributionModel1DCopy_random" "', argument " "2"" of type '" "ase::AbsRNG &""'"); 
  }
  arg2 = reinterpret_cast< ase::AbsRNG * >(argp2);
  {
    try {
      result = (double)((ase::DistributionModel1DCopy const *)arg1)->random(*arg2);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionModel1DCopy_qWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = (ase::DistributionModel1DCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionModel1DCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionModel1DCopy_qWidth" "', argument " "1"" of type '" "ase::DistributionModel1DCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  {
    try {
      result = (double)((ase::DistributionModel1DCopy const *)arg1)->qWidth();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DistributionModel1DCopy_qAsymmetry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::DistributionModel1DCopy *arg1 = (ase::DistributionModel1DCopy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ase__DistributionModel1DCopy, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DistributionModel1DCopy_qAsymmetry" "', argument " "1"" of type '" "ase::DistributionModel1DCopy const *""'"); 
  }
  arg1 = reinterpret_cast< ase::DistributionModel1DCopy * >(argp1);
  {
    try {
      result = (double)((ase::DistributionModel1DCopy const *)arg1)->qAsymmetry();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DistributionModel1DCopy_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ase__DistributionModel1DCopy, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DistributionModel1DCopy_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_getSeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned long arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned long result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_unsigned_SS_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "getSeed" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    try {
      result = (unsigned long)asepy::getSeed(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DRand48(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  asepy::DRand48 *arg1 = (asepy::DRand48 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_asepy__DRand48, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DRand48" "', argument " "1"" of type '" "asepy::DRand48 *""'"); 
  }
  arg1 = reinterpret_cast< asepy::DRand48 * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DRand48___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  asepy::DRand48 *arg1 = (asepy::DRand48 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "DRand48___call__", 1, 1, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_asepy__DRand48, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DRand48___call__" "', argument " "1"" of type '" "asepy::DRand48 *""'"); 
  }
  arg1 = reinterpret_cast< asepy::DRand48 * >(argp1);
  {
    try {
      result = (double)(arg1)->operator ()();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DRand48(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  asepy::DRand48 *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_DRand48", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (asepy::DRand48 *)new asepy::DRand48();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_asepy__DRand48, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DRand48_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_asepy__DRand48, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DRand48_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MersenneTwister32__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  unsigned long arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  asepy::MersenneTwister32 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MersenneTwister32" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    try {
      result = (asepy::MersenneTwister32 *)new asepy::MersenneTwister32(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_asepy__MersenneTwister32, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MersenneTwister32__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  asepy::MersenneTwister32 *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (asepy::MersenneTwister32 *)new asepy::MersenneTwister32();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_asepy__MersenneTwister32, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MersenneTwister32(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_MersenneTwister32", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_MersenneTwister32__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_MersenneTwister32__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_MersenneTwister32'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    asepy::MersenneTwister32::MersenneTwister32(unsigned long const)\n"
    "    asepy::MersenneTwister32::MersenneTwister32()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MersenneTwister32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  asepy::MersenneTwister32 *arg1 = (asepy::MersenneTwister32 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_asepy__MersenneTwister32, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MersenneTwister32" "', argument " "1"" of type '" "asepy::MersenneTwister32 *""'"); 
  }
  arg1 = reinterpret_cast< asepy::MersenneTwister32 * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MersenneTwister32___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  asepy::MersenneTwister32 *arg1 = (asepy::MersenneTwister32 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "MersenneTwister32___call__", 1, 1, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_asepy__MersenneTwister32, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MersenneTwister32___call__" "', argument " "1"" of type '" "asepy::MersenneTwister32 *""'"); 
  }
  arg1 = reinterpret_cast< asepy::MersenneTwister32 * >(argp1);
  {
    try {
      result = (double)(arg1)->operator ()();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MersenneTwister32_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_asepy__MersenneTwister32, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MersenneTwister32_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MersenneTwister64__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  unsigned long arg1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  asepy::MersenneTwister64 *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MersenneTwister64" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    try {
      result = (asepy::MersenneTwister64 *)new asepy::MersenneTwister64(arg1);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_asepy__MersenneTwister64, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MersenneTwister64__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  asepy::MersenneTwister64 *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (asepy::MersenneTwister64 *)new asepy::MersenneTwister64();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_asepy__MersenneTwister64, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MersenneTwister64(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_MersenneTwister64", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_MersenneTwister64__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_MersenneTwister64__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_MersenneTwister64'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    asepy::MersenneTwister64::MersenneTwister64(unsigned long const)\n"
    "    asepy::MersenneTwister64::MersenneTwister64()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MersenneTwister64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  asepy::MersenneTwister64 *arg1 = (asepy::MersenneTwister64 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_asepy__MersenneTwister64, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MersenneTwister64" "', argument " "1"" of type '" "asepy::MersenneTwister64 *""'"); 
  }
  arg1 = reinterpret_cast< asepy::MersenneTwister64 * >(argp1);
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MersenneTwister64___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  asepy::MersenneTwister64 *arg1 = (asepy::MersenneTwister64 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!SWIG_Python_UnpackTuple(args, "MersenneTwister64___call__", 1, 1, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_asepy__MersenneTwister64, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MersenneTwister64___call__" "', argument " "1"" of type '" "asepy::MersenneTwister64 *""'"); 
  }
  arg1 = reinterpret_cast< asepy::MersenneTwister64 * >(argp1);
  {
    try {
      result = (double)(arg1)->operator ()();
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MersenneTwister64_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_asepy__MersenneTwister64, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MersenneTwister64_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DensityFunctor1D *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DensityFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DensityFunctor1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DensityFunctor1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DensityFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DensityFunctor1D >((ase::DensityFunctor1D const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DensityFunctor1D *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DensityFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DensityFunctor1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DensityFunctor1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DensityFunctor1D * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DensityFunctor1D >((ase::DensityFunctor1D const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DensityDerivativeFunctor1D *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DensityDerivativeFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DensityDerivativeFunctor1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DensityDerivativeFunctor1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DensityDerivativeFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DensityDerivativeFunctor1D >((ase::DensityDerivativeFunctor1D const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DensityDerivativeFunctor1D *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DensityDerivativeFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DensityDerivativeFunctor1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DensityDerivativeFunctor1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DensityDerivativeFunctor1D * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DensityDerivativeFunctor1D >((ase::DensityDerivativeFunctor1D const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_6(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::LogDensityFunctor1D *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__LogDensityFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::LogDensityFunctor1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::LogDensityFunctor1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::LogDensityFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::LogDensityFunctor1D >((ase::LogDensityFunctor1D const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_7(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::LogDensityFunctor1D *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__LogDensityFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::LogDensityFunctor1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::LogDensityFunctor1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::LogDensityFunctor1D * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::LogDensityFunctor1D >((ase::LogDensityFunctor1D const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_8(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::ShiftedDensityFunctor1D *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__ShiftedDensityFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::ShiftedDensityFunctor1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::ShiftedDensityFunctor1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::ShiftedDensityFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::ShiftedDensityFunctor1D >((ase::ShiftedDensityFunctor1D const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_9(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::ShiftedDensityFunctor1D *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__ShiftedDensityFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::ShiftedDensityFunctor1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::ShiftedDensityFunctor1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::ShiftedDensityFunctor1D * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::ShiftedDensityFunctor1D >((ase::ShiftedDensityFunctor1D const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_10(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::CdfFunctor1D *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__CdfFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::CdfFunctor1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::CdfFunctor1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::CdfFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::CdfFunctor1D >((ase::CdfFunctor1D const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_11(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::CdfFunctor1D *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__CdfFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::CdfFunctor1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::CdfFunctor1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::CdfFunctor1D * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::CdfFunctor1D >((ase::CdfFunctor1D const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_12(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::ExceedanceFunctor1D *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__ExceedanceFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::ExceedanceFunctor1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::ExceedanceFunctor1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::ExceedanceFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::ExceedanceFunctor1D >((ase::ExceedanceFunctor1D const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_13(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::ExceedanceFunctor1D *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__ExceedanceFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::ExceedanceFunctor1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::ExceedanceFunctor1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::ExceedanceFunctor1D * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::ExceedanceFunctor1D >((ase::ExceedanceFunctor1D const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_14(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::InvExceedanceFunctor1D *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__InvExceedanceFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::InvExceedanceFunctor1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::InvExceedanceFunctor1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::InvExceedanceFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::InvExceedanceFunctor1D >((ase::InvExceedanceFunctor1D const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_15(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::InvExceedanceFunctor1D *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__InvExceedanceFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::InvExceedanceFunctor1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::InvExceedanceFunctor1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::InvExceedanceFunctor1D * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::InvExceedanceFunctor1D >((ase::InvExceedanceFunctor1D const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_16(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::QuantileFunctor1D *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__QuantileFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::QuantileFunctor1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::QuantileFunctor1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::QuantileFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::QuantileFunctor1D >((ase::QuantileFunctor1D const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_17(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::QuantileFunctor1D *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__QuantileFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::QuantileFunctor1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::QuantileFunctor1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::QuantileFunctor1D * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::QuantileFunctor1D >((ase::QuantileFunctor1D const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_18(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::EntropyFunctor1D *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__EntropyFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::EntropyFunctor1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::EntropyFunctor1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::EntropyFunctor1D * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::EntropyFunctor1D >((ase::EntropyFunctor1D const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_19(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::EntropyFunctor1D *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__EntropyFunctor1D,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::EntropyFunctor1D const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::EntropyFunctor1D const &""'"); 
  }
  arg1 = reinterpret_cast< ase::EntropyFunctor1D * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::EntropyFunctor1D >((ase::EntropyFunctor1D const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_20(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::NumericalConvolution *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__NumericalConvolution,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::NumericalConvolution const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::NumericalConvolution const &""'"); 
  }
  arg1 = reinterpret_cast< ase::NumericalConvolution * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::NumericalConvolution >((ase::NumericalConvolution const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_21(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::NumericalConvolution *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__NumericalConvolution,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::NumericalConvolution const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::NumericalConvolution const &""'"); 
  }
  arg1 = reinterpret_cast< ase::NumericalConvolution * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::NumericalConvolution >((ase::NumericalConvolution const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_22(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::GaussianConvolution *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__GaussianConvolution,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::GaussianConvolution const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::GaussianConvolution const &""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussianConvolution * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::GaussianConvolution >((ase::GaussianConvolution const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_23(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::GaussianConvolution *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__GaussianConvolution,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::GaussianConvolution const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::GaussianConvolution const &""'"); 
  }
  arg1 = reinterpret_cast< ase::GaussianConvolution * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::GaussianConvolution >((ase::GaussianConvolution const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_24(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DiscretizedConvolution *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DiscretizedConvolution,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DiscretizedConvolution const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DiscretizedConvolution const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DiscretizedConvolution * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DiscretizedConvolution >((ase::DiscretizedConvolution const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_25(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DiscretizedConvolution *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DiscretizedConvolution,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DiscretizedConvolution const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DiscretizedConvolution const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DiscretizedConvolution * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DiscretizedConvolution >((ase::DiscretizedConvolution const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_26(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DoubleFunctor1 *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DoubleFunctor1,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DoubleFunctor1 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DoubleFunctor1 const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleFunctor1 * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DoubleFunctor1 >((ase::DoubleFunctor1 const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_27(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DoubleFunctor1 *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DoubleFunctor1,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DoubleFunctor1 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DoubleFunctor1 const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleFunctor1 * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DoubleFunctor1 >((ase::DoubleFunctor1 const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_28(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsLogLikelihoodCurve,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::AbsLogLikelihoodCurve >((ase::AbsLogLikelihoodCurve const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_29(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::AbsLogLikelihoodCurve *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__AbsLogLikelihoodCurve,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::AbsLogLikelihoodCurve const &""'"); 
  }
  arg1 = reinterpret_cast< ase::AbsLogLikelihoodCurve * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::AbsLogLikelihoodCurve >((ase::AbsLogLikelihoodCurve const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_30(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::LogLikelihoodDerivative *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__LogLikelihoodDerivative,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::LogLikelihoodDerivative const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::LogLikelihoodDerivative const &""'"); 
  }
  arg1 = reinterpret_cast< ase::LogLikelihoodDerivative * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::LogLikelihoodDerivative >((ase::LogLikelihoodDerivative const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_31(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::LogLikelihoodDerivative *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__LogLikelihoodDerivative,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::LogLikelihoodDerivative const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::LogLikelihoodDerivative const &""'"); 
  }
  arg1 = reinterpret_cast< ase::LogLikelihoodDerivative * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::LogLikelihoodDerivative >((ase::LogLikelihoodDerivative const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_32(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::LogLikelihoodSecondDerivative *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__LogLikelihoodSecondDerivative,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::LogLikelihoodSecondDerivative const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::LogLikelihoodSecondDerivative const &""'"); 
  }
  arg1 = reinterpret_cast< ase::LogLikelihoodSecondDerivative * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::LogLikelihoodSecondDerivative >((ase::LogLikelihoodSecondDerivative const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_33(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::LogLikelihoodSecondDerivative *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__LogLikelihoodSecondDerivative,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::LogLikelihoodSecondDerivative const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::LogLikelihoodSecondDerivative const &""'"); 
  }
  arg1 = reinterpret_cast< ase::LogLikelihoodSecondDerivative * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::LogLikelihoodSecondDerivative >((ase::LogLikelihoodSecondDerivative const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_34(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::TransitionCubic< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__TransitionCubicT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::TransitionCubic< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::TransitionCubic< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::TransitionCubic< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::TransitionCubic< double > >((ase::TransitionCubic< double > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_35(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::TransitionCubic< double > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__TransitionCubicT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::TransitionCubic< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::TransitionCubic< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::TransitionCubic< double > * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::TransitionCubic< double > >((ase::TransitionCubic< double > const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_36(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > >((ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_37(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > >((ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_38(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > >((ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_39(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > >((ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_40(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::ParabolicRailwayCurve< double > >((ase::ParabolicRailwayCurve< double > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_41(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::ParabolicRailwayCurve< double > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::ParabolicRailwayCurve< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::ParabolicRailwayCurve< double > * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::ParabolicRailwayCurve< double > >((ase::ParabolicRailwayCurve< double > const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_42(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::RailwayZoneFunctor< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__RailwayZoneFunctorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::RailwayZoneFunctor< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::RailwayZoneFunctor< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::RailwayZoneFunctor< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::RailwayZoneFunctor< double > >((ase::RailwayZoneFunctor< double > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_43(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::RailwayZoneFunctor< double > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__RailwayZoneFunctorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::RailwayZoneFunctor< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::RailwayZoneFunctor< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::RailwayZoneFunctor< double > * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::RailwayZoneFunctor< double > >((ase::RailwayZoneFunctor< double > const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_44(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > >((ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_45(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > >((ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_46(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > >((ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_47(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > >((ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_48(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::SmoothDoubleCubic< double > >((ase::SmoothDoubleCubic< double > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_49(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SmoothDoubleCubic< double > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SmoothDoubleCubic< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SmoothDoubleCubic< double > * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::SmoothDoubleCubic< double > >((ase::SmoothDoubleCubic< double > const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_50(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SDCZoneFunctor< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SDCZoneFunctorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SDCZoneFunctor< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SDCZoneFunctor< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SDCZoneFunctor< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::SDCZoneFunctor< double > >((ase::SDCZoneFunctor< double > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_51(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SDCZoneFunctor< double > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SDCZoneFunctorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SDCZoneFunctor< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SDCZoneFunctor< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SDCZoneFunctor< double > * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::SDCZoneFunctor< double > >((ase::SDCZoneFunctor< double > const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_52(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > >((ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_53(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > >((ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_54(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > >((ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_55(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > >((ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_56(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::SymbetaDoubleIntegral< double > >((ase::SymbetaDoubleIntegral< double > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_57(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SymbetaDoubleIntegral< double > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SymbetaDoubleIntegral< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SymbetaDoubleIntegral< double > * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::SymbetaDoubleIntegral< double > >((ase::SymbetaDoubleIntegral< double > const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_58(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SDIZoneFunctor< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SDIZoneFunctorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SDIZoneFunctor< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SDIZoneFunctor< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SDIZoneFunctor< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::SDIZoneFunctor< double > >((ase::SDIZoneFunctor< double > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_59(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SDIZoneFunctor< double > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SDIZoneFunctorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SDIZoneFunctor< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SDIZoneFunctor< double > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SDIZoneFunctor< double > * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::SDIZoneFunctor< double > >((ase::SDIZoneFunctor< double > const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_60(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > >((ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_61(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > >((ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_62(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > >((ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_63(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > >((ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_64(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DoubleCubicInner *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DoubleCubicInner,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DoubleCubicInner const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DoubleCubicInner const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleCubicInner * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DoubleCubicInner >((ase::DoubleCubicInner const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_65(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DoubleCubicInner *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DoubleCubicInner,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DoubleCubicInner const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DoubleCubicInner const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DoubleCubicInner * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DoubleCubicInner >((ase::DoubleCubicInner const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_66(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::DoubleCubicInner > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__DoubleCubicInner_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::DoubleCubicInner > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::DoubleCubicInner > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::DoubleCubicInner > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DerivativeFunctorHelper< ase::DoubleCubicInner > >((ase::DerivativeFunctorHelper< ase::DoubleCubicInner > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_67(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::DoubleCubicInner > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__DoubleCubicInner_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::DoubleCubicInner > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::DoubleCubicInner > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::DoubleCubicInner > * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DerivativeFunctorHelper< ase::DoubleCubicInner > >((ase::DerivativeFunctorHelper< ase::DoubleCubicInner > const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_68(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__DoubleCubicInner_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > >((ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_69(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__DoubleCubicInner_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > >((ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_70(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::QuinticInner *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__QuinticInner,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::QuinticInner const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::QuinticInner const &""'"); 
  }
  arg1 = reinterpret_cast< ase::QuinticInner * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::QuinticInner >((ase::QuinticInner const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_71(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::QuinticInner *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__QuinticInner,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::QuinticInner const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::QuinticInner const &""'"); 
  }
  arg1 = reinterpret_cast< ase::QuinticInner * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::QuinticInner >((ase::QuinticInner const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_72(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::QuinticInner > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__QuinticInner_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::QuinticInner > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::QuinticInner > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::QuinticInner > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DerivativeFunctorHelper< ase::QuinticInner > >((ase::DerivativeFunctorHelper< ase::QuinticInner > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_73(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::DerivativeFunctorHelper< ase::QuinticInner > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__QuinticInner_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::QuinticInner > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::DerivativeFunctorHelper< ase::QuinticInner > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::DerivativeFunctorHelper< ase::QuinticInner > * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::DerivativeFunctorHelper< ase::QuinticInner > >((ase::DerivativeFunctorHelper< ase::QuinticInner > const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_74(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::QuinticInner > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__QuinticInner_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::QuinticInner > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::QuinticInner > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::QuinticInner > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::QuinticInner > >((ase::SecondDerivativeFunctorHelper< ase::QuinticInner > const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_75(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ase::SecondDerivativeFunctorHelper< ase::QuinticInner > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__QuinticInner_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::QuinticInner > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "ase::SecondDerivativeFunctorHelper< ase::QuinticInner > const &""'"); 
  }
  arg1 = reinterpret_cast< ase::SecondDerivativeFunctorHelper< ase::QuinticInner > * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::QuinticInner > >((ase::SecondDerivativeFunctorHelper< ase::QuinticInner > const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_76(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  asepy::PyFunctor1 *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_asepy__PyFunctor1,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  arg1 = reinterpret_cast< asepy::PyFunctor1 * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "scanFunctor1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "scanFunctor1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "scanFunctor1D" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< asepy::PyFunctor1 >((asepy::PyFunctor1 const &)*arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D__SWIG_77(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  asepy::PyFunctor1 *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_asepy__PyFunctor1,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "scanFunctor1D" "', argument " "1"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "scanFunctor1D" "', argument " "1"" of type '" "asepy::PyFunctor1 const &""'"); 
  }
  arg1 = reinterpret_cast< asepy::PyFunctor1 * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (PyObject *)asepy::SWIGTEMPLATEDISAMBIGUATOR scanFunctor1D< asepy::PyFunctor1 >((asepy::PyFunctor1 const &)*arg1,(double const *)arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_scanFunctor1D(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "scanFunctor1D", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DensityFunctor1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_3(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DensityDerivativeFunctor1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_5(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_5(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__LogDensityFunctor1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_7(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_7(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__ShiftedDensityFunctor1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_9(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_9(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__CdfFunctor1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_11(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_11(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__ExceedanceFunctor1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_13(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_13(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__InvExceedanceFunctor1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_15(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_15(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__QuantileFunctor1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_17(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_17(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__EntropyFunctor1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_19(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_19(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__NumericalConvolution, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_21(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_21(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__GaussianConvolution, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_23(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_23(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DiscretizedConvolution, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_25(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_25(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DoubleFunctor1, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_27(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_27(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__AbsLogLikelihoodCurve, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_29(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_29(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__LogLikelihoodDerivative, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_31(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_31(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__LogLikelihoodSecondDerivative, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_33(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_33(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__TransitionCubicT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_35(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_35(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_37(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_37(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_39(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_39(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_41(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_41(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__RailwayZoneFunctorT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_43(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_43(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_45(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_45(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_47(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_47(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_49(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_49(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SDCZoneFunctorT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_51(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_51(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_53(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_53(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_55(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_55(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_57(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_57(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SDIZoneFunctorT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_59(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_59(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_61(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_61(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_63(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_63(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DoubleCubicInner, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_65(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_65(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__DoubleCubicInner_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_67(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_67(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__DoubleCubicInner_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_69(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_69(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__QuinticInner, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_71(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_71(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__QuinticInner_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_73(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_73(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__QuinticInner_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_75(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_75(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_asepy__PyFunctor1, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = is_array(argv[1]) || PySequence_Check(argv[1]);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_scanFunctor1D__SWIG_77(self, argc, argv);
        }
        return _wrap_scanFunctor1D__SWIG_77(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__ParabolicRailwayCurveT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_40(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__LogDensityFunctor1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_6(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__RailwayZoneFunctorT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_42(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__GaussianConvolution, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_22(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_44(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__ExceedanceFunctor1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_12(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_46(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DiscretizedConvolution, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_24(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SmoothDoubleCubicT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_48(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DensityDerivativeFunctor1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_4(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SDCZoneFunctorT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_50(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DoubleFunctor1, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_26(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_52(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__InvExceedanceFunctor1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_14(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_54(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__AbsLogLikelihoodCurve, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_28(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SymbetaDoubleIntegralT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_56(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__ShiftedDensityFunctor1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_8(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SDIZoneFunctorT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_58(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__LogLikelihoodDerivative, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_30(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_60(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__QuantileFunctor1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_16(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_62(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__LogLikelihoodSecondDerivative, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_32(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DoubleCubicInner, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_64(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DensityFunctor1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__DoubleCubicInner_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_66(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__TransitionCubicT_double_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_34(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__DoubleCubicInner_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_68(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__EntropyFunctor1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_18(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__QuinticInner, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_70(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_36(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__DerivativeFunctorHelperT_ase__QuinticInner_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_72(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__CdfFunctor1D, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_10(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__QuinticInner_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_74(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__SecondDerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_38(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_asepy__PyFunctor1, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_76(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ase__NumericalConvolution, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_scanFunctor1D__SWIG_20(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'scanFunctor1D'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    asepy::scanFunctor1D< ase::DensityFunctor1D >(ase::DensityFunctor1D const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::DensityFunctor1D >(ase::DensityFunctor1D const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::DensityDerivativeFunctor1D >(ase::DensityDerivativeFunctor1D const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::DensityDerivativeFunctor1D >(ase::DensityDerivativeFunctor1D const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::LogDensityFunctor1D >(ase::LogDensityFunctor1D const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::LogDensityFunctor1D >(ase::LogDensityFunctor1D const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::ShiftedDensityFunctor1D >(ase::ShiftedDensityFunctor1D const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::ShiftedDensityFunctor1D >(ase::ShiftedDensityFunctor1D const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::CdfFunctor1D >(ase::CdfFunctor1D const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::CdfFunctor1D >(ase::CdfFunctor1D const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::ExceedanceFunctor1D >(ase::ExceedanceFunctor1D const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::ExceedanceFunctor1D >(ase::ExceedanceFunctor1D const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::InvExceedanceFunctor1D >(ase::InvExceedanceFunctor1D const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::InvExceedanceFunctor1D >(ase::InvExceedanceFunctor1D const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::QuantileFunctor1D >(ase::QuantileFunctor1D const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::QuantileFunctor1D >(ase::QuantileFunctor1D const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::EntropyFunctor1D >(ase::EntropyFunctor1D const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::EntropyFunctor1D >(ase::EntropyFunctor1D const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::NumericalConvolution >(ase::NumericalConvolution const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::NumericalConvolution >(ase::NumericalConvolution const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::GaussianConvolution >(ase::GaussianConvolution const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::GaussianConvolution >(ase::GaussianConvolution const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::DiscretizedConvolution >(ase::DiscretizedConvolution const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::DiscretizedConvolution >(ase::DiscretizedConvolution const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::DoubleFunctor1 >(ase::DoubleFunctor1 const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::DoubleFunctor1 >(ase::DoubleFunctor1 const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::AbsLogLikelihoodCurve >(ase::AbsLogLikelihoodCurve const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::AbsLogLikelihoodCurve >(ase::AbsLogLikelihoodCurve const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::LogLikelihoodDerivative >(ase::LogLikelihoodDerivative const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::LogLikelihoodDerivative >(ase::LogLikelihoodDerivative const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::LogLikelihoodSecondDerivative >(ase::LogLikelihoodSecondDerivative const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::LogLikelihoodSecondDerivative >(ase::LogLikelihoodSecondDerivative const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::TransitionCubic< double > >(ase::TransitionCubic< double > const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::TransitionCubic< double > >(ase::TransitionCubic< double > const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > >(ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > >(ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > >(ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > >(ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::ParabolicRailwayCurve< double > >(ase::ParabolicRailwayCurve< double > const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::ParabolicRailwayCurve< double > >(ase::ParabolicRailwayCurve< double > const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::RailwayZoneFunctor< double > >(ase::RailwayZoneFunctor< double > const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::RailwayZoneFunctor< double > >(ase::RailwayZoneFunctor< double > const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > >(ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > >(ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > >(ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > >(ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::SmoothDoubleCubic< double > >(ase::SmoothDoubleCubic< double > const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::SmoothDoubleCubic< double > >(ase::SmoothDoubleCubic< double > const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::SDCZoneFunctor< double > >(ase::SDCZoneFunctor< double > const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::SDCZoneFunctor< double > >(ase::SDCZoneFunctor< double > const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > >(ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > >(ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > >(ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > >(ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::SymbetaDoubleIntegral< double > >(ase::SymbetaDoubleIntegral< double > const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::SymbetaDoubleIntegral< double > >(ase::SymbetaDoubleIntegral< double > const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::SDIZoneFunctor< double > >(ase::SDIZoneFunctor< double > const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::SDIZoneFunctor< double > >(ase::SDIZoneFunctor< double > const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > >(ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > >(ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > >(ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > >(ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::DoubleCubicInner >(ase::DoubleCubicInner const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::DoubleCubicInner >(ase::DoubleCubicInner const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::DerivativeFunctorHelper< ase::DoubleCubicInner > >(ase::DerivativeFunctorHelper< ase::DoubleCubicInner > const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::DerivativeFunctorHelper< ase::DoubleCubicInner > >(ase::DerivativeFunctorHelper< ase::DoubleCubicInner > const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > >(ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > >(ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::QuinticInner >(ase::QuinticInner const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::QuinticInner >(ase::QuinticInner const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::DerivativeFunctorHelper< ase::QuinticInner > >(ase::DerivativeFunctorHelper< ase::QuinticInner > const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::DerivativeFunctorHelper< ase::QuinticInner > >(ase::DerivativeFunctorHelper< ase::QuinticInner > const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::QuinticInner > >(ase::SecondDerivativeFunctorHelper< ase::QuinticInner > const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< ase::SecondDerivativeFunctorHelper< ase::QuinticInner > >(ase::SecondDerivativeFunctorHelper< ase::QuinticInner > const &,double const *,unsigned int const)\n"
    "    asepy::scanFunctor1D< asepy::PyFunctor1 >(asepy::PyFunctor1 const &,double const,double const,unsigned int const)\n"
    "    asepy::scanFunctor1D< asepy::PyFunctor1 >(asepy::PyFunctor1 const &,double const *,unsigned int const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_empiricalCdfOutline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ase::EmpiricalDistribution *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "empiricalCdfOutline", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_ase__EmpiricalDistribution,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "empiricalCdfOutline" "', argument " "1"" of type '" "ase::EmpiricalDistribution const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "empiricalCdfOutline" "', argument " "1"" of type '" "ase::EmpiricalDistribution const &""'"); 
  }
  arg1 = reinterpret_cast< ase::EmpiricalDistribution * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "empiricalCdfOutline" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "empiricalCdfOutline" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (PyObject *)asepy::empiricalCdfOutline((ase::EmpiricalDistribution const &)*arg1,arg2,arg3);
    } catch (const std::exception& e) {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_O, NULL},
	 { "SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_O, NULL},
	 { "SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { "SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { "SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { "SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { "SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_O, NULL},
	 { "SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_O, NULL},
	 { "SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_O, NULL},
	 { "SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_O, NULL},
	 { "SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { "SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { "SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { "SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { "SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { "SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { "SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { "SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_O, NULL},
	 { "string_length", _wrap_string_length, METH_O, NULL},
	 { "string_max_size", _wrap_string_max_size, METH_O, NULL},
	 { "string_capacity", _wrap_string_capacity, METH_O, NULL},
	 { "string_reserve", _wrap_string_reserve, METH_VARARGS, NULL},
	 { "string_copy", _wrap_string_copy, METH_VARARGS, NULL},
	 { "string_c_str", _wrap_string_c_str, METH_O, NULL},
	 { "string_find", _wrap_string_find, METH_VARARGS, NULL},
	 { "string_rfind", _wrap_string_rfind, METH_VARARGS, NULL},
	 { "string_find_first_of", _wrap_string_find_first_of, METH_VARARGS, NULL},
	 { "string_find_last_of", _wrap_string_find_last_of, METH_VARARGS, NULL},
	 { "string_find_first_not_of", _wrap_string_find_first_not_of, METH_VARARGS, NULL},
	 { "string_find_last_not_of", _wrap_string_find_last_not_of, METH_VARARGS, NULL},
	 { "string_substr", _wrap_string_substr, METH_VARARGS, NULL},
	 { "string_empty", _wrap_string_empty, METH_O, NULL},
	 { "string_size", _wrap_string_size, METH_O, NULL},
	 { "string_swap", _wrap_string_swap, METH_VARARGS, NULL},
	 { "string_begin", _wrap_string_begin, METH_O, NULL},
	 { "string_end", _wrap_string_end, METH_O, NULL},
	 { "string_rbegin", _wrap_string_rbegin, METH_O, NULL},
	 { "string_rend", _wrap_string_rend, METH_O, NULL},
	 { "string_get_allocator", _wrap_string_get_allocator, METH_O, NULL},
	 { "string_erase", _wrap_string_erase, METH_VARARGS, NULL},
	 { "new_string", _wrap_new_string, METH_VARARGS, NULL},
	 { "string_assign", _wrap_string_assign, METH_VARARGS, NULL},
	 { "string_resize", _wrap_string_resize, METH_VARARGS, NULL},
	 { "string_iterator", _wrap_string_iterator, METH_O, NULL},
	 { "string___nonzero__", _wrap_string___nonzero__, METH_O, NULL},
	 { "string___bool__", _wrap_string___bool__, METH_O, NULL},
	 { "string___len__", _wrap_string___len__, METH_O, NULL},
	 { "string___getslice__", _wrap_string___getslice__, METH_VARARGS, NULL},
	 { "string___setslice__", _wrap_string___setslice__, METH_VARARGS, NULL},
	 { "string___delslice__", _wrap_string___delslice__, METH_VARARGS, NULL},
	 { "string___delitem__", _wrap_string___delitem__, METH_VARARGS, NULL},
	 { "string___getitem__", _wrap_string___getitem__, METH_VARARGS, NULL},
	 { "string___setitem__", _wrap_string___setitem__, METH_VARARGS, NULL},
	 { "string_insert", _wrap_string_insert, METH_VARARGS, NULL},
	 { "string_replace", _wrap_string_replace, METH_VARARGS, NULL},
	 { "string___iadd__", _wrap_string___iadd__, METH_VARARGS, NULL},
	 { "string___add__", _wrap_string___add__, METH_VARARGS, NULL},
	 { "string___radd__", _wrap_string___radd__, METH_VARARGS, NULL},
	 { "string___str__", _wrap_string___str__, METH_O, NULL},
	 { "string___rlshift__", _wrap_string___rlshift__, METH_VARARGS, NULL},
	 { "string___eq__", _wrap_string___eq__, METH_VARARGS, NULL},
	 { "string___ne__", _wrap_string___ne__, METH_VARARGS, NULL},
	 { "string___gt__", _wrap_string___gt__, METH_VARARGS, NULL},
	 { "string___lt__", _wrap_string___lt__, METH_VARARGS, NULL},
	 { "string___ge__", _wrap_string___ge__, METH_VARARGS, NULL},
	 { "string___le__", _wrap_string___le__, METH_VARARGS, NULL},
	 { "delete_string", _wrap_delete_string, METH_O, NULL},
	 { "string_swigregister", string_swigregister, METH_O, NULL},
	 { "string_swiginit", string_swiginit, METH_VARARGS, NULL},
	 { "ios_base_register_callback", _wrap_ios_base_register_callback, METH_VARARGS, NULL},
	 { "ios_base_flags", _wrap_ios_base_flags, METH_VARARGS, NULL},
	 { "ios_base_setf", _wrap_ios_base_setf, METH_VARARGS, NULL},
	 { "ios_base_unsetf", _wrap_ios_base_unsetf, METH_VARARGS, NULL},
	 { "ios_base_precision", _wrap_ios_base_precision, METH_VARARGS, NULL},
	 { "ios_base_width", _wrap_ios_base_width, METH_VARARGS, NULL},
	 { "ios_base_sync_with_stdio", _wrap_ios_base_sync_with_stdio, METH_VARARGS, NULL},
	 { "ios_base_imbue", _wrap_ios_base_imbue, METH_VARARGS, NULL},
	 { "ios_base_getloc", _wrap_ios_base_getloc, METH_O, NULL},
	 { "ios_base_xalloc", _wrap_ios_base_xalloc, METH_NOARGS, NULL},
	 { "ios_base_iword", _wrap_ios_base_iword, METH_VARARGS, NULL},
	 { "ios_base_pword", _wrap_ios_base_pword, METH_VARARGS, NULL},
	 { "delete_ios_base", _wrap_delete_ios_base, METH_O, NULL},
	 { "ios_base_swigregister", ios_base_swigregister, METH_O, NULL},
	 { "ios_rdstate", _wrap_ios_rdstate, METH_O, NULL},
	 { "ios_clear", _wrap_ios_clear, METH_VARARGS, NULL},
	 { "ios_setstate", _wrap_ios_setstate, METH_VARARGS, NULL},
	 { "ios_good", _wrap_ios_good, METH_O, NULL},
	 { "ios_eof", _wrap_ios_eof, METH_O, NULL},
	 { "ios_fail", _wrap_ios_fail, METH_O, NULL},
	 { "ios_bad", _wrap_ios_bad, METH_O, NULL},
	 { "ios_exceptions", _wrap_ios_exceptions, METH_VARARGS, NULL},
	 { "new_ios", _wrap_new_ios, METH_O, NULL},
	 { "delete_ios", _wrap_delete_ios, METH_O, NULL},
	 { "ios_tie", _wrap_ios_tie, METH_VARARGS, NULL},
	 { "ios_rdbuf", _wrap_ios_rdbuf, METH_VARARGS, NULL},
	 { "ios_copyfmt", _wrap_ios_copyfmt, METH_VARARGS, NULL},
	 { "ios_fill", _wrap_ios_fill, METH_VARARGS, NULL},
	 { "ios_imbue", _wrap_ios_imbue, METH_VARARGS, NULL},
	 { "ios_narrow", _wrap_ios_narrow, METH_VARARGS, NULL},
	 { "ios_widen", _wrap_ios_widen, METH_VARARGS, NULL},
	 { "ios_swigregister", ios_swigregister, METH_O, NULL},
	 { "ios_swiginit", ios_swiginit, METH_VARARGS, NULL},
	 { "delete_streambuf", _wrap_delete_streambuf, METH_O, NULL},
	 { "streambuf_pubimbue", _wrap_streambuf_pubimbue, METH_VARARGS, NULL},
	 { "streambuf_getloc", _wrap_streambuf_getloc, METH_O, NULL},
	 { "streambuf_pubsetbuf", _wrap_streambuf_pubsetbuf, METH_VARARGS, NULL},
	 { "streambuf_pubseekoff", _wrap_streambuf_pubseekoff, METH_VARARGS, NULL},
	 { "streambuf_pubseekpos", _wrap_streambuf_pubseekpos, METH_VARARGS, NULL},
	 { "streambuf_pubsync", _wrap_streambuf_pubsync, METH_O, NULL},
	 { "streambuf_in_avail", _wrap_streambuf_in_avail, METH_O, NULL},
	 { "streambuf_snextc", _wrap_streambuf_snextc, METH_O, NULL},
	 { "streambuf_sbumpc", _wrap_streambuf_sbumpc, METH_O, NULL},
	 { "streambuf_sgetc", _wrap_streambuf_sgetc, METH_O, NULL},
	 { "streambuf_sgetn", _wrap_streambuf_sgetn, METH_VARARGS, NULL},
	 { "streambuf_sputbackc", _wrap_streambuf_sputbackc, METH_VARARGS, NULL},
	 { "streambuf_sungetc", _wrap_streambuf_sungetc, METH_O, NULL},
	 { "streambuf_sputc", _wrap_streambuf_sputc, METH_VARARGS, NULL},
	 { "streambuf_sputn", _wrap_streambuf_sputn, METH_VARARGS, NULL},
	 { "streambuf_swigregister", streambuf_swigregister, METH_O, NULL},
	 { "new_ostream", _wrap_new_ostream, METH_O, NULL},
	 { "delete_ostream", _wrap_delete_ostream, METH_O, NULL},
	 { "ostream___lshift__", _wrap_ostream___lshift__, METH_VARARGS, NULL},
	 { "ostream_put", _wrap_ostream_put, METH_VARARGS, NULL},
	 { "ostream_write", _wrap_ostream_write, METH_VARARGS, NULL},
	 { "ostream_flush", _wrap_ostream_flush, METH_O, NULL},
	 { "ostream_tellp", _wrap_ostream_tellp, METH_O, NULL},
	 { "ostream_seekp", _wrap_ostream_seekp, METH_VARARGS, NULL},
	 { "ostream_swigregister", ostream_swigregister, METH_O, NULL},
	 { "ostream_swiginit", ostream_swiginit, METH_VARARGS, NULL},
	 { "new_istream", _wrap_new_istream, METH_O, NULL},
	 { "delete_istream", _wrap_delete_istream, METH_O, NULL},
	 { "istream___rshift__", _wrap_istream___rshift__, METH_VARARGS, NULL},
	 { "istream_gcount", _wrap_istream_gcount, METH_O, NULL},
	 { "istream_get", _wrap_istream_get, METH_VARARGS, NULL},
	 { "istream_getline", _wrap_istream_getline, METH_VARARGS, NULL},
	 { "istream_ignore", _wrap_istream_ignore, METH_VARARGS, NULL},
	 { "istream_peek", _wrap_istream_peek, METH_O, NULL},
	 { "istream_read", _wrap_istream_read, METH_VARARGS, NULL},
	 { "istream_readsome", _wrap_istream_readsome, METH_VARARGS, NULL},
	 { "istream_putback", _wrap_istream_putback, METH_VARARGS, NULL},
	 { "istream_unget", _wrap_istream_unget, METH_O, NULL},
	 { "istream_sync", _wrap_istream_sync, METH_O, NULL},
	 { "istream_tellg", _wrap_istream_tellg, METH_O, NULL},
	 { "istream_seekg", _wrap_istream_seekg, METH_VARARGS, NULL},
	 { "istream_swigregister", istream_swigregister, METH_O, NULL},
	 { "istream_swiginit", istream_swiginit, METH_VARARGS, NULL},
	 { "new_iostream", _wrap_new_iostream, METH_O, NULL},
	 { "delete_iostream", _wrap_delete_iostream, METH_O, NULL},
	 { "iostream_swigregister", iostream_swigregister, METH_O, NULL},
	 { "iostream_swiginit", iostream_swiginit, METH_VARARGS, NULL},
	 { "endl", _wrap_endl, METH_O, "swig_ptr: endl_cb_ptr"},
	 { "ends", _wrap_ends, METH_O, "swig_ptr: ends_cb_ptr"},
	 { "flush", _wrap_flush, METH_O, "swig_ptr: flush_cb_ptr"},
	 { "new_istringstream", _wrap_new_istringstream, METH_VARARGS, NULL},
	 { "delete_istringstream", _wrap_delete_istringstream, METH_O, NULL},
	 { "istringstream_rdbuf", _wrap_istringstream_rdbuf, METH_O, NULL},
	 { "istringstream_str", _wrap_istringstream_str, METH_VARARGS, NULL},
	 { "istringstream_swigregister", istringstream_swigregister, METH_O, NULL},
	 { "istringstream_swiginit", istringstream_swiginit, METH_VARARGS, NULL},
	 { "new_ostringstream", _wrap_new_ostringstream, METH_VARARGS, NULL},
	 { "delete_ostringstream", _wrap_delete_ostringstream, METH_O, NULL},
	 { "ostringstream_rdbuf", _wrap_ostringstream_rdbuf, METH_O, NULL},
	 { "ostringstream_str", _wrap_ostringstream_str, METH_O, NULL},
	 { "ostringstream_swigregister", ostringstream_swigregister, METH_O, NULL},
	 { "ostringstream_swiginit", ostringstream_swiginit, METH_VARARGS, NULL},
	 { "new_stringstream", _wrap_new_stringstream, METH_VARARGS, NULL},
	 { "delete_stringstream", _wrap_delete_stringstream, METH_O, NULL},
	 { "stringstream_rdbuf", _wrap_stringstream_rdbuf, METH_O, NULL},
	 { "stringstream_str", _wrap_stringstream_str, METH_VARARGS, NULL},
	 { "stringstream_swigregister", stringstream_swigregister, METH_O, NULL},
	 { "stringstream_swiginit", stringstream_swiginit, METH_VARARGS, NULL},
	 { "new_UIntDoublePair", _wrap_new_UIntDoublePair, METH_VARARGS, NULL},
	 { "UIntDoublePair_first_set", _wrap_UIntDoublePair_first_set, METH_VARARGS, NULL},
	 { "UIntDoublePair_first_get", _wrap_UIntDoublePair_first_get, METH_O, NULL},
	 { "UIntDoublePair_second_set", _wrap_UIntDoublePair_second_set, METH_VARARGS, NULL},
	 { "UIntDoublePair_second_get", _wrap_UIntDoublePair_second_get, METH_O, NULL},
	 { "delete_UIntDoublePair", _wrap_delete_UIntDoublePair, METH_O, NULL},
	 { "UIntDoublePair_swigregister", UIntDoublePair_swigregister, METH_O, NULL},
	 { "UIntDoublePair_swiginit", UIntDoublePair_swiginit, METH_VARARGS, NULL},
	 { "new_DoubleDoublePair", _wrap_new_DoubleDoublePair, METH_VARARGS, NULL},
	 { "DoubleDoublePair_first_set", _wrap_DoubleDoublePair_first_set, METH_VARARGS, NULL},
	 { "DoubleDoublePair_first_get", _wrap_DoubleDoublePair_first_get, METH_O, NULL},
	 { "DoubleDoublePair_second_set", _wrap_DoubleDoublePair_second_set, METH_VARARGS, NULL},
	 { "DoubleDoublePair_second_get", _wrap_DoubleDoublePair_second_get, METH_O, NULL},
	 { "delete_DoubleDoublePair", _wrap_delete_DoubleDoublePair, METH_O, NULL},
	 { "DoubleDoublePair_swigregister", DoubleDoublePair_swigregister, METH_O, NULL},
	 { "DoubleDoublePair_swiginit", DoubleDoublePair_swiginit, METH_VARARGS, NULL},
	 { "new_BoolDoublePair", _wrap_new_BoolDoublePair, METH_VARARGS, NULL},
	 { "BoolDoublePair_first_set", _wrap_BoolDoublePair_first_set, METH_VARARGS, NULL},
	 { "BoolDoublePair_first_get", _wrap_BoolDoublePair_first_get, METH_O, NULL},
	 { "BoolDoublePair_second_set", _wrap_BoolDoublePair_second_set, METH_VARARGS, NULL},
	 { "BoolDoublePair_second_get", _wrap_BoolDoublePair_second_get, METH_O, NULL},
	 { "delete_BoolDoublePair", _wrap_delete_BoolDoublePair, METH_O, NULL},
	 { "BoolDoublePair_swigregister", BoolDoublePair_swigregister, METH_O, NULL},
	 { "BoolDoublePair_swiginit", BoolDoublePair_swiginit, METH_VARARGS, NULL},
	 { "DoubleVector_iterator", _wrap_DoubleVector_iterator, METH_O, NULL},
	 { "DoubleVector___nonzero__", _wrap_DoubleVector___nonzero__, METH_O, NULL},
	 { "DoubleVector___bool__", _wrap_DoubleVector___bool__, METH_O, NULL},
	 { "DoubleVector___len__", _wrap_DoubleVector___len__, METH_O, NULL},
	 { "DoubleVector___getslice__", _wrap_DoubleVector___getslice__, METH_VARARGS, NULL},
	 { "DoubleVector___setslice__", _wrap_DoubleVector___setslice__, METH_VARARGS, NULL},
	 { "DoubleVector___delslice__", _wrap_DoubleVector___delslice__, METH_VARARGS, NULL},
	 { "DoubleVector___delitem__", _wrap_DoubleVector___delitem__, METH_VARARGS, NULL},
	 { "DoubleVector___getitem__", _wrap_DoubleVector___getitem__, METH_VARARGS, NULL},
	 { "DoubleVector___setitem__", _wrap_DoubleVector___setitem__, METH_VARARGS, NULL},
	 { "DoubleVector_pop", _wrap_DoubleVector_pop, METH_O, NULL},
	 { "DoubleVector_append", _wrap_DoubleVector_append, METH_VARARGS, NULL},
	 { "DoubleVector_empty", _wrap_DoubleVector_empty, METH_O, NULL},
	 { "DoubleVector_size", _wrap_DoubleVector_size, METH_O, NULL},
	 { "DoubleVector_swap", _wrap_DoubleVector_swap, METH_VARARGS, NULL},
	 { "DoubleVector_begin", _wrap_DoubleVector_begin, METH_O, NULL},
	 { "DoubleVector_end", _wrap_DoubleVector_end, METH_O, NULL},
	 { "DoubleVector_rbegin", _wrap_DoubleVector_rbegin, METH_O, NULL},
	 { "DoubleVector_rend", _wrap_DoubleVector_rend, METH_O, NULL},
	 { "DoubleVector_clear", _wrap_DoubleVector_clear, METH_O, NULL},
	 { "DoubleVector_get_allocator", _wrap_DoubleVector_get_allocator, METH_O, NULL},
	 { "DoubleVector_pop_back", _wrap_DoubleVector_pop_back, METH_O, NULL},
	 { "DoubleVector_erase", _wrap_DoubleVector_erase, METH_VARARGS, NULL},
	 { "new_DoubleVector", _wrap_new_DoubleVector, METH_VARARGS, NULL},
	 { "DoubleVector_push_back", _wrap_DoubleVector_push_back, METH_VARARGS, NULL},
	 { "DoubleVector_front", _wrap_DoubleVector_front, METH_O, NULL},
	 { "DoubleVector_back", _wrap_DoubleVector_back, METH_O, NULL},
	 { "DoubleVector_assign", _wrap_DoubleVector_assign, METH_VARARGS, NULL},
	 { "DoubleVector_resize", _wrap_DoubleVector_resize, METH_VARARGS, NULL},
	 { "DoubleVector_insert", _wrap_DoubleVector_insert, METH_VARARGS, NULL},
	 { "DoubleVector_reserve", _wrap_DoubleVector_reserve, METH_VARARGS, NULL},
	 { "DoubleVector_capacity", _wrap_DoubleVector_capacity, METH_O, NULL},
	 { "delete_DoubleVector", _wrap_delete_DoubleVector, METH_O, NULL},
	 { "DoubleVector_swigregister", DoubleVector_swigregister, METH_O, NULL},
	 { "DoubleVector_swiginit", DoubleVector_swiginit, METH_VARARGS, NULL},
	 { "new_PyFunctor1", _wrap_new_PyFunctor1, METH_O, NULL},
	 { "delete_PyFunctor1", _wrap_delete_PyFunctor1, METH_O, NULL},
	 { "PyFunctor1___call__", _wrap_PyFunctor1___call__, METH_VARARGS, NULL},
	 { "PyFunctor1_swigregister", PyFunctor1_swigregister, METH_O, NULL},
	 { "PyFunctor1_swiginit", PyFunctor1_swiginit, METH_VARARGS, NULL},
	 { "delete_AbsRNG", _wrap_delete_AbsRNG, METH_O, NULL},
	 { "AbsRNG___call__", _wrap_AbsRNG___call__, METH_O, NULL},
	 { "AbsRNG_generate", _wrap_AbsRNG_generate, METH_VARARGS, NULL},
	 { "AbsRNG_swigregister", AbsRNG_swigregister, METH_O, NULL},
	 { "delete_AbsDistributionModel1D", _wrap_delete_AbsDistributionModel1D, METH_O, NULL},
	 { "AbsDistributionModel1D_clone", _wrap_AbsDistributionModel1D_clone, METH_O, NULL},
	 { "AbsDistributionModel1D_density", _wrap_AbsDistributionModel1D_density, METH_VARARGS, NULL},
	 { "AbsDistributionModel1D_isDensityContinuous", _wrap_AbsDistributionModel1D_isDensityContinuous, METH_O, NULL},
	 { "AbsDistributionModel1D_isNonNegative", _wrap_AbsDistributionModel1D_isNonNegative, METH_O, NULL},
	 { "AbsDistributionModel1D_isUnimodal", _wrap_AbsDistributionModel1D_isUnimodal, METH_O, NULL},
	 { "AbsDistributionModel1D_densityDerivative", _wrap_AbsDistributionModel1D_densityDerivative, METH_VARARGS, NULL},
	 { "AbsDistributionModel1D_cdf", _wrap_AbsDistributionModel1D_cdf, METH_VARARGS, NULL},
	 { "AbsDistributionModel1D_exceedance", _wrap_AbsDistributionModel1D_exceedance, METH_VARARGS, NULL},
	 { "AbsDistributionModel1D_quantile", _wrap_AbsDistributionModel1D_quantile, METH_VARARGS, NULL},
	 { "AbsDistributionModel1D_invExceedance", _wrap_AbsDistributionModel1D_invExceedance, METH_VARARGS, NULL},
	 { "AbsDistributionModel1D_cumulant", _wrap_AbsDistributionModel1D_cumulant, METH_VARARGS, NULL},
	 { "AbsDistributionModel1D_mode", _wrap_AbsDistributionModel1D_mode, METH_O, NULL},
	 { "AbsDistributionModel1D_descentDelta", _wrap_AbsDistributionModel1D_descentDelta, METH_VARARGS, NULL},
	 { "AbsDistributionModel1D_classname", _wrap_AbsDistributionModel1D_classname, METH_O, NULL},
	 { "AbsDistributionModel1D_random", _wrap_AbsDistributionModel1D_random, METH_VARARGS, NULL},
	 { "AbsDistributionModel1D_qWidth", _wrap_AbsDistributionModel1D_qWidth, METH_O, NULL},
	 { "AbsDistributionModel1D_qAsymmetry", _wrap_AbsDistributionModel1D_qAsymmetry, METH_O, NULL},
	 { "AbsDistributionModel1D_generate", _wrap_AbsDistributionModel1D_generate, METH_VARARGS, NULL},
	 { "AbsDistributionModel1D_swigregister", AbsDistributionModel1D_swigregister, METH_O, NULL},
	 { "AbsLocationScaleFamily_clone", _wrap_AbsLocationScaleFamily_clone, METH_O, NULL},
	 { "delete_AbsLocationScaleFamily", _wrap_delete_AbsLocationScaleFamily, METH_O, NULL},
	 { "AbsLocationScaleFamily_location", _wrap_AbsLocationScaleFamily_location, METH_O, NULL},
	 { "AbsLocationScaleFamily_scale", _wrap_AbsLocationScaleFamily_scale, METH_O, NULL},
	 { "AbsLocationScaleFamily_setLocation", _wrap_AbsLocationScaleFamily_setLocation, METH_VARARGS, NULL},
	 { "AbsLocationScaleFamily_setScale", _wrap_AbsLocationScaleFamily_setScale, METH_VARARGS, NULL},
	 { "AbsLocationScaleFamily_density", _wrap_AbsLocationScaleFamily_density, METH_VARARGS, NULL},
	 { "AbsLocationScaleFamily_densityDerivative", _wrap_AbsLocationScaleFamily_densityDerivative, METH_VARARGS, NULL},
	 { "AbsLocationScaleFamily_cdf", _wrap_AbsLocationScaleFamily_cdf, METH_VARARGS, NULL},
	 { "AbsLocationScaleFamily_exceedance", _wrap_AbsLocationScaleFamily_exceedance, METH_VARARGS, NULL},
	 { "AbsLocationScaleFamily_quantile", _wrap_AbsLocationScaleFamily_quantile, METH_VARARGS, NULL},
	 { "AbsLocationScaleFamily_invExceedance", _wrap_AbsLocationScaleFamily_invExceedance, METH_VARARGS, NULL},
	 { "AbsLocationScaleFamily_cumulant", _wrap_AbsLocationScaleFamily_cumulant, METH_VARARGS, NULL},
	 { "AbsLocationScaleFamily_mode", _wrap_AbsLocationScaleFamily_mode, METH_O, NULL},
	 { "AbsLocationScaleFamily_descentDelta", _wrap_AbsLocationScaleFamily_descentDelta, METH_VARARGS, NULL},
	 { "AbsLocationScaleFamily_random", _wrap_AbsLocationScaleFamily_random, METH_VARARGS, NULL},
	 { "AbsLocationScaleFamily_qWidth", _wrap_AbsLocationScaleFamily_qWidth, METH_O, NULL},
	 { "AbsLocationScaleFamily_qAsymmetry", _wrap_AbsLocationScaleFamily_qAsymmetry, METH_O, NULL},
	 { "AbsLocationScaleFamily_classname", _wrap_AbsLocationScaleFamily_classname, METH_O, NULL},
	 { "AbsLocationScaleFamily_swigregister", AbsLocationScaleFamily_swigregister, METH_O, NULL},
	 { "new_DensityFunctor1D", _wrap_new_DensityFunctor1D, METH_O, NULL},
	 { "DensityFunctor1D___call__", _wrap_DensityFunctor1D___call__, METH_VARARGS, NULL},
	 { "delete_DensityFunctor1D", _wrap_delete_DensityFunctor1D, METH_O, NULL},
	 { "DensityFunctor1D_swigregister", DensityFunctor1D_swigregister, METH_O, NULL},
	 { "DensityFunctor1D_swiginit", DensityFunctor1D_swiginit, METH_VARARGS, NULL},
	 { "new_DensityDerivativeFunctor1D", _wrap_new_DensityDerivativeFunctor1D, METH_O, NULL},
	 { "DensityDerivativeFunctor1D___call__", _wrap_DensityDerivativeFunctor1D___call__, METH_VARARGS, NULL},
	 { "delete_DensityDerivativeFunctor1D", _wrap_delete_DensityDerivativeFunctor1D, METH_O, NULL},
	 { "DensityDerivativeFunctor1D_swigregister", DensityDerivativeFunctor1D_swigregister, METH_O, NULL},
	 { "DensityDerivativeFunctor1D_swiginit", DensityDerivativeFunctor1D_swiginit, METH_VARARGS, NULL},
	 { "new_ShiftedDensityFunctor1D", _wrap_new_ShiftedDensityFunctor1D, METH_VARARGS, NULL},
	 { "ShiftedDensityFunctor1D___call__", _wrap_ShiftedDensityFunctor1D___call__, METH_VARARGS, NULL},
	 { "delete_ShiftedDensityFunctor1D", _wrap_delete_ShiftedDensityFunctor1D, METH_O, NULL},
	 { "ShiftedDensityFunctor1D_swigregister", ShiftedDensityFunctor1D_swigregister, METH_O, NULL},
	 { "ShiftedDensityFunctor1D_swiginit", ShiftedDensityFunctor1D_swiginit, METH_VARARGS, NULL},
	 { "new_CdfFunctor1D", _wrap_new_CdfFunctor1D, METH_O, NULL},
	 { "CdfFunctor1D___call__", _wrap_CdfFunctor1D___call__, METH_VARARGS, NULL},
	 { "delete_CdfFunctor1D", _wrap_delete_CdfFunctor1D, METH_O, NULL},
	 { "CdfFunctor1D_swigregister", CdfFunctor1D_swigregister, METH_O, NULL},
	 { "CdfFunctor1D_swiginit", CdfFunctor1D_swiginit, METH_VARARGS, NULL},
	 { "new_ExceedanceFunctor1D", _wrap_new_ExceedanceFunctor1D, METH_O, NULL},
	 { "ExceedanceFunctor1D___call__", _wrap_ExceedanceFunctor1D___call__, METH_VARARGS, NULL},
	 { "delete_ExceedanceFunctor1D", _wrap_delete_ExceedanceFunctor1D, METH_O, NULL},
	 { "ExceedanceFunctor1D_swigregister", ExceedanceFunctor1D_swigregister, METH_O, NULL},
	 { "ExceedanceFunctor1D_swiginit", ExceedanceFunctor1D_swiginit, METH_VARARGS, NULL},
	 { "new_InvExceedanceFunctor1D", _wrap_new_InvExceedanceFunctor1D, METH_O, NULL},
	 { "InvExceedanceFunctor1D___call__", _wrap_InvExceedanceFunctor1D___call__, METH_VARARGS, NULL},
	 { "delete_InvExceedanceFunctor1D", _wrap_delete_InvExceedanceFunctor1D, METH_O, NULL},
	 { "InvExceedanceFunctor1D_swigregister", InvExceedanceFunctor1D_swigregister, METH_O, NULL},
	 { "InvExceedanceFunctor1D_swiginit", InvExceedanceFunctor1D_swiginit, METH_VARARGS, NULL},
	 { "new_QuantileFunctor1D", _wrap_new_QuantileFunctor1D, METH_O, NULL},
	 { "QuantileFunctor1D___call__", _wrap_QuantileFunctor1D___call__, METH_VARARGS, NULL},
	 { "delete_QuantileFunctor1D", _wrap_delete_QuantileFunctor1D, METH_O, NULL},
	 { "QuantileFunctor1D_swigregister", QuantileFunctor1D_swigregister, METH_O, NULL},
	 { "QuantileFunctor1D_swiginit", QuantileFunctor1D_swiginit, METH_VARARGS, NULL},
	 { "new_EntropyFunctor1D", _wrap_new_EntropyFunctor1D, METH_O, NULL},
	 { "EntropyFunctor1D___call__", _wrap_EntropyFunctor1D___call__, METH_VARARGS, NULL},
	 { "delete_EntropyFunctor1D", _wrap_delete_EntropyFunctor1D, METH_O, NULL},
	 { "EntropyFunctor1D_swigregister", EntropyFunctor1D_swigregister, METH_O, NULL},
	 { "EntropyFunctor1D_swiginit", EntropyFunctor1D_swiginit, METH_VARARGS, NULL},
	 { "new_LogDensityFunctor1D", _wrap_new_LogDensityFunctor1D, METH_O, NULL},
	 { "LogDensityFunctor1D___call__", _wrap_LogDensityFunctor1D___call__, METH_VARARGS, NULL},
	 { "delete_LogDensityFunctor1D", _wrap_delete_LogDensityFunctor1D, METH_O, NULL},
	 { "LogDensityFunctor1D_swigregister", LogDensityFunctor1D_swigregister, METH_O, NULL},
	 { "LogDensityFunctor1D_swiginit", LogDensityFunctor1D_swiginit, METH_VARARGS, NULL},
	 { "new_MomentFunctor1D", _wrap_new_MomentFunctor1D, METH_VARARGS, NULL},
	 { "MomentFunctor1D___call__", _wrap_MomentFunctor1D___call__, METH_VARARGS, NULL},
	 { "delete_MomentFunctor1D", _wrap_delete_MomentFunctor1D, METH_O, NULL},
	 { "MomentFunctor1D_swigregister", MomentFunctor1D_swigregister, METH_O, NULL},
	 { "MomentFunctor1D_swiginit", MomentFunctor1D_swiginit, METH_VARARGS, NULL},
	 { "new_RatioMomentFunctor1D", _wrap_new_RatioMomentFunctor1D, METH_VARARGS, NULL},
	 { "RatioMomentFunctor1D___call__", _wrap_RatioMomentFunctor1D___call__, METH_VARARGS, NULL},
	 { "delete_RatioMomentFunctor1D", _wrap_delete_RatioMomentFunctor1D, METH_O, NULL},
	 { "RatioMomentFunctor1D_swigregister", RatioMomentFunctor1D_swigregister, METH_O, NULL},
	 { "RatioMomentFunctor1D_swiginit", RatioMomentFunctor1D_swiginit, METH_VARARGS, NULL},
	 { "new_UnscaledCdfFunctor1D", _wrap_new_UnscaledCdfFunctor1D, METH_O, NULL},
	 { "UnscaledCdfFunctor1D___call__", _wrap_UnscaledCdfFunctor1D___call__, METH_VARARGS, NULL},
	 { "delete_UnscaledCdfFunctor1D", _wrap_delete_UnscaledCdfFunctor1D, METH_O, NULL},
	 { "UnscaledCdfFunctor1D_swigregister", UnscaledCdfFunctor1D_swigregister, METH_O, NULL},
	 { "UnscaledCdfFunctor1D_swiginit", UnscaledCdfFunctor1D_swiginit, METH_VARARGS, NULL},
	 { "new_UnscaledExceedanceFunctor1D", _wrap_new_UnscaledExceedanceFunctor1D, METH_O, NULL},
	 { "UnscaledExceedanceFunctor1D___call__", _wrap_UnscaledExceedanceFunctor1D___call__, METH_VARARGS, NULL},
	 { "delete_UnscaledExceedanceFunctor1D", _wrap_delete_UnscaledExceedanceFunctor1D, METH_O, NULL},
	 { "UnscaledExceedanceFunctor1D_swigregister", UnscaledExceedanceFunctor1D_swigregister, METH_O, NULL},
	 { "UnscaledExceedanceFunctor1D_swiginit", UnscaledExceedanceFunctor1D_swiginit, METH_VARARGS, NULL},
	 { "new_UnscaledQuantileFunctor1D", _wrap_new_UnscaledQuantileFunctor1D, METH_O, NULL},
	 { "UnscaledQuantileFunctor1D___call__", _wrap_UnscaledQuantileFunctor1D___call__, METH_VARARGS, NULL},
	 { "delete_UnscaledQuantileFunctor1D", _wrap_delete_UnscaledQuantileFunctor1D, METH_O, NULL},
	 { "UnscaledQuantileFunctor1D_swigregister", UnscaledQuantileFunctor1D_swigregister, METH_O, NULL},
	 { "UnscaledQuantileFunctor1D_swiginit", UnscaledQuantileFunctor1D_swiginit, METH_VARARGS, NULL},
	 { "new_UnscaledInvExceedanceFunctor1D", _wrap_new_UnscaledInvExceedanceFunctor1D, METH_O, NULL},
	 { "UnscaledInvExceedanceFunctor1D___call__", _wrap_UnscaledInvExceedanceFunctor1D___call__, METH_VARARGS, NULL},
	 { "delete_UnscaledInvExceedanceFunctor1D", _wrap_delete_UnscaledInvExceedanceFunctor1D, METH_O, NULL},
	 { "UnscaledInvExceedanceFunctor1D_swigregister", UnscaledInvExceedanceFunctor1D_swigregister, METH_O, NULL},
	 { "UnscaledInvExceedanceFunctor1D_swiginit", UnscaledInvExceedanceFunctor1D_swiginit, METH_VARARGS, NULL},
	 { "new_UnscaledDensityFunctor1D", _wrap_new_UnscaledDensityFunctor1D, METH_O, NULL},
	 { "UnscaledDensityFunctor1D___call__", _wrap_UnscaledDensityFunctor1D___call__, METH_VARARGS, NULL},
	 { "delete_UnscaledDensityFunctor1D", _wrap_delete_UnscaledDensityFunctor1D, METH_O, NULL},
	 { "UnscaledDensityFunctor1D_swigregister", UnscaledDensityFunctor1D_swigregister, METH_O, NULL},
	 { "UnscaledDensityFunctor1D_swiginit", UnscaledDensityFunctor1D_swiginit, METH_VARARGS, NULL},
	 { "new_UnscaledDensityDerivativeFunctor1D", _wrap_new_UnscaledDensityDerivativeFunctor1D, METH_O, NULL},
	 { "UnscaledDensityDerivativeFunctor1D___call__", _wrap_UnscaledDensityDerivativeFunctor1D___call__, METH_VARARGS, NULL},
	 { "delete_UnscaledDensityDerivativeFunctor1D", _wrap_delete_UnscaledDensityDerivativeFunctor1D, METH_O, NULL},
	 { "UnscaledDensityDerivativeFunctor1D_swigregister", UnscaledDensityDerivativeFunctor1D_swigregister, METH_O, NULL},
	 { "UnscaledDensityDerivativeFunctor1D_swiginit", UnscaledDensityDerivativeFunctor1D_swiginit, METH_VARARGS, NULL},
	 { "new_UnscaledMomentFunctor1D", _wrap_new_UnscaledMomentFunctor1D, METH_VARARGS, NULL},
	 { "UnscaledMomentFunctor1D___call__", _wrap_UnscaledMomentFunctor1D___call__, METH_VARARGS, NULL},
	 { "delete_UnscaledMomentFunctor1D", _wrap_delete_UnscaledMomentFunctor1D, METH_O, NULL},
	 { "UnscaledMomentFunctor1D_swigregister", UnscaledMomentFunctor1D_swigregister, METH_O, NULL},
	 { "UnscaledMomentFunctor1D_swiginit", UnscaledMomentFunctor1D_swiginit, METH_VARARGS, NULL},
	 { "new_UnscaledEntropyFunctor1D", _wrap_new_UnscaledEntropyFunctor1D, METH_O, NULL},
	 { "UnscaledEntropyFunctor1D___call__", _wrap_UnscaledEntropyFunctor1D___call__, METH_VARARGS, NULL},
	 { "delete_UnscaledEntropyFunctor1D", _wrap_delete_UnscaledEntropyFunctor1D, METH_O, NULL},
	 { "UnscaledEntropyFunctor1D_swigregister", UnscaledEntropyFunctor1D_swigregister, METH_O, NULL},
	 { "UnscaledEntropyFunctor1D_swiginit", UnscaledEntropyFunctor1D_swiginit, METH_VARARGS, NULL},
	 { "new_NumericalConvolution", _wrap_new_NumericalConvolution, METH_VARARGS, NULL},
	 { "NumericalConvolution___call__", _wrap_NumericalConvolution___call__, METH_VARARGS, NULL},
	 { "delete_NumericalConvolution", _wrap_delete_NumericalConvolution, METH_O, NULL},
	 { "NumericalConvolution_swigregister", NumericalConvolution_swigregister, METH_O, NULL},
	 { "NumericalConvolution_swiginit", NumericalConvolution_swiginit, METH_VARARGS, NULL},
	 { "new_GaussianConvolution", _wrap_new_GaussianConvolution, METH_VARARGS, NULL},
	 { "GaussianConvolution___call__", _wrap_GaussianConvolution___call__, METH_VARARGS, NULL},
	 { "delete_GaussianConvolution", _wrap_delete_GaussianConvolution, METH_O, NULL},
	 { "GaussianConvolution_swigregister", GaussianConvolution_swigregister, METH_O, NULL},
	 { "GaussianConvolution_swiginit", GaussianConvolution_swiginit, METH_VARARGS, NULL},
	 { "new_FunctorTimesShiftedXHelperNConv", _wrap_new_FunctorTimesShiftedXHelperNConv, METH_VARARGS, NULL},
	 { "FunctorTimesShiftedXHelperNConv___call__", _wrap_FunctorTimesShiftedXHelperNConv___call__, METH_VARARGS, NULL},
	 { "delete_FunctorTimesShiftedXHelperNConv", _wrap_delete_FunctorTimesShiftedXHelperNConv, METH_O, NULL},
	 { "FunctorTimesShiftedXHelperNConv_swigregister", FunctorTimesShiftedXHelperNConv_swigregister, METH_O, NULL},
	 { "FunctorTimesShiftedXHelperNConv_swiginit", FunctorTimesShiftedXHelperNConv_swiginit, METH_VARARGS, NULL},
	 { "new_FunctorTimesShiftedXHelperGConv", _wrap_new_FunctorTimesShiftedXHelperGConv, METH_VARARGS, NULL},
	 { "FunctorTimesShiftedXHelperGConv___call__", _wrap_FunctorTimesShiftedXHelperGConv___call__, METH_VARARGS, NULL},
	 { "delete_FunctorTimesShiftedXHelperGConv", _wrap_delete_FunctorTimesShiftedXHelperGConv, METH_O, NULL},
	 { "FunctorTimesShiftedXHelperGConv_swigregister", FunctorTimesShiftedXHelperGConv_swigregister, METH_O, NULL},
	 { "FunctorTimesShiftedXHelperGConv_swiginit", FunctorTimesShiftedXHelperGConv_swiginit, METH_VARARGS, NULL},
	 { "FunctorTimesShiftedX", _wrap_FunctorTimesShiftedX, METH_VARARGS, NULL},
	 { "new_FunctorTimesShiftedXRatioHelperNConv", _wrap_new_FunctorTimesShiftedXRatioHelperNConv, METH_VARARGS, NULL},
	 { "FunctorTimesShiftedXRatioHelperNConv___call__", _wrap_FunctorTimesShiftedXRatioHelperNConv___call__, METH_VARARGS, NULL},
	 { "delete_FunctorTimesShiftedXRatioHelperNConv", _wrap_delete_FunctorTimesShiftedXRatioHelperNConv, METH_O, NULL},
	 { "FunctorTimesShiftedXRatioHelperNConv_swigregister", FunctorTimesShiftedXRatioHelperNConv_swigregister, METH_O, NULL},
	 { "FunctorTimesShiftedXRatioHelperNConv_swiginit", FunctorTimesShiftedXRatioHelperNConv_swiginit, METH_VARARGS, NULL},
	 { "new_FunctorTimesShiftedXRatioHelperGConv", _wrap_new_FunctorTimesShiftedXRatioHelperGConv, METH_VARARGS, NULL},
	 { "FunctorTimesShiftedXRatioHelperGConv___call__", _wrap_FunctorTimesShiftedXRatioHelperGConv___call__, METH_VARARGS, NULL},
	 { "delete_FunctorTimesShiftedXRatioHelperGConv", _wrap_delete_FunctorTimesShiftedXRatioHelperGConv, METH_O, NULL},
	 { "FunctorTimesShiftedXRatioHelperGConv_swigregister", FunctorTimesShiftedXRatioHelperGConv_swigregister, METH_O, NULL},
	 { "FunctorTimesShiftedXRatioHelperGConv_swiginit", FunctorTimesShiftedXRatioHelperGConv_swiginit, METH_VARARGS, NULL},
	 { "FunctorTimesShiftedXRatio", _wrap_FunctorTimesShiftedXRatio, METH_VARARGS, NULL},
	 { "new_GaussHermiteQuadrature", _wrap_new_GaussHermiteQuadrature, METH_O, NULL},
	 { "GaussHermiteQuadrature_npoints", _wrap_GaussHermiteQuadrature_npoints, METH_O, NULL},
	 { "GaussHermiteQuadrature_isAllowed", _wrap_GaussHermiteQuadrature_isAllowed, METH_O, NULL},
	 { "GaussHermiteQuadrature_allowedNPonts", _wrap_GaussHermiteQuadrature_allowedNPonts, METH_NOARGS, NULL},
	 { "GaussHermiteQuadrature_minimalExactRule", _wrap_GaussHermiteQuadrature_minimalExactRule, METH_O, NULL},
	 { "GaussHermiteQuadrature_integrateProb", _wrap_GaussHermiteQuadrature_integrateProb, METH_VARARGS, NULL},
	 { "GaussHermiteQuadrature_integrate", _wrap_GaussHermiteQuadrature_integrate, METH_VARARGS, NULL},
	 { "delete_GaussHermiteQuadrature", _wrap_delete_GaussHermiteQuadrature, METH_O, NULL},
	 { "GaussHermiteQuadrature_swigregister", GaussHermiteQuadrature_swigregister, METH_O, NULL},
	 { "GaussHermiteQuadrature_swiginit", GaussHermiteQuadrature_swiginit, METH_VARARGS, NULL},
	 { "factorial", _wrap_factorial, METH_O, NULL},
	 { "ldfactorial", _wrap_ldfactorial, METH_O, NULL},
	 { "logfactorial", _wrap_logfactorial, METH_O, NULL},
	 { "solveQuadratic", _wrap_solveQuadratic, METH_VARARGS, NULL},
	 { "solveCubic", _wrap_solveCubic, METH_VARARGS, NULL},
	 { "cubicMinimum01", _wrap_cubicMinimum01, METH_VARARGS, NULL},
	 { "cubicMaximum01", _wrap_cubicMaximum01, METH_VARARGS, NULL},
	 { "hermiteSeriesRoots", _wrap_hermiteSeriesRoots, METH_VARARGS, NULL},
	 { "linearValue", _wrap_linearValue, METH_VARARGS, NULL},
	 { "new_Gaussian", _wrap_new_Gaussian, METH_VARARGS, NULL},
	 { "Gaussian_clone", _wrap_Gaussian_clone, METH_O, NULL},
	 { "delete_Gaussian", _wrap_delete_Gaussian, METH_O, NULL},
	 { "Gaussian_classname", _wrap_Gaussian_classname, METH_O, NULL},
	 { "Gaussian_qWidth", _wrap_Gaussian_qWidth, METH_O, NULL},
	 { "Gaussian_qAsymmetry", _wrap_Gaussian_qAsymmetry, METH_O, NULL},
	 { "Gaussian_entropy", _wrap_Gaussian_entropy, METH_O, NULL},
	 { "Gaussian_fromQuantiles", _wrap_Gaussian_fromQuantiles, METH_VARARGS, NULL},
	 { "Gaussian_swigregister", Gaussian_swigregister, METH_O, NULL},
	 { "Gaussian_swiginit", Gaussian_swiginit, METH_VARARGS, NULL},
	 { "new_SymbetaDoubleIntegral", _wrap_new_SymbetaDoubleIntegral, METH_VARARGS, NULL},
	 { "SymbetaDoubleIntegral_p", _wrap_SymbetaDoubleIntegral_p, METH_O, NULL},
	 { "SymbetaDoubleIntegral_h", _wrap_SymbetaDoubleIntegral_h, METH_O, NULL},
	 { "SymbetaDoubleIntegral_a", _wrap_SymbetaDoubleIntegral_a, METH_O, NULL},
	 { "SymbetaDoubleIntegral_k", _wrap_SymbetaDoubleIntegral_k, METH_O, NULL},
	 { "SymbetaDoubleIntegral_hasExtremum", _wrap_SymbetaDoubleIntegral_hasExtremum, METH_O, NULL},
	 { "SymbetaDoubleIntegral_isFlat", _wrap_SymbetaDoubleIntegral_isFlat, METH_O, NULL},
	 { "SymbetaDoubleIntegral_extremum", _wrap_SymbetaDoubleIntegral_extremum, METH_O, NULL},
	 { "SymbetaDoubleIntegral___call__", _wrap_SymbetaDoubleIntegral___call__, METH_VARARGS, NULL},
	 { "SymbetaDoubleIntegral_derivative", _wrap_SymbetaDoubleIntegral_derivative, METH_VARARGS, NULL},
	 { "SymbetaDoubleIntegral_secondDerivative", _wrap_SymbetaDoubleIntegral_secondDerivative, METH_VARARGS, NULL},
	 { "SymbetaDoubleIntegral_zoneContinuation", _wrap_SymbetaDoubleIntegral_zoneContinuation, METH_VARARGS, NULL},
	 { "SymbetaDoubleIntegral_inverse", _wrap_SymbetaDoubleIntegral_inverse, METH_VARARGS, NULL},
	 { "SymbetaDoubleIntegral_fromSigmas", _wrap_SymbetaDoubleIntegral_fromSigmas, METH_VARARGS, NULL},
	 { "SymbetaDoubleIntegral_minRNoExtremum", _wrap_SymbetaDoubleIntegral_minRNoExtremum, METH_VARARGS, NULL},
	 { "delete_SymbetaDoubleIntegral", _wrap_delete_SymbetaDoubleIntegral, METH_O, NULL},
	 { "SymbetaDoubleIntegral_swigregister", SymbetaDoubleIntegral_swigregister, METH_O, NULL},
	 { "SymbetaDoubleIntegral_swiginit", SymbetaDoubleIntegral_swiginit, METH_VARARGS, NULL},
	 { "new_SDIZoneFunctor", _wrap_new_SDIZoneFunctor, METH_VARARGS, NULL},
	 { "SDIZoneFunctor___call__", _wrap_SDIZoneFunctor___call__, METH_VARARGS, NULL},
	 { "delete_SDIZoneFunctor", _wrap_delete_SDIZoneFunctor, METH_O, NULL},
	 { "SDIZoneFunctor_swigregister", SDIZoneFunctor_swigregister, METH_O, NULL},
	 { "SDIZoneFunctor_swiginit", SDIZoneFunctor_swiginit, METH_VARARGS, NULL},
	 { "new_LDSymbetaDoubleIntegral", _wrap_new_LDSymbetaDoubleIntegral, METH_VARARGS, NULL},
	 { "LDSymbetaDoubleIntegral_p", _wrap_LDSymbetaDoubleIntegral_p, METH_O, NULL},
	 { "LDSymbetaDoubleIntegral_h", _wrap_LDSymbetaDoubleIntegral_h, METH_O, NULL},
	 { "LDSymbetaDoubleIntegral_a", _wrap_LDSymbetaDoubleIntegral_a, METH_O, NULL},
	 { "LDSymbetaDoubleIntegral_k", _wrap_LDSymbetaDoubleIntegral_k, METH_O, NULL},
	 { "LDSymbetaDoubleIntegral_hasExtremum", _wrap_LDSymbetaDoubleIntegral_hasExtremum, METH_O, NULL},
	 { "LDSymbetaDoubleIntegral_isFlat", _wrap_LDSymbetaDoubleIntegral_isFlat, METH_O, NULL},
	 { "LDSymbetaDoubleIntegral_extremum", _wrap_LDSymbetaDoubleIntegral_extremum, METH_O, NULL},
	 { "LDSymbetaDoubleIntegral___call__", _wrap_LDSymbetaDoubleIntegral___call__, METH_VARARGS, NULL},
	 { "LDSymbetaDoubleIntegral_derivative", _wrap_LDSymbetaDoubleIntegral_derivative, METH_VARARGS, NULL},
	 { "LDSymbetaDoubleIntegral_secondDerivative", _wrap_LDSymbetaDoubleIntegral_secondDerivative, METH_VARARGS, NULL},
	 { "LDSymbetaDoubleIntegral_zoneContinuation", _wrap_LDSymbetaDoubleIntegral_zoneContinuation, METH_VARARGS, NULL},
	 { "LDSymbetaDoubleIntegral_inverse", _wrap_LDSymbetaDoubleIntegral_inverse, METH_VARARGS, NULL},
	 { "LDSymbetaDoubleIntegral_fromSigmas", _wrap_LDSymbetaDoubleIntegral_fromSigmas, METH_VARARGS, NULL},
	 { "LDSymbetaDoubleIntegral_minRNoExtremum", _wrap_LDSymbetaDoubleIntegral_minRNoExtremum, METH_VARARGS, NULL},
	 { "delete_LDSymbetaDoubleIntegral", _wrap_delete_LDSymbetaDoubleIntegral, METH_O, NULL},
	 { "LDSymbetaDoubleIntegral_swigregister", LDSymbetaDoubleIntegral_swigregister, METH_O, NULL},
	 { "LDSymbetaDoubleIntegral_swiginit", LDSymbetaDoubleIntegral_swiginit, METH_VARARGS, NULL},
	 { "new_LDSDIZoneFunctor", _wrap_new_LDSDIZoneFunctor, METH_VARARGS, NULL},
	 { "LDSDIZoneFunctor___call__", _wrap_LDSDIZoneFunctor___call__, METH_VARARGS, NULL},
	 { "delete_LDSDIZoneFunctor", _wrap_delete_LDSDIZoneFunctor, METH_O, NULL},
	 { "LDSDIZoneFunctor_swigregister", LDSDIZoneFunctor_swigregister, METH_O, NULL},
	 { "LDSDIZoneFunctor_swiginit", LDSDIZoneFunctor_swiginit, METH_VARARGS, NULL},
	 { "new_ParabolicRailwayCurve", _wrap_new_ParabolicRailwayCurve, METH_VARARGS, NULL},
	 { "ParabolicRailwayCurve_hleft", _wrap_ParabolicRailwayCurve_hleft, METH_O, NULL},
	 { "ParabolicRailwayCurve_hright", _wrap_ParabolicRailwayCurve_hright, METH_O, NULL},
	 { "ParabolicRailwayCurve_sigmaPlus", _wrap_ParabolicRailwayCurve_sigmaPlus, METH_O, NULL},
	 { "ParabolicRailwayCurve_sigmaMinus", _wrap_ParabolicRailwayCurve_sigmaMinus, METH_O, NULL},
	 { "ParabolicRailwayCurve_hasExtremum", _wrap_ParabolicRailwayCurve_hasExtremum, METH_O, NULL},
	 { "ParabolicRailwayCurve_isFlat", _wrap_ParabolicRailwayCurve_isFlat, METH_O, NULL},
	 { "ParabolicRailwayCurve_extremum", _wrap_ParabolicRailwayCurve_extremum, METH_O, NULL},
	 { "ParabolicRailwayCurve___call__", _wrap_ParabolicRailwayCurve___call__, METH_VARARGS, NULL},
	 { "ParabolicRailwayCurve_derivative", _wrap_ParabolicRailwayCurve_derivative, METH_VARARGS, NULL},
	 { "ParabolicRailwayCurve_secondDerivative", _wrap_ParabolicRailwayCurve_secondDerivative, METH_VARARGS, NULL},
	 { "ParabolicRailwayCurve_zoneContinuation", _wrap_ParabolicRailwayCurve_zoneContinuation, METH_VARARGS, NULL},
	 { "ParabolicRailwayCurve_inverse", _wrap_ParabolicRailwayCurve_inverse, METH_VARARGS, NULL},
	 { "delete_ParabolicRailwayCurve", _wrap_delete_ParabolicRailwayCurve, METH_O, NULL},
	 { "ParabolicRailwayCurve_swigregister", ParabolicRailwayCurve_swigregister, METH_O, NULL},
	 { "ParabolicRailwayCurve_swiginit", ParabolicRailwayCurve_swiginit, METH_VARARGS, NULL},
	 { "new_RailwayZoneFunctor", _wrap_new_RailwayZoneFunctor, METH_VARARGS, NULL},
	 { "RailwayZoneFunctor___call__", _wrap_RailwayZoneFunctor___call__, METH_VARARGS, NULL},
	 { "delete_RailwayZoneFunctor", _wrap_delete_RailwayZoneFunctor, METH_O, NULL},
	 { "RailwayZoneFunctor_swigregister", RailwayZoneFunctor_swigregister, METH_O, NULL},
	 { "RailwayZoneFunctor_swiginit", RailwayZoneFunctor_swiginit, METH_VARARGS, NULL},
	 { "new_LDParabolicRailwayCurve", _wrap_new_LDParabolicRailwayCurve, METH_VARARGS, NULL},
	 { "LDParabolicRailwayCurve_hleft", _wrap_LDParabolicRailwayCurve_hleft, METH_O, NULL},
	 { "LDParabolicRailwayCurve_hright", _wrap_LDParabolicRailwayCurve_hright, METH_O, NULL},
	 { "LDParabolicRailwayCurve_sigmaPlus", _wrap_LDParabolicRailwayCurve_sigmaPlus, METH_O, NULL},
	 { "LDParabolicRailwayCurve_sigmaMinus", _wrap_LDParabolicRailwayCurve_sigmaMinus, METH_O, NULL},
	 { "LDParabolicRailwayCurve_hasExtremum", _wrap_LDParabolicRailwayCurve_hasExtremum, METH_O, NULL},
	 { "LDParabolicRailwayCurve_isFlat", _wrap_LDParabolicRailwayCurve_isFlat, METH_O, NULL},
	 { "LDParabolicRailwayCurve_extremum", _wrap_LDParabolicRailwayCurve_extremum, METH_O, NULL},
	 { "LDParabolicRailwayCurve___call__", _wrap_LDParabolicRailwayCurve___call__, METH_VARARGS, NULL},
	 { "LDParabolicRailwayCurve_derivative", _wrap_LDParabolicRailwayCurve_derivative, METH_VARARGS, NULL},
	 { "LDParabolicRailwayCurve_secondDerivative", _wrap_LDParabolicRailwayCurve_secondDerivative, METH_VARARGS, NULL},
	 { "LDParabolicRailwayCurve_zoneContinuation", _wrap_LDParabolicRailwayCurve_zoneContinuation, METH_VARARGS, NULL},
	 { "LDParabolicRailwayCurve_inverse", _wrap_LDParabolicRailwayCurve_inverse, METH_VARARGS, NULL},
	 { "delete_LDParabolicRailwayCurve", _wrap_delete_LDParabolicRailwayCurve, METH_O, NULL},
	 { "LDParabolicRailwayCurve_swigregister", LDParabolicRailwayCurve_swigregister, METH_O, NULL},
	 { "LDParabolicRailwayCurve_swiginit", LDParabolicRailwayCurve_swiginit, METH_VARARGS, NULL},
	 { "new_LDRailwayZoneFunctor", _wrap_new_LDRailwayZoneFunctor, METH_VARARGS, NULL},
	 { "LDRailwayZoneFunctor___call__", _wrap_LDRailwayZoneFunctor___call__, METH_VARARGS, NULL},
	 { "delete_LDRailwayZoneFunctor", _wrap_delete_LDRailwayZoneFunctor, METH_O, NULL},
	 { "LDRailwayZoneFunctor_swigregister", LDRailwayZoneFunctor_swigregister, METH_O, NULL},
	 { "LDRailwayZoneFunctor_swiginit", LDRailwayZoneFunctor_swiginit, METH_VARARGS, NULL},
	 { "new_SmoothDoubleCubic", _wrap_new_SmoothDoubleCubic, METH_VARARGS, NULL},
	 { "SmoothDoubleCubic_sigmaPlus", _wrap_SmoothDoubleCubic_sigmaPlus, METH_O, NULL},
	 { "SmoothDoubleCubic_sigmaMinus", _wrap_SmoothDoubleCubic_sigmaMinus, METH_O, NULL},
	 { "SmoothDoubleCubic_hasExtremum", _wrap_SmoothDoubleCubic_hasExtremum, METH_O, NULL},
	 { "SmoothDoubleCubic_isFlat", _wrap_SmoothDoubleCubic_isFlat, METH_O, NULL},
	 { "SmoothDoubleCubic_extremum", _wrap_SmoothDoubleCubic_extremum, METH_O, NULL},
	 { "SmoothDoubleCubic___call__", _wrap_SmoothDoubleCubic___call__, METH_VARARGS, NULL},
	 { "SmoothDoubleCubic_derivative", _wrap_SmoothDoubleCubic_derivative, METH_VARARGS, NULL},
	 { "SmoothDoubleCubic_secondDerivative", _wrap_SmoothDoubleCubic_secondDerivative, METH_VARARGS, NULL},
	 { "SmoothDoubleCubic_zoneContinuation", _wrap_SmoothDoubleCubic_zoneContinuation, METH_VARARGS, NULL},
	 { "SmoothDoubleCubic_inverse", _wrap_SmoothDoubleCubic_inverse, METH_VARARGS, NULL},
	 { "delete_SmoothDoubleCubic", _wrap_delete_SmoothDoubleCubic, METH_O, NULL},
	 { "SmoothDoubleCubic_swigregister", SmoothDoubleCubic_swigregister, METH_O, NULL},
	 { "SmoothDoubleCubic_swiginit", SmoothDoubleCubic_swiginit, METH_VARARGS, NULL},
	 { "new_SDCZoneFunctor", _wrap_new_SDCZoneFunctor, METH_VARARGS, NULL},
	 { "SDCZoneFunctor___call__", _wrap_SDCZoneFunctor___call__, METH_VARARGS, NULL},
	 { "delete_SDCZoneFunctor", _wrap_delete_SDCZoneFunctor, METH_O, NULL},
	 { "SDCZoneFunctor_swigregister", SDCZoneFunctor_swigregister, METH_O, NULL},
	 { "SDCZoneFunctor_swiginit", SDCZoneFunctor_swiginit, METH_VARARGS, NULL},
	 { "new_LDSmoothDoubleCubic", _wrap_new_LDSmoothDoubleCubic, METH_VARARGS, NULL},
	 { "LDSmoothDoubleCubic_sigmaPlus", _wrap_LDSmoothDoubleCubic_sigmaPlus, METH_O, NULL},
	 { "LDSmoothDoubleCubic_sigmaMinus", _wrap_LDSmoothDoubleCubic_sigmaMinus, METH_O, NULL},
	 { "LDSmoothDoubleCubic_hasExtremum", _wrap_LDSmoothDoubleCubic_hasExtremum, METH_O, NULL},
	 { "LDSmoothDoubleCubic_isFlat", _wrap_LDSmoothDoubleCubic_isFlat, METH_O, NULL},
	 { "LDSmoothDoubleCubic_extremum", _wrap_LDSmoothDoubleCubic_extremum, METH_O, NULL},
	 { "LDSmoothDoubleCubic___call__", _wrap_LDSmoothDoubleCubic___call__, METH_VARARGS, NULL},
	 { "LDSmoothDoubleCubic_derivative", _wrap_LDSmoothDoubleCubic_derivative, METH_VARARGS, NULL},
	 { "LDSmoothDoubleCubic_secondDerivative", _wrap_LDSmoothDoubleCubic_secondDerivative, METH_VARARGS, NULL},
	 { "LDSmoothDoubleCubic_zoneContinuation", _wrap_LDSmoothDoubleCubic_zoneContinuation, METH_VARARGS, NULL},
	 { "LDSmoothDoubleCubic_inverse", _wrap_LDSmoothDoubleCubic_inverse, METH_VARARGS, NULL},
	 { "delete_LDSmoothDoubleCubic", _wrap_delete_LDSmoothDoubleCubic, METH_O, NULL},
	 { "LDSmoothDoubleCubic_swigregister", LDSmoothDoubleCubic_swigregister, METH_O, NULL},
	 { "LDSmoothDoubleCubic_swiginit", LDSmoothDoubleCubic_swiginit, METH_VARARGS, NULL},
	 { "new_LDSDCZoneFunctor", _wrap_new_LDSDCZoneFunctor, METH_VARARGS, NULL},
	 { "LDSDCZoneFunctor___call__", _wrap_LDSDCZoneFunctor___call__, METH_VARARGS, NULL},
	 { "delete_LDSDCZoneFunctor", _wrap_delete_LDSDCZoneFunctor, METH_O, NULL},
	 { "LDSDCZoneFunctor_swigregister", LDSDCZoneFunctor_swigregister, METH_O, NULL},
	 { "LDSDCZoneFunctor_swiginit", LDSDCZoneFunctor_swiginit, METH_VARARGS, NULL},
	 { "delete_OPATGaussian0", _wrap_delete_OPATGaussian0, METH_O, NULL},
	 { "OPATGaussian0_sigmaPlus", _wrap_OPATGaussian0_sigmaPlus, METH_O, NULL},
	 { "OPATGaussian0_sigmaMinus", _wrap_OPATGaussian0_sigmaMinus, METH_O, NULL},
	 { "OPATGaussian0_setScale", _wrap_OPATGaussian0_setScale, METH_VARARGS, NULL},
	 { "OPATGaussian0_isUnimodal", _wrap_OPATGaussian0_isUnimodal, METH_O, NULL},
	 { "OPATGaussian0_swigregister", OPATGaussian0_swigregister, METH_O, NULL},
	 { "delete_OPATGaussian1", _wrap_delete_OPATGaussian1, METH_O, NULL},
	 { "OPATGaussian1_sigmaPlus", _wrap_OPATGaussian1_sigmaPlus, METH_O, NULL},
	 { "OPATGaussian1_sigmaMinus", _wrap_OPATGaussian1_sigmaMinus, METH_O, NULL},
	 { "OPATGaussian1_setScale", _wrap_OPATGaussian1_setScale, METH_VARARGS, NULL},
	 { "OPATGaussian1_isUnimodal", _wrap_OPATGaussian1_isUnimodal, METH_O, NULL},
	 { "OPATGaussian1_swigregister", OPATGaussian1_swigregister, METH_O, NULL},
	 { "delete_OPATGaussian2", _wrap_delete_OPATGaussian2, METH_O, NULL},
	 { "OPATGaussian2_sigmaPlus", _wrap_OPATGaussian2_sigmaPlus, METH_O, NULL},
	 { "OPATGaussian2_sigmaMinus", _wrap_OPATGaussian2_sigmaMinus, METH_O, NULL},
	 { "OPATGaussian2_setScale", _wrap_OPATGaussian2_setScale, METH_VARARGS, NULL},
	 { "OPATGaussian2_isUnimodal", _wrap_OPATGaussian2_isUnimodal, METH_O, NULL},
	 { "OPATGaussian2_swigregister", OPATGaussian2_swigregister, METH_O, NULL},
	 { "new_DimidiatedGaussian", _wrap_new_DimidiatedGaussian, METH_VARARGS, NULL},
	 { "DimidiatedGaussian_clone", _wrap_DimidiatedGaussian_clone, METH_O, NULL},
	 { "delete_DimidiatedGaussian", _wrap_delete_DimidiatedGaussian, METH_O, NULL},
	 { "DimidiatedGaussian_sigmaPlus", _wrap_DimidiatedGaussian_sigmaPlus, METH_O, NULL},
	 { "DimidiatedGaussian_sigmaMinus", _wrap_DimidiatedGaussian_sigmaMinus, METH_O, NULL},
	 { "DimidiatedGaussian_asymmetry", _wrap_DimidiatedGaussian_asymmetry, METH_O, NULL},
	 { "DimidiatedGaussian_isDensityContinuous", _wrap_DimidiatedGaussian_isDensityContinuous, METH_O, NULL},
	 { "DimidiatedGaussian_setScale", _wrap_DimidiatedGaussian_setScale, METH_VARARGS, NULL},
	 { "DimidiatedGaussian_classname", _wrap_DimidiatedGaussian_classname, METH_O, NULL},
	 { "DimidiatedGaussian_fromQuantiles", _wrap_DimidiatedGaussian_fromQuantiles, METH_VARARGS, NULL},
	 { "DimidiatedGaussian_swigregister", DimidiatedGaussian_swigregister, METH_O, NULL},
	 { "DimidiatedGaussian_swiginit", DimidiatedGaussian_swiginit, METH_VARARGS, NULL},
	 { "new_DistortedGaussian", _wrap_new_DistortedGaussian, METH_VARARGS, NULL},
	 { "DistortedGaussian_clone", _wrap_DistortedGaussian_clone, METH_O, NULL},
	 { "delete_DistortedGaussian", _wrap_delete_DistortedGaussian, METH_O, NULL},
	 { "DistortedGaussian_sigmaPlus", _wrap_DistortedGaussian_sigmaPlus, METH_O, NULL},
	 { "DistortedGaussian_sigmaMinus", _wrap_DistortedGaussian_sigmaMinus, METH_O, NULL},
	 { "DistortedGaussian_isUnimodal", _wrap_DistortedGaussian_isUnimodal, METH_O, NULL},
	 { "DistortedGaussian_setScale", _wrap_DistortedGaussian_setScale, METH_VARARGS, NULL},
	 { "DistortedGaussian_classname", _wrap_DistortedGaussian_classname, METH_O, NULL},
	 { "DistortedGaussian_fromQuantiles", _wrap_DistortedGaussian_fromQuantiles, METH_VARARGS, NULL},
	 { "DistortedGaussian_swigregister", DistortedGaussian_swigregister, METH_O, NULL},
	 { "DistortedGaussian_swiginit", DistortedGaussian_swiginit, METH_VARARGS, NULL},
	 { "new_RailwayGaussian", _wrap_new_RailwayGaussian, METH_VARARGS, NULL},
	 { "RailwayGaussian_clone", _wrap_RailwayGaussian_clone, METH_O, NULL},
	 { "delete_RailwayGaussian", _wrap_delete_RailwayGaussian, METH_O, NULL},
	 { "RailwayGaussian_hleft", _wrap_RailwayGaussian_hleft, METH_O, NULL},
	 { "RailwayGaussian_hright", _wrap_RailwayGaussian_hright, METH_O, NULL},
	 { "RailwayGaussian_classname", _wrap_RailwayGaussian_classname, METH_O, NULL},
	 { "RailwayGaussian_transitionRegionChoice", _wrap_RailwayGaussian_transitionRegionChoice, METH_VARARGS, NULL},
	 { "RailwayGaussian_fromQuantiles", _wrap_RailwayGaussian_fromQuantiles, METH_VARARGS, NULL},
	 { "RailwayGaussian_fromModeAndDeltas", _wrap_RailwayGaussian_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "RailwayGaussian_swigregister", RailwayGaussian_swigregister, METH_O, NULL},
	 { "RailwayGaussian_swiginit", RailwayGaussian_swiginit, METH_VARARGS, NULL},
	 { "new_DoubleCubicGaussian", _wrap_new_DoubleCubicGaussian, METH_VARARGS, NULL},
	 { "DoubleCubicGaussian_clone", _wrap_DoubleCubicGaussian_clone, METH_O, NULL},
	 { "delete_DoubleCubicGaussian", _wrap_delete_DoubleCubicGaussian, METH_O, NULL},
	 { "DoubleCubicGaussian_classname", _wrap_DoubleCubicGaussian_classname, METH_O, NULL},
	 { "DoubleCubicGaussian_fromQuantiles", _wrap_DoubleCubicGaussian_fromQuantiles, METH_VARARGS, NULL},
	 { "DoubleCubicGaussian_fromModeAndDeltas", _wrap_DoubleCubicGaussian_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "DoubleCubicGaussian_swigregister", DoubleCubicGaussian_swigregister, METH_O, NULL},
	 { "DoubleCubicGaussian_swiginit", DoubleCubicGaussian_swiginit, METH_VARARGS, NULL},
	 { "new_SkewNormal", _wrap_new_SkewNormal, METH_VARARGS, NULL},
	 { "SkewNormal_clone", _wrap_SkewNormal_clone, METH_O, NULL},
	 { "delete_SkewNormal", _wrap_delete_SkewNormal, METH_O, NULL},
	 { "SkewNormal_shapeParameter", _wrap_SkewNormal_shapeParameter, METH_O, NULL},
	 { "SkewNormal_classname", _wrap_SkewNormal_classname, METH_O, NULL},
	 { "SkewNormal_fromQuantiles", _wrap_SkewNormal_fromQuantiles, METH_VARARGS, NULL},
	 { "SkewNormal_fromModeAndDeltas", _wrap_SkewNormal_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SkewNormal_swigregister", SkewNormal_swigregister, METH_O, NULL},
	 { "SkewNormal_swiginit", SkewNormal_swiginit, METH_VARARGS, NULL},
	 { "new_QVWGaussian", _wrap_new_QVWGaussian, METH_VARARGS, NULL},
	 { "QVWGaussian_clone", _wrap_QVWGaussian_clone, METH_O, NULL},
	 { "delete_QVWGaussian", _wrap_delete_QVWGaussian, METH_O, NULL},
	 { "QVWGaussian_asymmetryParameter", _wrap_QVWGaussian_asymmetryParameter, METH_O, NULL},
	 { "QVWGaussian_locationParameter", _wrap_QVWGaussian_locationParameter, METH_O, NULL},
	 { "QVWGaussian_scaleParameter", _wrap_QVWGaussian_scaleParameter, METH_O, NULL},
	 { "QVWGaussian_classname", _wrap_QVWGaussian_classname, METH_O, NULL},
	 { "QVWGaussian_fromQuantiles", _wrap_QVWGaussian_fromQuantiles, METH_VARARGS, NULL},
	 { "QVWGaussian_fromModeAndDeltas", _wrap_QVWGaussian_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "QVWGaussian_swigregister", QVWGaussian_swigregister, METH_O, NULL},
	 { "QVWGaussian_swiginit", QVWGaussian_swiginit, METH_VARARGS, NULL},
	 { "new_GammaDistribution", _wrap_new_GammaDistribution, METH_VARARGS, NULL},
	 { "GammaDistribution_clone", _wrap_GammaDistribution_clone, METH_O, NULL},
	 { "delete_GammaDistribution", _wrap_delete_GammaDistribution, METH_O, NULL},
	 { "GammaDistribution_shapeParameter", _wrap_GammaDistribution_shapeParameter, METH_O, NULL},
	 { "GammaDistribution_classname", _wrap_GammaDistribution_classname, METH_O, NULL},
	 { "GammaDistribution_swigregister", GammaDistribution_swigregister, METH_O, NULL},
	 { "GammaDistribution_swiginit", GammaDistribution_swiginit, METH_VARARGS, NULL},
	 { "new_LogNormal", _wrap_new_LogNormal, METH_VARARGS, NULL},
	 { "LogNormal_clone", _wrap_LogNormal_clone, METH_O, NULL},
	 { "delete_LogNormal", _wrap_delete_LogNormal, METH_O, NULL},
	 { "LogNormal_skewness", _wrap_LogNormal_skewness, METH_O, NULL},
	 { "LogNormal_kurtosis", _wrap_LogNormal_kurtosis, METH_O, NULL},
	 { "LogNormal_isGaussian", _wrap_LogNormal_isGaussian, METH_O, NULL},
	 { "LogNormal_entropy", _wrap_LogNormal_entropy, METH_O, NULL},
	 { "LogNormal_classname", _wrap_LogNormal_classname, METH_O, NULL},
	 { "LogNormal_fromQuantiles", _wrap_LogNormal_fromQuantiles, METH_VARARGS, NULL},
	 { "LogNormal_fromModeAndDeltas", _wrap_LogNormal_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "LogNormal_swigregister", LogNormal_swigregister, METH_O, NULL},
	 { "LogNormal_swiginit", LogNormal_swiginit, METH_VARARGS, NULL},
	 { "new_JohnsonSu", _wrap_new_JohnsonSu, METH_VARARGS, NULL},
	 { "JohnsonSu_clone", _wrap_JohnsonSu_clone, METH_O, NULL},
	 { "delete_JohnsonSu", _wrap_delete_JohnsonSu, METH_O, NULL},
	 { "JohnsonSu_skewness", _wrap_JohnsonSu_skewness, METH_O, NULL},
	 { "JohnsonSu_kurtosis", _wrap_JohnsonSu_kurtosis, METH_O, NULL},
	 { "JohnsonSu_isValid", _wrap_JohnsonSu_isValid, METH_O, NULL},
	 { "JohnsonSu_getDelta", _wrap_JohnsonSu_getDelta, METH_O, NULL},
	 { "JohnsonSu_getLambda", _wrap_JohnsonSu_getLambda, METH_O, NULL},
	 { "JohnsonSu_getGamma", _wrap_JohnsonSu_getGamma, METH_O, NULL},
	 { "JohnsonSu_getXi", _wrap_JohnsonSu_getXi, METH_O, NULL},
	 { "JohnsonSu_entropy", _wrap_JohnsonSu_entropy, METH_O, NULL},
	 { "JohnsonSu_classname", _wrap_JohnsonSu_classname, METH_O, NULL},
	 { "JohnsonSu_swigregister", JohnsonSu_swigregister, METH_O, NULL},
	 { "JohnsonSu_swiginit", JohnsonSu_swiginit, METH_VARARGS, NULL},
	 { "new_JohnsonSb", _wrap_new_JohnsonSb, METH_VARARGS, NULL},
	 { "JohnsonSb_clone", _wrap_JohnsonSb_clone, METH_O, NULL},
	 { "delete_JohnsonSb", _wrap_delete_JohnsonSb, METH_O, NULL},
	 { "JohnsonSb_skewness", _wrap_JohnsonSb_skewness, METH_O, NULL},
	 { "JohnsonSb_kurtosis", _wrap_JohnsonSb_kurtosis, METH_O, NULL},
	 { "JohnsonSb_isValid", _wrap_JohnsonSb_isValid, METH_O, NULL},
	 { "JohnsonSb_isUnimodal", _wrap_JohnsonSb_isUnimodal, METH_O, NULL},
	 { "JohnsonSb_getDelta", _wrap_JohnsonSb_getDelta, METH_O, NULL},
	 { "JohnsonSb_getLambda", _wrap_JohnsonSb_getLambda, METH_O, NULL},
	 { "JohnsonSb_getGamma", _wrap_JohnsonSb_getGamma, METH_O, NULL},
	 { "JohnsonSb_getXi", _wrap_JohnsonSb_getXi, METH_O, NULL},
	 { "JohnsonSb_entropy", _wrap_JohnsonSb_entropy, METH_O, NULL},
	 { "JohnsonSb_classname", _wrap_JohnsonSb_classname, METH_O, NULL},
	 { "JohnsonSb_fitParameters", _wrap_JohnsonSb_fitParameters, METH_VARARGS, NULL},
	 { "JohnsonSb_swigregister", JohnsonSb_swigregister, METH_O, NULL},
	 { "JohnsonSb_swiginit", JohnsonSb_swiginit, METH_VARARGS, NULL},
	 { "new_JohnsonSystem", _wrap_new_JohnsonSystem, METH_VARARGS, NULL},
	 { "delete_JohnsonSystem", _wrap_delete_JohnsonSystem, METH_O, NULL},
	 { "JohnsonSystem_clone", _wrap_JohnsonSystem_clone, METH_O, NULL},
	 { "JohnsonSystem_skewness", _wrap_JohnsonSystem_skewness, METH_O, NULL},
	 { "JohnsonSystem_kurtosis", _wrap_JohnsonSystem_kurtosis, METH_O, NULL},
	 { "JohnsonSystem_curveType", _wrap_JohnsonSystem_curveType, METH_O, NULL},
	 { "JohnsonSystem_entropy", _wrap_JohnsonSystem_entropy, METH_O, NULL},
	 { "JohnsonSystem_isUnimodal", _wrap_JohnsonSystem_isUnimodal, METH_O, NULL},
	 { "JohnsonSystem_isValid", _wrap_JohnsonSystem_isValid, METH_O, NULL},
	 { "JohnsonSystem_classname", _wrap_JohnsonSystem_classname, METH_O, NULL},
	 { "JohnsonSystem_subclass", _wrap_JohnsonSystem_subclass, METH_O, NULL},
	 { "JohnsonSystem_select", _wrap_JohnsonSystem_select, METH_VARARGS, NULL},
	 { "JohnsonSystem_slowMaxEntKurtosis", _wrap_JohnsonSystem_slowMaxEntKurtosis, METH_O, NULL},
	 { "JohnsonSystem_approxMaxEntKurtosis", _wrap_JohnsonSystem_approxMaxEntKurtosis, METH_O, NULL},
	 { "JohnsonSystem_fromQuantiles", _wrap_JohnsonSystem_fromQuantiles, METH_VARARGS, NULL},
	 { "JohnsonSystem_fromModeAndDeltas", _wrap_JohnsonSystem_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "JohnsonSystem_swigregister", JohnsonSystem_swigregister, METH_O, NULL},
	 { "JohnsonSystem_swiginit", JohnsonSystem_swiginit, METH_VARARGS, NULL},
	 { "new_EdgeworthExpansion3", _wrap_new_EdgeworthExpansion3, METH_VARARGS, NULL},
	 { "EdgeworthExpansion3_clone", _wrap_EdgeworthExpansion3_clone, METH_O, NULL},
	 { "delete_EdgeworthExpansion3", _wrap_delete_EdgeworthExpansion3, METH_O, NULL},
	 { "EdgeworthExpansion3_isNonNegative", _wrap_EdgeworthExpansion3_isNonNegative, METH_O, NULL},
	 { "EdgeworthExpansion3_skewness", _wrap_EdgeworthExpansion3_skewness, METH_O, NULL},
	 { "EdgeworthExpansion3_safeSigmaRange", _wrap_EdgeworthExpansion3_safeSigmaRange, METH_O, NULL},
	 { "EdgeworthExpansion3_classname", _wrap_EdgeworthExpansion3_classname, METH_O, NULL},
	 { "EdgeworthExpansion3_classSafeSigmaRange", _wrap_EdgeworthExpansion3_classSafeSigmaRange, METH_NOARGS, NULL},
	 { "EdgeworthExpansion3_setClassSafeSigmaRange", _wrap_EdgeworthExpansion3_setClassSafeSigmaRange, METH_O, NULL},
	 { "EdgeworthExpansion3_restoreDefaultSafeSigmaRange", _wrap_EdgeworthExpansion3_restoreDefaultSafeSigmaRange, METH_NOARGS, NULL},
	 { "EdgeworthExpansion3_largestSkewAllowed", _wrap_EdgeworthExpansion3_largestSkewAllowed, METH_O, NULL},
	 { "EdgeworthExpansion3_fromQuantiles", _wrap_EdgeworthExpansion3_fromQuantiles, METH_VARARGS, NULL},
	 { "EdgeworthExpansion3_swigregister", EdgeworthExpansion3_swigregister, METH_O, NULL},
	 { "EdgeworthExpansion3_swiginit", EdgeworthExpansion3_swiginit, METH_VARARGS, NULL},
	 { "new_FechnerDistribution", _wrap_new_FechnerDistribution, METH_VARARGS, NULL},
	 { "FechnerDistribution_clone", _wrap_FechnerDistribution_clone, METH_O, NULL},
	 { "delete_FechnerDistribution", _wrap_delete_FechnerDistribution, METH_O, NULL},
	 { "FechnerDistribution_sigmaPlus", _wrap_FechnerDistribution_sigmaPlus, METH_O, NULL},
	 { "FechnerDistribution_sigmaMinus", _wrap_FechnerDistribution_sigmaMinus, METH_O, NULL},
	 { "FechnerDistribution_classname", _wrap_FechnerDistribution_classname, METH_O, NULL},
	 { "FechnerDistribution_fromQuantiles", _wrap_FechnerDistribution_fromQuantiles, METH_VARARGS, NULL},
	 { "FechnerDistribution_fromModeAndDeltas", _wrap_FechnerDistribution_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "FechnerDistribution_swigregister", FechnerDistribution_swigregister, METH_O, NULL},
	 { "FechnerDistribution_swiginit", FechnerDistribution_swiginit, METH_VARARGS, NULL},
	 { "new_EmpiricalDistribution", _wrap_new_EmpiricalDistribution, METH_VARARGS, NULL},
	 { "EmpiricalDistribution_clone", _wrap_EmpiricalDistribution_clone, METH_O, NULL},
	 { "delete_EmpiricalDistribution", _wrap_delete_EmpiricalDistribution, METH_O, NULL},
	 { "EmpiricalDistribution_density", _wrap_EmpiricalDistribution_density, METH_VARARGS, NULL},
	 { "EmpiricalDistribution_densityDerivative", _wrap_EmpiricalDistribution_densityDerivative, METH_VARARGS, NULL},
	 { "EmpiricalDistribution_mode", _wrap_EmpiricalDistribution_mode, METH_O, NULL},
	 { "EmpiricalDistribution_descentDelta", _wrap_EmpiricalDistribution_descentDelta, METH_VARARGS, NULL},
	 { "EmpiricalDistribution_cdf", _wrap_EmpiricalDistribution_cdf, METH_VARARGS, NULL},
	 { "EmpiricalDistribution_exceedance", _wrap_EmpiricalDistribution_exceedance, METH_VARARGS, NULL},
	 { "EmpiricalDistribution_quantile", _wrap_EmpiricalDistribution_quantile, METH_VARARGS, NULL},
	 { "EmpiricalDistribution_invExceedance", _wrap_EmpiricalDistribution_invExceedance, METH_VARARGS, NULL},
	 { "EmpiricalDistribution_cumulant", _wrap_EmpiricalDistribution_cumulant, METH_VARARGS, NULL},
	 { "EmpiricalDistribution_classname", _wrap_EmpiricalDistribution_classname, METH_O, NULL},
	 { "EmpiricalDistribution_random", _wrap_EmpiricalDistribution_random, METH_VARARGS, NULL},
	 { "EmpiricalDistribution_sampleSize", _wrap_EmpiricalDistribution_sampleSize, METH_O, NULL},
	 { "EmpiricalDistribution_coordinate", _wrap_EmpiricalDistribution_coordinate, METH_VARARGS, NULL},
	 { "EmpiricalDistribution_minCoordinate", _wrap_EmpiricalDistribution_minCoordinate, METH_O, NULL},
	 { "EmpiricalDistribution_maxCoordinate", _wrap_EmpiricalDistribution_maxCoordinate, METH_O, NULL},
	 { "EmpiricalDistribution_swigregister", EmpiricalDistribution_swigregister, METH_O, NULL},
	 { "EmpiricalDistribution_swiginit", EmpiricalDistribution_swiginit, METH_VARARGS, NULL},
	 { "new_UniformDistribution", _wrap_new_UniformDistribution, METH_VARARGS, NULL},
	 { "UniformDistribution_clone", _wrap_UniformDistribution_clone, METH_O, NULL},
	 { "delete_UniformDistribution", _wrap_delete_UniformDistribution, METH_O, NULL},
	 { "UniformDistribution_isUnimodal", _wrap_UniformDistribution_isUnimodal, METH_O, NULL},
	 { "UniformDistribution_classname", _wrap_UniformDistribution_classname, METH_O, NULL},
	 { "UniformDistribution_swigregister", UniformDistribution_swigregister, METH_O, NULL},
	 { "UniformDistribution_swiginit", UniformDistribution_swiginit, METH_VARARGS, NULL},
	 { "new_ExponentialDistribution", _wrap_new_ExponentialDistribution, METH_VARARGS, NULL},
	 { "ExponentialDistribution_clone", _wrap_ExponentialDistribution_clone, METH_O, NULL},
	 { "delete_ExponentialDistribution", _wrap_delete_ExponentialDistribution, METH_O, NULL},
	 { "ExponentialDistribution_classname", _wrap_ExponentialDistribution_classname, METH_O, NULL},
	 { "ExponentialDistribution_swigregister", ExponentialDistribution_swigregister, METH_O, NULL},
	 { "ExponentialDistribution_swiginit", ExponentialDistribution_swiginit, METH_VARARGS, NULL},
	 { "inverseGaussCdf", _wrap_inverseGaussCdf, METH_O, NULL},
	 { "owensT", _wrap_owensT, METH_VARARGS, NULL},
	 { "Gamma", _wrap_Gamma, METH_O, NULL},
	 { "incompleteGamma", _wrap_incompleteGamma, METH_VARARGS, NULL},
	 { "inverseIncompleteGamma", _wrap_inverseIncompleteGamma, METH_VARARGS, NULL},
	 { "incompleteGammaC", _wrap_incompleteGammaC, METH_VARARGS, NULL},
	 { "inverseIncompleteGammaC", _wrap_inverseIncompleteGammaC, METH_VARARGS, NULL},
	 { "new_LegendreDistro1D", _wrap_new_LegendreDistro1D, METH_VARARGS, NULL},
	 { "LegendreDistro1D_clone", _wrap_LegendreDistro1D_clone, METH_O, NULL},
	 { "delete_LegendreDistro1D", _wrap_delete_LegendreDistro1D, METH_O, NULL},
	 { "LegendreDistro1D_nCoeffs", _wrap_LegendreDistro1D_nCoeffs, METH_O, NULL},
	 { "LegendreDistro1D_getCoeff", _wrap_LegendreDistro1D_getCoeff, METH_VARARGS, NULL},
	 { "LegendreDistro1D_isNonNegative", _wrap_LegendreDistro1D_isNonNegative, METH_O, NULL},
	 { "LegendreDistro1D_isUnimodal", _wrap_LegendreDistro1D_isUnimodal, METH_O, NULL},
	 { "LegendreDistro1D_classname", _wrap_LegendreDistro1D_classname, METH_O, NULL},
	 { "LegendreDistro1D_swigregister", LegendreDistro1D_swigregister, METH_O, NULL},
	 { "LegendreDistro1D_swiginit", LegendreDistro1D_swiginit, METH_VARARGS, NULL},
	 { "delete_AbsLogLikelihoodCurve", _wrap_delete_AbsLogLikelihoodCurve, METH_O, NULL},
	 { "AbsLogLikelihoodCurve_clone", _wrap_AbsLogLikelihoodCurve_clone, METH_O, NULL},
	 { "AbsLogLikelihoodCurve_parMin", _wrap_AbsLogLikelihoodCurve_parMin, METH_O, NULL},
	 { "AbsLogLikelihoodCurve_parMax", _wrap_AbsLogLikelihoodCurve_parMax, METH_O, NULL},
	 { "AbsLogLikelihoodCurve_location", _wrap_AbsLogLikelihoodCurve_location, METH_O, NULL},
	 { "AbsLogLikelihoodCurve_stepSize", _wrap_AbsLogLikelihoodCurve_stepSize, METH_O, NULL},
	 { "AbsLogLikelihoodCurve_maximum", _wrap_AbsLogLikelihoodCurve_maximum, METH_O, NULL},
	 { "AbsLogLikelihoodCurve_argmax", _wrap_AbsLogLikelihoodCurve_argmax, METH_O, NULL},
	 { "AbsLogLikelihoodCurve___call__", _wrap_AbsLogLikelihoodCurve___call__, METH_VARARGS, NULL},
	 { "AbsLogLikelihoodCurve_derivative", _wrap_AbsLogLikelihoodCurve_derivative, METH_VARARGS, NULL},
	 { "AbsLogLikelihoodCurve_secondDerivative", _wrap_AbsLogLikelihoodCurve_secondDerivative, METH_VARARGS, NULL},
	 { "AbsLogLikelihoodCurve_classname", _wrap_AbsLogLikelihoodCurve_classname, METH_O, NULL},
	 { "AbsLogLikelihoodCurve___imul__", _wrap_AbsLogLikelihoodCurve___imul__, METH_VARARGS, NULL},
	 { "AbsLogLikelihoodCurve___idiv__", _wrap_AbsLogLikelihoodCurve___idiv__, METH_VARARGS, NULL},
	 { "AbsLogLikelihoodCurve_sigmaPlus", _wrap_AbsLogLikelihoodCurve_sigmaPlus, METH_VARARGS, NULL},
	 { "AbsLogLikelihoodCurve_sigmaMinus", _wrap_AbsLogLikelihoodCurve_sigmaMinus, METH_VARARGS, NULL},
	 { "AbsLogLikelihoodCurve_findLocalMaximum", _wrap_AbsLogLikelihoodCurve_findLocalMaximum, METH_VARARGS, NULL},
	 { "AbsLogLikelihoodCurve_posteriorMean", _wrap_AbsLogLikelihoodCurve_posteriorMean, METH_O, NULL},
	 { "AbsLogLikelihoodCurve_posteriorVariance", _wrap_AbsLogLikelihoodCurve_posteriorVariance, METH_O, NULL},
	 { "AbsLogLikelihoodCurve___add__", _wrap_AbsLogLikelihoodCurve___add__, METH_VARARGS, NULL},
	 { "AbsLogLikelihoodCurve___sub__", _wrap_AbsLogLikelihoodCurve___sub__, METH_VARARGS, NULL},
	 { "AbsLogLikelihoodCurve___mul__", _wrap_AbsLogLikelihoodCurve___mul__, METH_VARARGS, NULL},
	 { "AbsLogLikelihoodCurve___rmul__", _wrap_AbsLogLikelihoodCurve___rmul__, METH_VARARGS, NULL},
	 { "AbsLogLikelihoodCurve___truediv__", _wrap_AbsLogLikelihoodCurve___truediv__, METH_VARARGS, NULL},
	 { "AbsLogLikelihoodCurve_swigregister", AbsLogLikelihoodCurve_swigregister, METH_O, NULL},
	 { "new_LogLikelihoodDerivative", _wrap_new_LogLikelihoodDerivative, METH_O, NULL},
	 { "LogLikelihoodDerivative___call__", _wrap_LogLikelihoodDerivative___call__, METH_VARARGS, NULL},
	 { "delete_LogLikelihoodDerivative", _wrap_delete_LogLikelihoodDerivative, METH_O, NULL},
	 { "LogLikelihoodDerivative_swigregister", LogLikelihoodDerivative_swigregister, METH_O, NULL},
	 { "LogLikelihoodDerivative_swiginit", LogLikelihoodDerivative_swiginit, METH_VARARGS, NULL},
	 { "new_LogLikelihoodSecondDerivative", _wrap_new_LogLikelihoodSecondDerivative, METH_VARARGS, NULL},
	 { "LogLikelihoodSecondDerivative___call__", _wrap_LogLikelihoodSecondDerivative___call__, METH_VARARGS, NULL},
	 { "delete_LogLikelihoodSecondDerivative", _wrap_delete_LogLikelihoodSecondDerivative, METH_O, NULL},
	 { "LogLikelihoodSecondDerivative_swigregister", LogLikelihoodSecondDerivative_swigregister, METH_O, NULL},
	 { "LogLikelihoodSecondDerivative_swiginit", LogLikelihoodSecondDerivative_swiginit, METH_VARARGS, NULL},
	 { "new_LikelihoodCurveCopy", _wrap_new_LikelihoodCurveCopy, METH_VARARGS, NULL},
	 { "LikelihoodCurveCopy_clone", _wrap_LikelihoodCurveCopy_clone, METH_O, NULL},
	 { "delete_LikelihoodCurveCopy", _wrap_delete_LikelihoodCurveCopy, METH_O, NULL},
	 { "LikelihoodCurveCopy_theCopy", _wrap_LikelihoodCurveCopy_theCopy, METH_O, NULL},
	 { "LikelihoodCurveCopy_parMin", _wrap_LikelihoodCurveCopy_parMin, METH_O, NULL},
	 { "LikelihoodCurveCopy_parMax", _wrap_LikelihoodCurveCopy_parMax, METH_O, NULL},
	 { "LikelihoodCurveCopy_location", _wrap_LikelihoodCurveCopy_location, METH_O, NULL},
	 { "LikelihoodCurveCopy_stepSize", _wrap_LikelihoodCurveCopy_stepSize, METH_O, NULL},
	 { "LikelihoodCurveCopy_maximum", _wrap_LikelihoodCurveCopy_maximum, METH_O, NULL},
	 { "LikelihoodCurveCopy_argmax", _wrap_LikelihoodCurveCopy_argmax, METH_O, NULL},
	 { "LikelihoodCurveCopy___call__", _wrap_LikelihoodCurveCopy___call__, METH_VARARGS, NULL},
	 { "LikelihoodCurveCopy_derivative", _wrap_LikelihoodCurveCopy_derivative, METH_VARARGS, NULL},
	 { "LikelihoodCurveCopy_secondDerivative", _wrap_LikelihoodCurveCopy_secondDerivative, METH_VARARGS, NULL},
	 { "LikelihoodCurveCopy_classname", _wrap_LikelihoodCurveCopy_classname, METH_O, NULL},
	 { "LikelihoodCurveCopy___imul__", _wrap_LikelihoodCurveCopy___imul__, METH_VARARGS, NULL},
	 { "LikelihoodCurveCopy___idiv__", _wrap_LikelihoodCurveCopy___idiv__, METH_VARARGS, NULL},
	 { "LikelihoodCurveCopy_sigmaPlus", _wrap_LikelihoodCurveCopy_sigmaPlus, METH_VARARGS, NULL},
	 { "LikelihoodCurveCopy_sigmaMinus", _wrap_LikelihoodCurveCopy_sigmaMinus, METH_VARARGS, NULL},
	 { "LikelihoodCurveCopy_findLocalMaximum", _wrap_LikelihoodCurveCopy_findLocalMaximum, METH_VARARGS, NULL},
	 { "LikelihoodCurveCopy_posteriorMean", _wrap_LikelihoodCurveCopy_posteriorMean, METH_O, NULL},
	 { "LikelihoodCurveCopy_posteriorVariance", _wrap_LikelihoodCurveCopy_posteriorVariance, METH_O, NULL},
	 { "LikelihoodCurveCopy_swigregister", LikelihoodCurveCopy_swigregister, METH_O, NULL},
	 { "LikelihoodCurveCopy_swiginit", LikelihoodCurveCopy_swiginit, METH_VARARGS, NULL},
	 { "CubicHermiteInterpolatorEG_clone", _wrap_CubicHermiteInterpolatorEG_clone, METH_O, NULL},
	 { "delete_CubicHermiteInterpolatorEG", _wrap_delete_CubicHermiteInterpolatorEG, METH_O, NULL},
	 { "CubicHermiteInterpolatorEG_parMin", _wrap_CubicHermiteInterpolatorEG_parMin, METH_O, NULL},
	 { "CubicHermiteInterpolatorEG_parMax", _wrap_CubicHermiteInterpolatorEG_parMax, METH_O, NULL},
	 { "CubicHermiteInterpolatorEG_nPoints", _wrap_CubicHermiteInterpolatorEG_nPoints, METH_O, NULL},
	 { "CubicHermiteInterpolatorEG_stepSize", _wrap_CubicHermiteInterpolatorEG_stepSize, METH_O, NULL},
	 { "CubicHermiteInterpolatorEG_getValues", _wrap_CubicHermiteInterpolatorEG_getValues, METH_O, NULL},
	 { "CubicHermiteInterpolatorEG_getDerivatives", _wrap_CubicHermiteInterpolatorEG_getDerivatives, METH_O, NULL},
	 { "CubicHermiteInterpolatorEG_location", _wrap_CubicHermiteInterpolatorEG_location, METH_O, NULL},
	 { "CubicHermiteInterpolatorEG_maximum", _wrap_CubicHermiteInterpolatorEG_maximum, METH_O, NULL},
	 { "CubicHermiteInterpolatorEG_argmax", _wrap_CubicHermiteInterpolatorEG_argmax, METH_O, NULL},
	 { "CubicHermiteInterpolatorEG___call__", _wrap_CubicHermiteInterpolatorEG___call__, METH_VARARGS, NULL},
	 { "CubicHermiteInterpolatorEG_derivative", _wrap_CubicHermiteInterpolatorEG_derivative, METH_VARARGS, NULL},
	 { "CubicHermiteInterpolatorEG_secondDerivative", _wrap_CubicHermiteInterpolatorEG_secondDerivative, METH_VARARGS, NULL},
	 { "CubicHermiteInterpolatorEG_classname", _wrap_CubicHermiteInterpolatorEG_classname, METH_O, NULL},
	 { "CubicHermiteInterpolatorEG___imul__", _wrap_CubicHermiteInterpolatorEG___imul__, METH_VARARGS, NULL},
	 { "new_CubicHermiteInterpolatorEG", _wrap_new_CubicHermiteInterpolatorEG, METH_VARARGS, NULL},
	 { "CubicHermiteInterpolatorEG_swigregister", CubicHermiteInterpolatorEG_swigregister, METH_O, NULL},
	 { "CubicHermiteInterpolatorEG_swiginit", CubicHermiteInterpolatorEG_swiginit, METH_VARARGS, NULL},
	 { "InterpolatedDensity1D_clone", _wrap_InterpolatedDensity1D_clone, METH_O, NULL},
	 { "delete_InterpolatedDensity1D", _wrap_delete_InterpolatedDensity1D, METH_O, NULL},
	 { "InterpolatedDensity1D_isUnimodal", _wrap_InterpolatedDensity1D_isUnimodal, METH_O, NULL},
	 { "InterpolatedDensity1D_classname", _wrap_InterpolatedDensity1D_classname, METH_O, NULL},
	 { "InterpolatedDensity1D_entropy", _wrap_InterpolatedDensity1D_entropy, METH_O, NULL},
	 { "InterpolatedDensity1D_nCoords", _wrap_InterpolatedDensity1D_nCoords, METH_O, NULL},
	 { "new_InterpolatedDensity1D", _wrap_new_InterpolatedDensity1D, METH_VARARGS, NULL},
	 { "InterpolatedDensity1D_swigregister", InterpolatedDensity1D_swigregister, METH_O, NULL},
	 { "InterpolatedDensity1D_swiginit", InterpolatedDensity1D_swiginit, METH_VARARGS, NULL},
	 { "new_TransitionCubic", _wrap_new_TransitionCubic, METH_VARARGS, NULL},
	 { "TransitionCubic_x0", _wrap_TransitionCubic_x0, METH_O, NULL},
	 { "TransitionCubic_h", _wrap_TransitionCubic_h, METH_O, NULL},
	 { "TransitionCubic___call__", _wrap_TransitionCubic___call__, METH_VARARGS, NULL},
	 { "TransitionCubic_derivative", _wrap_TransitionCubic_derivative, METH_VARARGS, NULL},
	 { "TransitionCubic_secondDerivative", _wrap_TransitionCubic_secondDerivative, METH_VARARGS, NULL},
	 { "TransitionCubic_hasExtremum", _wrap_TransitionCubic_hasExtremum, METH_O, NULL},
	 { "TransitionCubic_extremum", _wrap_TransitionCubic_extremum, METH_O, NULL},
	 { "delete_TransitionCubic", _wrap_delete_TransitionCubic, METH_O, NULL},
	 { "TransitionCubic_swigregister", TransitionCubic_swigregister, METH_O, NULL},
	 { "TransitionCubic_swiginit", TransitionCubic_swiginit, METH_VARARGS, NULL},
	 { "new_DoubleCubicInner", _wrap_new_DoubleCubicInner, METH_VARARGS, NULL},
	 { "DoubleCubicInner___call__", _wrap_DoubleCubicInner___call__, METH_VARARGS, NULL},
	 { "DoubleCubicInner_derivative", _wrap_DoubleCubicInner_derivative, METH_VARARGS, NULL},
	 { "DoubleCubicInner_secondDerivative", _wrap_DoubleCubicInner_secondDerivative, METH_VARARGS, NULL},
	 { "delete_DoubleCubicInner", _wrap_delete_DoubleCubicInner, METH_O, NULL},
	 { "DoubleCubicInner_swigregister", DoubleCubicInner_swigregister, METH_O, NULL},
	 { "DoubleCubicInner_swiginit", DoubleCubicInner_swiginit, METH_VARARGS, NULL},
	 { "new_Poly1D", _wrap_new_Poly1D, METH_VARARGS, NULL},
	 { "Poly1D_reserve", _wrap_Poly1D_reserve, METH_VARARGS, NULL},
	 { "Poly1D_truncate", _wrap_Poly1D_truncate, METH_VARARGS, NULL},
	 { "Poly1D_truncateLeadingZeros", _wrap_Poly1D_truncateLeadingZeros, METH_O, NULL},
	 { "Poly1D_setCoefficient", _wrap_Poly1D_setCoefficient, METH_VARARGS, NULL},
	 { "Poly1D_deg", _wrap_Poly1D_deg, METH_O, NULL},
	 { "Poly1D_allCoefficients", _wrap_Poly1D_allCoefficients, METH_O, NULL},
	 { "Poly1D_leadingCoefficient", _wrap_Poly1D_leadingCoefficient, METH_O, NULL},
	 { "Poly1D_nRoots", _wrap_Poly1D_nRoots, METH_VARARGS, NULL},
	 { "Poly1D_findRoots", _wrap_Poly1D_findRoots, METH_VARARGS, NULL},
	 { "Poly1D___call__", _wrap_Poly1D___call__, METH_VARARGS, NULL},
	 { "Poly1D_valueAndDerivative", _wrap_Poly1D_valueAndDerivative, METH_VARARGS, NULL},
	 { "Poly1D_isClose", _wrap_Poly1D_isClose, METH_VARARGS, NULL},
	 { "Poly1D_isNull", _wrap_Poly1D_isNull, METH_O, NULL},
	 { "Poly1D_derivative", _wrap_Poly1D_derivative, METH_O, NULL},
	 { "Poly1D_integral", _wrap_Poly1D_integral, METH_VARARGS, NULL},
	 { "Poly1D___pos__", _wrap_Poly1D___pos__, METH_O, NULL},
	 { "Poly1D___neg__", _wrap_Poly1D___neg__, METH_O, NULL},
	 { "Poly1D___mul__", _wrap_Poly1D___mul__, METH_VARARGS, NULL},
	 { "Poly1D___add__", _wrap_Poly1D___add__, METH_VARARGS, NULL},
	 { "Poly1D___sub__", _wrap_Poly1D___sub__, METH_VARARGS, NULL},
	 { "Poly1D___imul__", _wrap_Poly1D___imul__, METH_VARARGS, NULL},
	 { "Poly1D___iadd__", _wrap_Poly1D___iadd__, METH_VARARGS, NULL},
	 { "Poly1D___isub__", _wrap_Poly1D___isub__, METH_VARARGS, NULL},
	 { "Poly1D___truediv__", _wrap_Poly1D___truediv__, METH_VARARGS, NULL},
	 { "Poly1D___mod__", _wrap_Poly1D___mod__, METH_VARARGS, NULL},
	 { "Poly1D___eq__", _wrap_Poly1D___eq__, METH_VARARGS, NULL},
	 { "Poly1D___ne__", _wrap_Poly1D___ne__, METH_VARARGS, NULL},
	 { "Poly1D_monicDeg0", _wrap_Poly1D_monicDeg0, METH_NOARGS, NULL},
	 { "Poly1D_monicDeg1", _wrap_Poly1D_monicDeg1, METH_O, NULL},
	 { "Poly1D_monicDeg2", _wrap_Poly1D_monicDeg2, METH_VARARGS, NULL},
	 { "delete_Poly1D", _wrap_delete_Poly1D, METH_O, NULL},
	 { "Poly1D_swigregister", Poly1D_swigregister, METH_O, NULL},
	 { "Poly1D_swiginit", Poly1D_swiginit, METH_VARARGS, NULL},
	 { "new_Poly1DShifted", _wrap_new_Poly1DShifted, METH_VARARGS, NULL},
	 { "Poly1DShifted___call__", _wrap_Poly1DShifted___call__, METH_VARARGS, NULL},
	 { "delete_Poly1DShifted", _wrap_delete_Poly1DShifted, METH_O, NULL},
	 { "Poly1DShifted_swigregister", Poly1DShifted_swigregister, METH_O, NULL},
	 { "Poly1DShifted_swiginit", Poly1DShifted_swiginit, METH_VARARGS, NULL},
	 { "new_QuinticInner", _wrap_new_QuinticInner, METH_VARARGS, NULL},
	 { "QuinticInner___call__", _wrap_QuinticInner___call__, METH_VARARGS, NULL},
	 { "QuinticInner_derivative", _wrap_QuinticInner_derivative, METH_VARARGS, NULL},
	 { "QuinticInner_secondDerivative", _wrap_QuinticInner_secondDerivative, METH_VARARGS, NULL},
	 { "QuinticInner_derivPoly", _wrap_QuinticInner_derivPoly, METH_O, NULL},
	 { "delete_QuinticInner", _wrap_delete_QuinticInner, METH_O, NULL},
	 { "QuinticInner_swigregister", QuinticInner_swigregister, METH_O, NULL},
	 { "QuinticInner_swiginit", QuinticInner_swiginit, METH_VARARGS, NULL},
	 { "new_DerivativeFunctorHelper_TransitionCubic", _wrap_new_DerivativeFunctorHelper_TransitionCubic, METH_O, NULL},
	 { "DerivativeFunctorHelper_TransitionCubic___call__", _wrap_DerivativeFunctorHelper_TransitionCubic___call__, METH_VARARGS, NULL},
	 { "delete_DerivativeFunctorHelper_TransitionCubic", _wrap_delete_DerivativeFunctorHelper_TransitionCubic, METH_O, NULL},
	 { "DerivativeFunctorHelper_TransitionCubic_swigregister", DerivativeFunctorHelper_TransitionCubic_swigregister, METH_O, NULL},
	 { "DerivativeFunctorHelper_TransitionCubic_swiginit", DerivativeFunctorHelper_TransitionCubic_swiginit, METH_VARARGS, NULL},
	 { "new_SecondDerivativeFunctorHelper_TransitionCubic", _wrap_new_SecondDerivativeFunctorHelper_TransitionCubic, METH_O, NULL},
	 { "SecondDerivativeFunctorHelper_TransitionCubic___call__", _wrap_SecondDerivativeFunctorHelper_TransitionCubic___call__, METH_VARARGS, NULL},
	 { "delete_SecondDerivativeFunctorHelper_TransitionCubic", _wrap_delete_SecondDerivativeFunctorHelper_TransitionCubic, METH_O, NULL},
	 { "SecondDerivativeFunctorHelper_TransitionCubic_swigregister", SecondDerivativeFunctorHelper_TransitionCubic_swigregister, METH_O, NULL},
	 { "SecondDerivativeFunctorHelper_TransitionCubic_swiginit", SecondDerivativeFunctorHelper_TransitionCubic_swiginit, METH_VARARGS, NULL},
	 { "new_DerivativeFunctorHelper_ParabolicRailwayCurve", _wrap_new_DerivativeFunctorHelper_ParabolicRailwayCurve, METH_O, NULL},
	 { "DerivativeFunctorHelper_ParabolicRailwayCurve___call__", _wrap_DerivativeFunctorHelper_ParabolicRailwayCurve___call__, METH_VARARGS, NULL},
	 { "delete_DerivativeFunctorHelper_ParabolicRailwayCurve", _wrap_delete_DerivativeFunctorHelper_ParabolicRailwayCurve, METH_O, NULL},
	 { "DerivativeFunctorHelper_ParabolicRailwayCurve_swigregister", DerivativeFunctorHelper_ParabolicRailwayCurve_swigregister, METH_O, NULL},
	 { "DerivativeFunctorHelper_ParabolicRailwayCurve_swiginit", DerivativeFunctorHelper_ParabolicRailwayCurve_swiginit, METH_VARARGS, NULL},
	 { "new_SecondDerivativeFunctorHelper_ParabolicRailwayCurve", _wrap_new_SecondDerivativeFunctorHelper_ParabolicRailwayCurve, METH_O, NULL},
	 { "SecondDerivativeFunctorHelper_ParabolicRailwayCurve___call__", _wrap_SecondDerivativeFunctorHelper_ParabolicRailwayCurve___call__, METH_VARARGS, NULL},
	 { "delete_SecondDerivativeFunctorHelper_ParabolicRailwayCurve", _wrap_delete_SecondDerivativeFunctorHelper_ParabolicRailwayCurve, METH_O, NULL},
	 { "SecondDerivativeFunctorHelper_ParabolicRailwayCurve_swigregister", SecondDerivativeFunctorHelper_ParabolicRailwayCurve_swigregister, METH_O, NULL},
	 { "SecondDerivativeFunctorHelper_ParabolicRailwayCurve_swiginit", SecondDerivativeFunctorHelper_ParabolicRailwayCurve_swiginit, METH_VARARGS, NULL},
	 { "new_DerivativeFunctorHelper_SmoothDoubleCubic", _wrap_new_DerivativeFunctorHelper_SmoothDoubleCubic, METH_O, NULL},
	 { "DerivativeFunctorHelper_SmoothDoubleCubic___call__", _wrap_DerivativeFunctorHelper_SmoothDoubleCubic___call__, METH_VARARGS, NULL},
	 { "delete_DerivativeFunctorHelper_SmoothDoubleCubic", _wrap_delete_DerivativeFunctorHelper_SmoothDoubleCubic, METH_O, NULL},
	 { "DerivativeFunctorHelper_SmoothDoubleCubic_swigregister", DerivativeFunctorHelper_SmoothDoubleCubic_swigregister, METH_O, NULL},
	 { "DerivativeFunctorHelper_SmoothDoubleCubic_swiginit", DerivativeFunctorHelper_SmoothDoubleCubic_swiginit, METH_VARARGS, NULL},
	 { "new_SecondDerivativeFunctorHelper_SmoothDoubleCubic", _wrap_new_SecondDerivativeFunctorHelper_SmoothDoubleCubic, METH_O, NULL},
	 { "SecondDerivativeFunctorHelper_SmoothDoubleCubic___call__", _wrap_SecondDerivativeFunctorHelper_SmoothDoubleCubic___call__, METH_VARARGS, NULL},
	 { "delete_SecondDerivativeFunctorHelper_SmoothDoubleCubic", _wrap_delete_SecondDerivativeFunctorHelper_SmoothDoubleCubic, METH_O, NULL},
	 { "SecondDerivativeFunctorHelper_SmoothDoubleCubic_swigregister", SecondDerivativeFunctorHelper_SmoothDoubleCubic_swigregister, METH_O, NULL},
	 { "SecondDerivativeFunctorHelper_SmoothDoubleCubic_swiginit", SecondDerivativeFunctorHelper_SmoothDoubleCubic_swiginit, METH_VARARGS, NULL},
	 { "new_DerivativeFunctorHelper_SymbetaDoubleIntegral", _wrap_new_DerivativeFunctorHelper_SymbetaDoubleIntegral, METH_O, NULL},
	 { "DerivativeFunctorHelper_SymbetaDoubleIntegral___call__", _wrap_DerivativeFunctorHelper_SymbetaDoubleIntegral___call__, METH_VARARGS, NULL},
	 { "delete_DerivativeFunctorHelper_SymbetaDoubleIntegral", _wrap_delete_DerivativeFunctorHelper_SymbetaDoubleIntegral, METH_O, NULL},
	 { "DerivativeFunctorHelper_SymbetaDoubleIntegral_swigregister", DerivativeFunctorHelper_SymbetaDoubleIntegral_swigregister, METH_O, NULL},
	 { "DerivativeFunctorHelper_SymbetaDoubleIntegral_swiginit", DerivativeFunctorHelper_SymbetaDoubleIntegral_swiginit, METH_VARARGS, NULL},
	 { "new_SecondDerivativeFunctorHelper_SymbetaDoubleIntegral", _wrap_new_SecondDerivativeFunctorHelper_SymbetaDoubleIntegral, METH_O, NULL},
	 { "SecondDerivativeFunctorHelper_SymbetaDoubleIntegral___call__", _wrap_SecondDerivativeFunctorHelper_SymbetaDoubleIntegral___call__, METH_VARARGS, NULL},
	 { "delete_SecondDerivativeFunctorHelper_SymbetaDoubleIntegral", _wrap_delete_SecondDerivativeFunctorHelper_SymbetaDoubleIntegral, METH_O, NULL},
	 { "SecondDerivativeFunctorHelper_SymbetaDoubleIntegral_swigregister", SecondDerivativeFunctorHelper_SymbetaDoubleIntegral_swigregister, METH_O, NULL},
	 { "SecondDerivativeFunctorHelper_SymbetaDoubleIntegral_swiginit", SecondDerivativeFunctorHelper_SymbetaDoubleIntegral_swiginit, METH_VARARGS, NULL},
	 { "new_DerivativeFunctorHelper_DoubleCubicInner", _wrap_new_DerivativeFunctorHelper_DoubleCubicInner, METH_O, NULL},
	 { "DerivativeFunctorHelper_DoubleCubicInner___call__", _wrap_DerivativeFunctorHelper_DoubleCubicInner___call__, METH_VARARGS, NULL},
	 { "delete_DerivativeFunctorHelper_DoubleCubicInner", _wrap_delete_DerivativeFunctorHelper_DoubleCubicInner, METH_O, NULL},
	 { "DerivativeFunctorHelper_DoubleCubicInner_swigregister", DerivativeFunctorHelper_DoubleCubicInner_swigregister, METH_O, NULL},
	 { "DerivativeFunctorHelper_DoubleCubicInner_swiginit", DerivativeFunctorHelper_DoubleCubicInner_swiginit, METH_VARARGS, NULL},
	 { "new_SecondDerivativeFunctorHelper_DoubleCubicInner", _wrap_new_SecondDerivativeFunctorHelper_DoubleCubicInner, METH_O, NULL},
	 { "SecondDerivativeFunctorHelper_DoubleCubicInner___call__", _wrap_SecondDerivativeFunctorHelper_DoubleCubicInner___call__, METH_VARARGS, NULL},
	 { "delete_SecondDerivativeFunctorHelper_DoubleCubicInner", _wrap_delete_SecondDerivativeFunctorHelper_DoubleCubicInner, METH_O, NULL},
	 { "SecondDerivativeFunctorHelper_DoubleCubicInner_swigregister", SecondDerivativeFunctorHelper_DoubleCubicInner_swigregister, METH_O, NULL},
	 { "SecondDerivativeFunctorHelper_DoubleCubicInner_swiginit", SecondDerivativeFunctorHelper_DoubleCubicInner_swiginit, METH_VARARGS, NULL},
	 { "new_DerivativeFunctorHelper_QuinticInner", _wrap_new_DerivativeFunctorHelper_QuinticInner, METH_O, NULL},
	 { "DerivativeFunctorHelper_QuinticInner___call__", _wrap_DerivativeFunctorHelper_QuinticInner___call__, METH_VARARGS, NULL},
	 { "delete_DerivativeFunctorHelper_QuinticInner", _wrap_delete_DerivativeFunctorHelper_QuinticInner, METH_O, NULL},
	 { "DerivativeFunctorHelper_QuinticInner_swigregister", DerivativeFunctorHelper_QuinticInner_swigregister, METH_O, NULL},
	 { "DerivativeFunctorHelper_QuinticInner_swiginit", DerivativeFunctorHelper_QuinticInner_swiginit, METH_VARARGS, NULL},
	 { "DerivativeFunctor", _wrap_DerivativeFunctor, METH_VARARGS, NULL},
	 { "new_SecondDerivativeFunctorHelper_QuinticInner", _wrap_new_SecondDerivativeFunctorHelper_QuinticInner, METH_O, NULL},
	 { "SecondDerivativeFunctorHelper_QuinticInner___call__", _wrap_SecondDerivativeFunctorHelper_QuinticInner___call__, METH_VARARGS, NULL},
	 { "delete_SecondDerivativeFunctorHelper_QuinticInner", _wrap_delete_SecondDerivativeFunctorHelper_QuinticInner, METH_O, NULL},
	 { "SecondDerivativeFunctorHelper_QuinticInner_swigregister", SecondDerivativeFunctorHelper_QuinticInner_swigregister, METH_O, NULL},
	 { "SecondDerivativeFunctorHelper_QuinticInner_swiginit", SecondDerivativeFunctorHelper_QuinticInner_swiginit, METH_VARARGS, NULL},
	 { "SecondDerivativeFunctor", _wrap_SecondDerivativeFunctor, METH_VARARGS, NULL},
	 { "new_PoissonLogli", _wrap_new_PoissonLogli, METH_O, NULL},
	 { "delete_PoissonLogli", _wrap_delete_PoissonLogli, METH_O, NULL},
	 { "PoissonLogli_clone", _wrap_PoissonLogli_clone, METH_O, NULL},
	 { "PoissonLogli_n", _wrap_PoissonLogli_n, METH_O, NULL},
	 { "PoissonLogli_parMin", _wrap_PoissonLogli_parMin, METH_O, NULL},
	 { "PoissonLogli_parMax", _wrap_PoissonLogli_parMax, METH_O, NULL},
	 { "PoissonLogli_location", _wrap_PoissonLogli_location, METH_O, NULL},
	 { "PoissonLogli_stepSize", _wrap_PoissonLogli_stepSize, METH_O, NULL},
	 { "PoissonLogli_maximum", _wrap_PoissonLogli_maximum, METH_O, NULL},
	 { "PoissonLogli_argmax", _wrap_PoissonLogli_argmax, METH_O, NULL},
	 { "PoissonLogli___call__", _wrap_PoissonLogli___call__, METH_VARARGS, NULL},
	 { "PoissonLogli_derivative", _wrap_PoissonLogli_derivative, METH_VARARGS, NULL},
	 { "PoissonLogli_secondDerivative", _wrap_PoissonLogli_secondDerivative, METH_VARARGS, NULL},
	 { "PoissonLogli_classname", _wrap_PoissonLogli_classname, METH_O, NULL},
	 { "PoissonLogli___imul__", _wrap_PoissonLogli___imul__, METH_VARARGS, NULL},
	 { "PoissonLogli_sigmaMinus", _wrap_PoissonLogli_sigmaMinus, METH_VARARGS, NULL},
	 { "PoissonLogli_posteriorMean", _wrap_PoissonLogli_posteriorMean, METH_O, NULL},
	 { "PoissonLogli_posteriorVariance", _wrap_PoissonLogli_posteriorVariance, METH_O, NULL},
	 { "PoissonLogli_swigregister", PoissonLogli_swigregister, METH_O, NULL},
	 { "PoissonLogli_swiginit", PoissonLogli_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricBetaGaussian", _wrap_new_SymmetricBetaGaussian, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_clone", _wrap_SymmetricBetaGaussian_clone, METH_O, NULL},
	 { "delete_SymmetricBetaGaussian", _wrap_delete_SymmetricBetaGaussian, METH_O, NULL},
	 { "SymmetricBetaGaussian_p", _wrap_SymmetricBetaGaussian_p, METH_O, NULL},
	 { "SymmetricBetaGaussian_h", _wrap_SymmetricBetaGaussian_h, METH_O, NULL},
	 { "SymmetricBetaGaussian_classname", _wrap_SymmetricBetaGaussian_classname, METH_O, NULL},
	 { "SymmetricBetaGaussian_minQuantileRatio", _wrap_SymmetricBetaGaussian_minQuantileRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_minDescentDeltaRatio", _wrap_SymmetricBetaGaussian_minDescentDeltaRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_fromQuantiles", _wrap_SymmetricBetaGaussian_fromQuantiles, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_fromModeAndDeltas", _wrap_SymmetricBetaGaussian_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_swigregister", SymmetricBetaGaussian_swigregister, METH_O, NULL},
	 { "SymmetricBetaGaussian_swiginit", SymmetricBetaGaussian_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricBetaGaussian_1_10", _wrap_new_SymmetricBetaGaussian_1_10, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_1_10_clone", _wrap_SymmetricBetaGaussian_1_10_clone, METH_O, NULL},
	 { "delete_SymmetricBetaGaussian_1_10", _wrap_delete_SymmetricBetaGaussian_1_10, METH_O, NULL},
	 { "SymmetricBetaGaussian_1_10_classname", _wrap_SymmetricBetaGaussian_1_10_classname, METH_O, NULL},
	 { "SymmetricBetaGaussian_1_10_minQuantileRatio", _wrap_SymmetricBetaGaussian_1_10_minQuantileRatio, METH_NOARGS, NULL},
	 { "SymmetricBetaGaussian_1_10_minDescentDeltaRatio", _wrap_SymmetricBetaGaussian_1_10_minDescentDeltaRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_1_10_fromQuantiles", _wrap_SymmetricBetaGaussian_1_10_fromQuantiles, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_1_10_fromModeAndDeltas", _wrap_SymmetricBetaGaussian_1_10_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_1_10_swigregister", SymmetricBetaGaussian_1_10_swigregister, METH_O, NULL},
	 { "SymmetricBetaGaussian_1_10_swiginit", SymmetricBetaGaussian_1_10_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricBetaGaussian_1_15", _wrap_new_SymmetricBetaGaussian_1_15, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_1_15_clone", _wrap_SymmetricBetaGaussian_1_15_clone, METH_O, NULL},
	 { "delete_SymmetricBetaGaussian_1_15", _wrap_delete_SymmetricBetaGaussian_1_15, METH_O, NULL},
	 { "SymmetricBetaGaussian_1_15_classname", _wrap_SymmetricBetaGaussian_1_15_classname, METH_O, NULL},
	 { "SymmetricBetaGaussian_1_15_minQuantileRatio", _wrap_SymmetricBetaGaussian_1_15_minQuantileRatio, METH_NOARGS, NULL},
	 { "SymmetricBetaGaussian_1_15_minDescentDeltaRatio", _wrap_SymmetricBetaGaussian_1_15_minDescentDeltaRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_1_15_fromQuantiles", _wrap_SymmetricBetaGaussian_1_15_fromQuantiles, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_1_15_fromModeAndDeltas", _wrap_SymmetricBetaGaussian_1_15_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_1_15_swigregister", SymmetricBetaGaussian_1_15_swigregister, METH_O, NULL},
	 { "SymmetricBetaGaussian_1_15_swiginit", SymmetricBetaGaussian_1_15_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricBetaGaussian_1_20", _wrap_new_SymmetricBetaGaussian_1_20, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_1_20_clone", _wrap_SymmetricBetaGaussian_1_20_clone, METH_O, NULL},
	 { "delete_SymmetricBetaGaussian_1_20", _wrap_delete_SymmetricBetaGaussian_1_20, METH_O, NULL},
	 { "SymmetricBetaGaussian_1_20_classname", _wrap_SymmetricBetaGaussian_1_20_classname, METH_O, NULL},
	 { "SymmetricBetaGaussian_1_20_minQuantileRatio", _wrap_SymmetricBetaGaussian_1_20_minQuantileRatio, METH_NOARGS, NULL},
	 { "SymmetricBetaGaussian_1_20_minDescentDeltaRatio", _wrap_SymmetricBetaGaussian_1_20_minDescentDeltaRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_1_20_fromQuantiles", _wrap_SymmetricBetaGaussian_1_20_fromQuantiles, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_1_20_fromModeAndDeltas", _wrap_SymmetricBetaGaussian_1_20_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_1_20_swigregister", SymmetricBetaGaussian_1_20_swigregister, METH_O, NULL},
	 { "SymmetricBetaGaussian_1_20_swiginit", SymmetricBetaGaussian_1_20_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricBetaGaussian_1_25", _wrap_new_SymmetricBetaGaussian_1_25, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_1_25_clone", _wrap_SymmetricBetaGaussian_1_25_clone, METH_O, NULL},
	 { "delete_SymmetricBetaGaussian_1_25", _wrap_delete_SymmetricBetaGaussian_1_25, METH_O, NULL},
	 { "SymmetricBetaGaussian_1_25_classname", _wrap_SymmetricBetaGaussian_1_25_classname, METH_O, NULL},
	 { "SymmetricBetaGaussian_1_25_minQuantileRatio", _wrap_SymmetricBetaGaussian_1_25_minQuantileRatio, METH_NOARGS, NULL},
	 { "SymmetricBetaGaussian_1_25_minDescentDeltaRatio", _wrap_SymmetricBetaGaussian_1_25_minDescentDeltaRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_1_25_fromQuantiles", _wrap_SymmetricBetaGaussian_1_25_fromQuantiles, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_1_25_fromModeAndDeltas", _wrap_SymmetricBetaGaussian_1_25_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_1_25_swigregister", SymmetricBetaGaussian_1_25_swigregister, METH_O, NULL},
	 { "SymmetricBetaGaussian_1_25_swiginit", SymmetricBetaGaussian_1_25_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricBetaGaussian_1_30", _wrap_new_SymmetricBetaGaussian_1_30, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_1_30_clone", _wrap_SymmetricBetaGaussian_1_30_clone, METH_O, NULL},
	 { "delete_SymmetricBetaGaussian_1_30", _wrap_delete_SymmetricBetaGaussian_1_30, METH_O, NULL},
	 { "SymmetricBetaGaussian_1_30_classname", _wrap_SymmetricBetaGaussian_1_30_classname, METH_O, NULL},
	 { "SymmetricBetaGaussian_1_30_minQuantileRatio", _wrap_SymmetricBetaGaussian_1_30_minQuantileRatio, METH_NOARGS, NULL},
	 { "SymmetricBetaGaussian_1_30_minDescentDeltaRatio", _wrap_SymmetricBetaGaussian_1_30_minDescentDeltaRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_1_30_fromQuantiles", _wrap_SymmetricBetaGaussian_1_30_fromQuantiles, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_1_30_fromModeAndDeltas", _wrap_SymmetricBetaGaussian_1_30_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_1_30_swigregister", SymmetricBetaGaussian_1_30_swigregister, METH_O, NULL},
	 { "SymmetricBetaGaussian_1_30_swiginit", SymmetricBetaGaussian_1_30_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricBetaGaussian_2_10", _wrap_new_SymmetricBetaGaussian_2_10, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_2_10_clone", _wrap_SymmetricBetaGaussian_2_10_clone, METH_O, NULL},
	 { "delete_SymmetricBetaGaussian_2_10", _wrap_delete_SymmetricBetaGaussian_2_10, METH_O, NULL},
	 { "SymmetricBetaGaussian_2_10_classname", _wrap_SymmetricBetaGaussian_2_10_classname, METH_O, NULL},
	 { "SymmetricBetaGaussian_2_10_minQuantileRatio", _wrap_SymmetricBetaGaussian_2_10_minQuantileRatio, METH_NOARGS, NULL},
	 { "SymmetricBetaGaussian_2_10_minDescentDeltaRatio", _wrap_SymmetricBetaGaussian_2_10_minDescentDeltaRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_2_10_fromQuantiles", _wrap_SymmetricBetaGaussian_2_10_fromQuantiles, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_2_10_fromModeAndDeltas", _wrap_SymmetricBetaGaussian_2_10_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_2_10_swigregister", SymmetricBetaGaussian_2_10_swigregister, METH_O, NULL},
	 { "SymmetricBetaGaussian_2_10_swiginit", SymmetricBetaGaussian_2_10_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricBetaGaussian_2_15", _wrap_new_SymmetricBetaGaussian_2_15, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_2_15_clone", _wrap_SymmetricBetaGaussian_2_15_clone, METH_O, NULL},
	 { "delete_SymmetricBetaGaussian_2_15", _wrap_delete_SymmetricBetaGaussian_2_15, METH_O, NULL},
	 { "SymmetricBetaGaussian_2_15_classname", _wrap_SymmetricBetaGaussian_2_15_classname, METH_O, NULL},
	 { "SymmetricBetaGaussian_2_15_minQuantileRatio", _wrap_SymmetricBetaGaussian_2_15_minQuantileRatio, METH_NOARGS, NULL},
	 { "SymmetricBetaGaussian_2_15_minDescentDeltaRatio", _wrap_SymmetricBetaGaussian_2_15_minDescentDeltaRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_2_15_fromQuantiles", _wrap_SymmetricBetaGaussian_2_15_fromQuantiles, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_2_15_fromModeAndDeltas", _wrap_SymmetricBetaGaussian_2_15_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_2_15_swigregister", SymmetricBetaGaussian_2_15_swigregister, METH_O, NULL},
	 { "SymmetricBetaGaussian_2_15_swiginit", SymmetricBetaGaussian_2_15_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricBetaGaussian_2_20", _wrap_new_SymmetricBetaGaussian_2_20, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_2_20_clone", _wrap_SymmetricBetaGaussian_2_20_clone, METH_O, NULL},
	 { "delete_SymmetricBetaGaussian_2_20", _wrap_delete_SymmetricBetaGaussian_2_20, METH_O, NULL},
	 { "SymmetricBetaGaussian_2_20_classname", _wrap_SymmetricBetaGaussian_2_20_classname, METH_O, NULL},
	 { "SymmetricBetaGaussian_2_20_minQuantileRatio", _wrap_SymmetricBetaGaussian_2_20_minQuantileRatio, METH_NOARGS, NULL},
	 { "SymmetricBetaGaussian_2_20_minDescentDeltaRatio", _wrap_SymmetricBetaGaussian_2_20_minDescentDeltaRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_2_20_fromQuantiles", _wrap_SymmetricBetaGaussian_2_20_fromQuantiles, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_2_20_fromModeAndDeltas", _wrap_SymmetricBetaGaussian_2_20_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_2_20_swigregister", SymmetricBetaGaussian_2_20_swigregister, METH_O, NULL},
	 { "SymmetricBetaGaussian_2_20_swiginit", SymmetricBetaGaussian_2_20_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricBetaGaussian_2_25", _wrap_new_SymmetricBetaGaussian_2_25, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_2_25_clone", _wrap_SymmetricBetaGaussian_2_25_clone, METH_O, NULL},
	 { "delete_SymmetricBetaGaussian_2_25", _wrap_delete_SymmetricBetaGaussian_2_25, METH_O, NULL},
	 { "SymmetricBetaGaussian_2_25_classname", _wrap_SymmetricBetaGaussian_2_25_classname, METH_O, NULL},
	 { "SymmetricBetaGaussian_2_25_minQuantileRatio", _wrap_SymmetricBetaGaussian_2_25_minQuantileRatio, METH_NOARGS, NULL},
	 { "SymmetricBetaGaussian_2_25_minDescentDeltaRatio", _wrap_SymmetricBetaGaussian_2_25_minDescentDeltaRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_2_25_fromQuantiles", _wrap_SymmetricBetaGaussian_2_25_fromQuantiles, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_2_25_fromModeAndDeltas", _wrap_SymmetricBetaGaussian_2_25_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_2_25_swigregister", SymmetricBetaGaussian_2_25_swigregister, METH_O, NULL},
	 { "SymmetricBetaGaussian_2_25_swiginit", SymmetricBetaGaussian_2_25_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricBetaGaussian_2_30", _wrap_new_SymmetricBetaGaussian_2_30, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_2_30_clone", _wrap_SymmetricBetaGaussian_2_30_clone, METH_O, NULL},
	 { "delete_SymmetricBetaGaussian_2_30", _wrap_delete_SymmetricBetaGaussian_2_30, METH_O, NULL},
	 { "SymmetricBetaGaussian_2_30_classname", _wrap_SymmetricBetaGaussian_2_30_classname, METH_O, NULL},
	 { "SymmetricBetaGaussian_2_30_minQuantileRatio", _wrap_SymmetricBetaGaussian_2_30_minQuantileRatio, METH_NOARGS, NULL},
	 { "SymmetricBetaGaussian_2_30_minDescentDeltaRatio", _wrap_SymmetricBetaGaussian_2_30_minDescentDeltaRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_2_30_fromQuantiles", _wrap_SymmetricBetaGaussian_2_30_fromQuantiles, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_2_30_fromModeAndDeltas", _wrap_SymmetricBetaGaussian_2_30_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_2_30_swigregister", SymmetricBetaGaussian_2_30_swigregister, METH_O, NULL},
	 { "SymmetricBetaGaussian_2_30_swiginit", SymmetricBetaGaussian_2_30_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricBetaGaussian_3_10", _wrap_new_SymmetricBetaGaussian_3_10, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_3_10_clone", _wrap_SymmetricBetaGaussian_3_10_clone, METH_O, NULL},
	 { "delete_SymmetricBetaGaussian_3_10", _wrap_delete_SymmetricBetaGaussian_3_10, METH_O, NULL},
	 { "SymmetricBetaGaussian_3_10_classname", _wrap_SymmetricBetaGaussian_3_10_classname, METH_O, NULL},
	 { "SymmetricBetaGaussian_3_10_minQuantileRatio", _wrap_SymmetricBetaGaussian_3_10_minQuantileRatio, METH_NOARGS, NULL},
	 { "SymmetricBetaGaussian_3_10_minDescentDeltaRatio", _wrap_SymmetricBetaGaussian_3_10_minDescentDeltaRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_3_10_fromQuantiles", _wrap_SymmetricBetaGaussian_3_10_fromQuantiles, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_3_10_fromModeAndDeltas", _wrap_SymmetricBetaGaussian_3_10_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_3_10_swigregister", SymmetricBetaGaussian_3_10_swigregister, METH_O, NULL},
	 { "SymmetricBetaGaussian_3_10_swiginit", SymmetricBetaGaussian_3_10_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricBetaGaussian_3_15", _wrap_new_SymmetricBetaGaussian_3_15, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_3_15_clone", _wrap_SymmetricBetaGaussian_3_15_clone, METH_O, NULL},
	 { "delete_SymmetricBetaGaussian_3_15", _wrap_delete_SymmetricBetaGaussian_3_15, METH_O, NULL},
	 { "SymmetricBetaGaussian_3_15_classname", _wrap_SymmetricBetaGaussian_3_15_classname, METH_O, NULL},
	 { "SymmetricBetaGaussian_3_15_minQuantileRatio", _wrap_SymmetricBetaGaussian_3_15_minQuantileRatio, METH_NOARGS, NULL},
	 { "SymmetricBetaGaussian_3_15_minDescentDeltaRatio", _wrap_SymmetricBetaGaussian_3_15_minDescentDeltaRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_3_15_fromQuantiles", _wrap_SymmetricBetaGaussian_3_15_fromQuantiles, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_3_15_fromModeAndDeltas", _wrap_SymmetricBetaGaussian_3_15_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_3_15_swigregister", SymmetricBetaGaussian_3_15_swigregister, METH_O, NULL},
	 { "SymmetricBetaGaussian_3_15_swiginit", SymmetricBetaGaussian_3_15_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricBetaGaussian_3_20", _wrap_new_SymmetricBetaGaussian_3_20, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_3_20_clone", _wrap_SymmetricBetaGaussian_3_20_clone, METH_O, NULL},
	 { "delete_SymmetricBetaGaussian_3_20", _wrap_delete_SymmetricBetaGaussian_3_20, METH_O, NULL},
	 { "SymmetricBetaGaussian_3_20_classname", _wrap_SymmetricBetaGaussian_3_20_classname, METH_O, NULL},
	 { "SymmetricBetaGaussian_3_20_minQuantileRatio", _wrap_SymmetricBetaGaussian_3_20_minQuantileRatio, METH_NOARGS, NULL},
	 { "SymmetricBetaGaussian_3_20_minDescentDeltaRatio", _wrap_SymmetricBetaGaussian_3_20_minDescentDeltaRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_3_20_fromQuantiles", _wrap_SymmetricBetaGaussian_3_20_fromQuantiles, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_3_20_fromModeAndDeltas", _wrap_SymmetricBetaGaussian_3_20_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_3_20_swigregister", SymmetricBetaGaussian_3_20_swigregister, METH_O, NULL},
	 { "SymmetricBetaGaussian_3_20_swiginit", SymmetricBetaGaussian_3_20_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricBetaGaussian_3_25", _wrap_new_SymmetricBetaGaussian_3_25, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_3_25_clone", _wrap_SymmetricBetaGaussian_3_25_clone, METH_O, NULL},
	 { "delete_SymmetricBetaGaussian_3_25", _wrap_delete_SymmetricBetaGaussian_3_25, METH_O, NULL},
	 { "SymmetricBetaGaussian_3_25_classname", _wrap_SymmetricBetaGaussian_3_25_classname, METH_O, NULL},
	 { "SymmetricBetaGaussian_3_25_minQuantileRatio", _wrap_SymmetricBetaGaussian_3_25_minQuantileRatio, METH_NOARGS, NULL},
	 { "SymmetricBetaGaussian_3_25_minDescentDeltaRatio", _wrap_SymmetricBetaGaussian_3_25_minDescentDeltaRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_3_25_fromQuantiles", _wrap_SymmetricBetaGaussian_3_25_fromQuantiles, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_3_25_fromModeAndDeltas", _wrap_SymmetricBetaGaussian_3_25_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_3_25_swigregister", SymmetricBetaGaussian_3_25_swigregister, METH_O, NULL},
	 { "SymmetricBetaGaussian_3_25_swiginit", SymmetricBetaGaussian_3_25_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricBetaGaussian_3_30", _wrap_new_SymmetricBetaGaussian_3_30, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_3_30_clone", _wrap_SymmetricBetaGaussian_3_30_clone, METH_O, NULL},
	 { "delete_SymmetricBetaGaussian_3_30", _wrap_delete_SymmetricBetaGaussian_3_30, METH_O, NULL},
	 { "SymmetricBetaGaussian_3_30_classname", _wrap_SymmetricBetaGaussian_3_30_classname, METH_O, NULL},
	 { "SymmetricBetaGaussian_3_30_minQuantileRatio", _wrap_SymmetricBetaGaussian_3_30_minQuantileRatio, METH_NOARGS, NULL},
	 { "SymmetricBetaGaussian_3_30_minDescentDeltaRatio", _wrap_SymmetricBetaGaussian_3_30_minDescentDeltaRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_3_30_fromQuantiles", _wrap_SymmetricBetaGaussian_3_30_fromQuantiles, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_3_30_fromModeAndDeltas", _wrap_SymmetricBetaGaussian_3_30_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_3_30_swigregister", SymmetricBetaGaussian_3_30_swigregister, METH_O, NULL},
	 { "SymmetricBetaGaussian_3_30_swiginit", SymmetricBetaGaussian_3_30_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricBetaGaussian_4_10", _wrap_new_SymmetricBetaGaussian_4_10, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_4_10_clone", _wrap_SymmetricBetaGaussian_4_10_clone, METH_O, NULL},
	 { "delete_SymmetricBetaGaussian_4_10", _wrap_delete_SymmetricBetaGaussian_4_10, METH_O, NULL},
	 { "SymmetricBetaGaussian_4_10_classname", _wrap_SymmetricBetaGaussian_4_10_classname, METH_O, NULL},
	 { "SymmetricBetaGaussian_4_10_minQuantileRatio", _wrap_SymmetricBetaGaussian_4_10_minQuantileRatio, METH_NOARGS, NULL},
	 { "SymmetricBetaGaussian_4_10_minDescentDeltaRatio", _wrap_SymmetricBetaGaussian_4_10_minDescentDeltaRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_4_10_fromQuantiles", _wrap_SymmetricBetaGaussian_4_10_fromQuantiles, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_4_10_fromModeAndDeltas", _wrap_SymmetricBetaGaussian_4_10_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_4_10_swigregister", SymmetricBetaGaussian_4_10_swigregister, METH_O, NULL},
	 { "SymmetricBetaGaussian_4_10_swiginit", SymmetricBetaGaussian_4_10_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricBetaGaussian_4_15", _wrap_new_SymmetricBetaGaussian_4_15, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_4_15_clone", _wrap_SymmetricBetaGaussian_4_15_clone, METH_O, NULL},
	 { "delete_SymmetricBetaGaussian_4_15", _wrap_delete_SymmetricBetaGaussian_4_15, METH_O, NULL},
	 { "SymmetricBetaGaussian_4_15_classname", _wrap_SymmetricBetaGaussian_4_15_classname, METH_O, NULL},
	 { "SymmetricBetaGaussian_4_15_minQuantileRatio", _wrap_SymmetricBetaGaussian_4_15_minQuantileRatio, METH_NOARGS, NULL},
	 { "SymmetricBetaGaussian_4_15_minDescentDeltaRatio", _wrap_SymmetricBetaGaussian_4_15_minDescentDeltaRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_4_15_fromQuantiles", _wrap_SymmetricBetaGaussian_4_15_fromQuantiles, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_4_15_fromModeAndDeltas", _wrap_SymmetricBetaGaussian_4_15_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_4_15_swigregister", SymmetricBetaGaussian_4_15_swigregister, METH_O, NULL},
	 { "SymmetricBetaGaussian_4_15_swiginit", SymmetricBetaGaussian_4_15_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricBetaGaussian_4_20", _wrap_new_SymmetricBetaGaussian_4_20, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_4_20_clone", _wrap_SymmetricBetaGaussian_4_20_clone, METH_O, NULL},
	 { "delete_SymmetricBetaGaussian_4_20", _wrap_delete_SymmetricBetaGaussian_4_20, METH_O, NULL},
	 { "SymmetricBetaGaussian_4_20_classname", _wrap_SymmetricBetaGaussian_4_20_classname, METH_O, NULL},
	 { "SymmetricBetaGaussian_4_20_minQuantileRatio", _wrap_SymmetricBetaGaussian_4_20_minQuantileRatio, METH_NOARGS, NULL},
	 { "SymmetricBetaGaussian_4_20_minDescentDeltaRatio", _wrap_SymmetricBetaGaussian_4_20_minDescentDeltaRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_4_20_fromQuantiles", _wrap_SymmetricBetaGaussian_4_20_fromQuantiles, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_4_20_fromModeAndDeltas", _wrap_SymmetricBetaGaussian_4_20_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_4_20_swigregister", SymmetricBetaGaussian_4_20_swigregister, METH_O, NULL},
	 { "SymmetricBetaGaussian_4_20_swiginit", SymmetricBetaGaussian_4_20_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricBetaGaussian_4_25", _wrap_new_SymmetricBetaGaussian_4_25, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_4_25_clone", _wrap_SymmetricBetaGaussian_4_25_clone, METH_O, NULL},
	 { "delete_SymmetricBetaGaussian_4_25", _wrap_delete_SymmetricBetaGaussian_4_25, METH_O, NULL},
	 { "SymmetricBetaGaussian_4_25_classname", _wrap_SymmetricBetaGaussian_4_25_classname, METH_O, NULL},
	 { "SymmetricBetaGaussian_4_25_minQuantileRatio", _wrap_SymmetricBetaGaussian_4_25_minQuantileRatio, METH_NOARGS, NULL},
	 { "SymmetricBetaGaussian_4_25_minDescentDeltaRatio", _wrap_SymmetricBetaGaussian_4_25_minDescentDeltaRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_4_25_fromQuantiles", _wrap_SymmetricBetaGaussian_4_25_fromQuantiles, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_4_25_fromModeAndDeltas", _wrap_SymmetricBetaGaussian_4_25_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_4_25_swigregister", SymmetricBetaGaussian_4_25_swigregister, METH_O, NULL},
	 { "SymmetricBetaGaussian_4_25_swiginit", SymmetricBetaGaussian_4_25_swiginit, METH_VARARGS, NULL},
	 { "new_SymmetricBetaGaussian_4_30", _wrap_new_SymmetricBetaGaussian_4_30, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_4_30_clone", _wrap_SymmetricBetaGaussian_4_30_clone, METH_O, NULL},
	 { "delete_SymmetricBetaGaussian_4_30", _wrap_delete_SymmetricBetaGaussian_4_30, METH_O, NULL},
	 { "SymmetricBetaGaussian_4_30_classname", _wrap_SymmetricBetaGaussian_4_30_classname, METH_O, NULL},
	 { "SymmetricBetaGaussian_4_30_minQuantileRatio", _wrap_SymmetricBetaGaussian_4_30_minQuantileRatio, METH_NOARGS, NULL},
	 { "SymmetricBetaGaussian_4_30_minDescentDeltaRatio", _wrap_SymmetricBetaGaussian_4_30_minDescentDeltaRatio, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_4_30_fromQuantiles", _wrap_SymmetricBetaGaussian_4_30_fromQuantiles, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_4_30_fromModeAndDeltas", _wrap_SymmetricBetaGaussian_4_30_fromModeAndDeltas, METH_VARARGS, NULL},
	 { "SymmetricBetaGaussian_4_30_swigregister", SymmetricBetaGaussian_4_30_swigregister, METH_O, NULL},
	 { "SymmetricBetaGaussian_4_30_swiginit", SymmetricBetaGaussian_4_30_swiginit, METH_VARARGS, NULL},
	 { "arrayCumulants", _wrap_arrayCumulants, METH_VARARGS, NULL},
	 { "densityIntegralGL", _wrap_densityIntegralGL, METH_VARARGS, NULL},
	 { "TabulatedDensity1D_clone", _wrap_TabulatedDensity1D_clone, METH_O, NULL},
	 { "delete_TabulatedDensity1D", _wrap_delete_TabulatedDensity1D, METH_O, NULL},
	 { "TabulatedDensity1D_isUnimodal", _wrap_TabulatedDensity1D_isUnimodal, METH_O, NULL},
	 { "TabulatedDensity1D_classname", _wrap_TabulatedDensity1D_classname, METH_O, NULL},
	 { "TabulatedDensity1D_entropy", _wrap_TabulatedDensity1D_entropy, METH_O, NULL},
	 { "TabulatedDensity1D_nCoords", _wrap_TabulatedDensity1D_nCoords, METH_O, NULL},
	 { "new_TabulatedDensity1D", _wrap_new_TabulatedDensity1D, METH_VARARGS, NULL},
	 { "TabulatedDensity1D_swigregister", TabulatedDensity1D_swigregister, METH_O, NULL},
	 { "TabulatedDensity1D_swiginit", TabulatedDensity1D_swiginit, METH_VARARGS, NULL},
	 { "new_LikelihoodAccumulator", _wrap_new_LikelihoodAccumulator, METH_NOARGS, NULL},
	 { "delete_LikelihoodAccumulator", _wrap_delete_LikelihoodAccumulator, METH_O, NULL},
	 { "LikelihoodAccumulator_clone", _wrap_LikelihoodAccumulator_clone, METH_O, NULL},
	 { "LikelihoodAccumulator_empty", _wrap_LikelihoodAccumulator_empty, METH_O, NULL},
	 { "LikelihoodAccumulator_size", _wrap_LikelihoodAccumulator_size, METH_O, NULL},
	 { "LikelihoodAccumulator_getCurve", _wrap_LikelihoodAccumulator_getCurve, METH_VARARGS, NULL},
	 { "LikelihoodAccumulator_factor", _wrap_LikelihoodAccumulator_factor, METH_O, NULL},
	 { "LikelihoodAccumulator_accumulate", _wrap_LikelihoodAccumulator_accumulate, METH_VARARGS, NULL},
	 { "LikelihoodAccumulator___iadd__", _wrap_LikelihoodAccumulator___iadd__, METH_VARARGS, NULL},
	 { "LikelihoodAccumulator___isub__", _wrap_LikelihoodAccumulator___isub__, METH_VARARGS, NULL},
	 { "LikelihoodAccumulator_parMin", _wrap_LikelihoodAccumulator_parMin, METH_O, NULL},
	 { "LikelihoodAccumulator_parMax", _wrap_LikelihoodAccumulator_parMax, METH_O, NULL},
	 { "LikelihoodAccumulator_location", _wrap_LikelihoodAccumulator_location, METH_O, NULL},
	 { "LikelihoodAccumulator_stepSize", _wrap_LikelihoodAccumulator_stepSize, METH_O, NULL},
	 { "LikelihoodAccumulator_maximum", _wrap_LikelihoodAccumulator_maximum, METH_O, NULL},
	 { "LikelihoodAccumulator_argmax", _wrap_LikelihoodAccumulator_argmax, METH_O, NULL},
	 { "LikelihoodAccumulator___call__", _wrap_LikelihoodAccumulator___call__, METH_VARARGS, NULL},
	 { "LikelihoodAccumulator_derivative", _wrap_LikelihoodAccumulator_derivative, METH_VARARGS, NULL},
	 { "LikelihoodAccumulator_secondDerivative", _wrap_LikelihoodAccumulator_secondDerivative, METH_VARARGS, NULL},
	 { "LikelihoodAccumulator_classname", _wrap_LikelihoodAccumulator_classname, METH_O, NULL},
	 { "LikelihoodAccumulator___imul__", _wrap_LikelihoodAccumulator___imul__, METH_VARARGS, NULL},
	 { "LikelihoodAccumulator_swigregister", LikelihoodAccumulator_swigregister, METH_O, NULL},
	 { "LikelihoodAccumulator_swiginit", LikelihoodAccumulator_swiginit, METH_VARARGS, NULL},
	 { "delete_AbsShiftableLogli", _wrap_delete_AbsShiftableLogli, METH_O, NULL},
	 { "AbsShiftableLogli_clone", _wrap_AbsShiftableLogli_clone, METH_O, NULL},
	 { "AbsShiftableLogli_shift", _wrap_AbsShiftableLogli_shift, METH_O, NULL},
	 { "AbsShiftableLogli_factor", _wrap_AbsShiftableLogli_factor, METH_O, NULL},
	 { "AbsShiftableLogli_setShift", _wrap_AbsShiftableLogli_setShift, METH_VARARGS, NULL},
	 { "AbsShiftableLogli_setFactor", _wrap_AbsShiftableLogli_setFactor, METH_VARARGS, NULL},
	 { "AbsShiftableLogli_parMin", _wrap_AbsShiftableLogli_parMin, METH_O, NULL},
	 { "AbsShiftableLogli_parMax", _wrap_AbsShiftableLogli_parMax, METH_O, NULL},
	 { "AbsShiftableLogli_location", _wrap_AbsShiftableLogli_location, METH_O, NULL},
	 { "AbsShiftableLogli_stepSize", _wrap_AbsShiftableLogli_stepSize, METH_O, NULL},
	 { "AbsShiftableLogli_maximum", _wrap_AbsShiftableLogli_maximum, METH_O, NULL},
	 { "AbsShiftableLogli_argmax", _wrap_AbsShiftableLogli_argmax, METH_O, NULL},
	 { "AbsShiftableLogli___call__", _wrap_AbsShiftableLogli___call__, METH_VARARGS, NULL},
	 { "AbsShiftableLogli_derivative", _wrap_AbsShiftableLogli_derivative, METH_VARARGS, NULL},
	 { "AbsShiftableLogli_secondDerivative", _wrap_AbsShiftableLogli_secondDerivative, METH_VARARGS, NULL},
	 { "AbsShiftableLogli_classname", _wrap_AbsShiftableLogli_classname, METH_O, NULL},
	 { "AbsShiftableLogli___imul__", _wrap_AbsShiftableLogli___imul__, METH_VARARGS, NULL},
	 { "AbsShiftableLogli_sigmaPlus", _wrap_AbsShiftableLogli_sigmaPlus, METH_VARARGS, NULL},
	 { "AbsShiftableLogli_sigmaMinus", _wrap_AbsShiftableLogli_sigmaMinus, METH_VARARGS, NULL},
	 { "AbsShiftableLogli_swigregister", AbsShiftableLogli_swigregister, METH_O, NULL},
	 { "moldingVarianceAt0", _wrap_moldingVarianceAt0, METH_VARARGS, NULL},
	 { "new_SymmetrizedParabola", _wrap_new_SymmetrizedParabola, METH_VARARGS, NULL},
	 { "delete_SymmetrizedParabola", _wrap_delete_SymmetrizedParabola, METH_O, NULL},
	 { "SymmetrizedParabola_clone", _wrap_SymmetrizedParabola_clone, METH_O, NULL},
	 { "SymmetrizedParabola_stepSize", _wrap_SymmetrizedParabola_stepSize, METH_O, NULL},
	 { "SymmetrizedParabola_classname", _wrap_SymmetrizedParabola_classname, METH_O, NULL},
	 { "SymmetrizedParabola_posteriorMean", _wrap_SymmetrizedParabola_posteriorMean, METH_O, NULL},
	 { "SymmetrizedParabola_posteriorVariance", _wrap_SymmetrizedParabola_posteriorVariance, METH_O, NULL},
	 { "SymmetrizedParabola_swigregister", SymmetrizedParabola_swigregister, METH_O, NULL},
	 { "SymmetrizedParabola_swiginit", SymmetrizedParabola_swiginit, METH_VARARGS, NULL},
	 { "new_BrokenParabola", _wrap_new_BrokenParabola, METH_VARARGS, NULL},
	 { "delete_BrokenParabola", _wrap_delete_BrokenParabola, METH_O, NULL},
	 { "BrokenParabola_clone", _wrap_BrokenParabola_clone, METH_O, NULL},
	 { "BrokenParabola_stepSize", _wrap_BrokenParabola_stepSize, METH_O, NULL},
	 { "BrokenParabola_classname", _wrap_BrokenParabola_classname, METH_O, NULL},
	 { "BrokenParabola_swigregister", BrokenParabola_swigregister, METH_O, NULL},
	 { "BrokenParabola_swiginit", BrokenParabola_swiginit, METH_VARARGS, NULL},
	 { "new_TruncatedCubicLogli", _wrap_new_TruncatedCubicLogli, METH_VARARGS, NULL},
	 { "delete_TruncatedCubicLogli", _wrap_delete_TruncatedCubicLogli, METH_O, NULL},
	 { "TruncatedCubicLogli_clone", _wrap_TruncatedCubicLogli_clone, METH_O, NULL},
	 { "TruncatedCubicLogli_stepSize", _wrap_TruncatedCubicLogli_stepSize, METH_O, NULL},
	 { "TruncatedCubicLogli_classname", _wrap_TruncatedCubicLogli_classname, METH_O, NULL},
	 { "TruncatedCubicLogli_swigregister", TruncatedCubicLogli_swigregister, METH_O, NULL},
	 { "TruncatedCubicLogli_swiginit", TruncatedCubicLogli_swiginit, METH_VARARGS, NULL},
	 { "new_LogarithmicLogli", _wrap_new_LogarithmicLogli, METH_VARARGS, NULL},
	 { "delete_LogarithmicLogli", _wrap_delete_LogarithmicLogli, METH_O, NULL},
	 { "LogarithmicLogli_clone", _wrap_LogarithmicLogli_clone, METH_O, NULL},
	 { "LogarithmicLogli_stepSize", _wrap_LogarithmicLogli_stepSize, METH_O, NULL},
	 { "LogarithmicLogli_classname", _wrap_LogarithmicLogli_classname, METH_O, NULL},
	 { "LogarithmicLogli_swigregister", LogarithmicLogli_swigregister, METH_O, NULL},
	 { "LogarithmicLogli_swiginit", LogarithmicLogli_swiginit, METH_VARARGS, NULL},
	 { "new_GeneralisedPoisson", _wrap_new_GeneralisedPoisson, METH_VARARGS, NULL},
	 { "delete_GeneralisedPoisson", _wrap_delete_GeneralisedPoisson, METH_O, NULL},
	 { "GeneralisedPoisson_clone", _wrap_GeneralisedPoisson_clone, METH_O, NULL},
	 { "GeneralisedPoisson_stepSize", _wrap_GeneralisedPoisson_stepSize, METH_O, NULL},
	 { "GeneralisedPoisson_classname", _wrap_GeneralisedPoisson_classname, METH_O, NULL},
	 { "GeneralisedPoisson_posteriorMean", _wrap_GeneralisedPoisson_posteriorMean, METH_O, NULL},
	 { "GeneralisedPoisson_posteriorVariance", _wrap_GeneralisedPoisson_posteriorVariance, METH_O, NULL},
	 { "GeneralisedPoisson_swigregister", GeneralisedPoisson_swigregister, METH_O, NULL},
	 { "GeneralisedPoisson_swiginit", GeneralisedPoisson_swiginit, METH_VARARGS, NULL},
	 { "new_ConstrainedQuartic", _wrap_new_ConstrainedQuartic, METH_VARARGS, NULL},
	 { "delete_ConstrainedQuartic", _wrap_delete_ConstrainedQuartic, METH_O, NULL},
	 { "ConstrainedQuartic_clone", _wrap_ConstrainedQuartic_clone, METH_O, NULL},
	 { "ConstrainedQuartic_alpha", _wrap_ConstrainedQuartic_alpha, METH_O, NULL},
	 { "ConstrainedQuartic_beta", _wrap_ConstrainedQuartic_beta, METH_O, NULL},
	 { "ConstrainedQuartic_stepSize", _wrap_ConstrainedQuartic_stepSize, METH_O, NULL},
	 { "ConstrainedQuartic_classname", _wrap_ConstrainedQuartic_classname, METH_O, NULL},
	 { "ConstrainedQuartic_swigregister", ConstrainedQuartic_swigregister, METH_O, NULL},
	 { "ConstrainedQuartic_swiginit", ConstrainedQuartic_swiginit, METH_VARARGS, NULL},
	 { "new_MoldedQuartic", _wrap_new_MoldedQuartic, METH_VARARGS, NULL},
	 { "delete_MoldedQuartic", _wrap_delete_MoldedQuartic, METH_O, NULL},
	 { "MoldedQuartic_clone", _wrap_MoldedQuartic_clone, METH_O, NULL},
	 { "MoldedQuartic_a", _wrap_MoldedQuartic_a, METH_O, NULL},
	 { "MoldedQuartic_b", _wrap_MoldedQuartic_b, METH_O, NULL},
	 { "MoldedQuartic_c", _wrap_MoldedQuartic_c, METH_O, NULL},
	 { "MoldedQuartic_stepSize", _wrap_MoldedQuartic_stepSize, METH_O, NULL},
	 { "MoldedQuartic_classname", _wrap_MoldedQuartic_classname, METH_O, NULL},
	 { "MoldedQuartic_swigregister", MoldedQuartic_swigregister, METH_O, NULL},
	 { "MoldedQuartic_swiginit", MoldedQuartic_swiginit, METH_VARARGS, NULL},
	 { "new_MatchedQuintic", _wrap_new_MatchedQuintic, METH_VARARGS, NULL},
	 { "delete_MatchedQuintic", _wrap_delete_MatchedQuintic, METH_O, NULL},
	 { "MatchedQuintic_clone", _wrap_MatchedQuintic_clone, METH_O, NULL},
	 { "MatchedQuintic_a", _wrap_MatchedQuintic_a, METH_O, NULL},
	 { "MatchedQuintic_b", _wrap_MatchedQuintic_b, METH_O, NULL},
	 { "MatchedQuintic_c", _wrap_MatchedQuintic_c, METH_O, NULL},
	 { "MatchedQuintic_d", _wrap_MatchedQuintic_d, METH_O, NULL},
	 { "MatchedQuintic_stepSize", _wrap_MatchedQuintic_stepSize, METH_O, NULL},
	 { "MatchedQuintic_classname", _wrap_MatchedQuintic_classname, METH_O, NULL},
	 { "MatchedQuintic_swigregister", MatchedQuintic_swigregister, METH_O, NULL},
	 { "MatchedQuintic_swiginit", MatchedQuintic_swiginit, METH_VARARGS, NULL},
	 { "delete_DoubleQuartic", _wrap_delete_DoubleQuartic, METH_O, NULL},
	 { "DoubleQuartic_clone", _wrap_DoubleQuartic_clone, METH_O, NULL},
	 { "DoubleQuartic_stepSize", _wrap_DoubleQuartic_stepSize, METH_O, NULL},
	 { "DoubleQuartic_classname", _wrap_DoubleQuartic_classname, METH_O, NULL},
	 { "DoubleQuartic_swigregister", DoubleQuartic_swigregister, METH_O, NULL},
	 { "new_MoldedDoubleQuartic", _wrap_new_MoldedDoubleQuartic, METH_VARARGS, NULL},
	 { "delete_MoldedDoubleQuartic", _wrap_delete_MoldedDoubleQuartic, METH_O, NULL},
	 { "MoldedDoubleQuartic_clone", _wrap_MoldedDoubleQuartic_clone, METH_O, NULL},
	 { "MoldedDoubleQuartic_classname", _wrap_MoldedDoubleQuartic_classname, METH_O, NULL},
	 { "MoldedDoubleQuartic_swigregister", MoldedDoubleQuartic_swigregister, METH_O, NULL},
	 { "MoldedDoubleQuartic_swiginit", MoldedDoubleQuartic_swiginit, METH_VARARGS, NULL},
	 { "new_SimpleDoubleQuartic", _wrap_new_SimpleDoubleQuartic, METH_VARARGS, NULL},
	 { "delete_SimpleDoubleQuartic", _wrap_delete_SimpleDoubleQuartic, METH_O, NULL},
	 { "SimpleDoubleQuartic_clone", _wrap_SimpleDoubleQuartic_clone, METH_O, NULL},
	 { "SimpleDoubleQuartic_classname", _wrap_SimpleDoubleQuartic_classname, METH_O, NULL},
	 { "SimpleDoubleQuartic_swigregister", SimpleDoubleQuartic_swigregister, METH_O, NULL},
	 { "SimpleDoubleQuartic_swiginit", SimpleDoubleQuartic_swiginit, METH_VARARGS, NULL},
	 { "delete_DoubleQuintic", _wrap_delete_DoubleQuintic, METH_O, NULL},
	 { "DoubleQuintic_clone", _wrap_DoubleQuintic_clone, METH_O, NULL},
	 { "DoubleQuintic_stepSize", _wrap_DoubleQuintic_stepSize, METH_O, NULL},
	 { "DoubleQuintic_classname", _wrap_DoubleQuintic_classname, METH_O, NULL},
	 { "DoubleQuintic_swigregister", DoubleQuintic_swigregister, METH_O, NULL},
	 { "new_MoldedDoubleQuintic", _wrap_new_MoldedDoubleQuintic, METH_VARARGS, NULL},
	 { "delete_MoldedDoubleQuintic", _wrap_delete_MoldedDoubleQuintic, METH_O, NULL},
	 { "MoldedDoubleQuintic_clone", _wrap_MoldedDoubleQuintic_clone, METH_O, NULL},
	 { "MoldedDoubleQuintic_classname", _wrap_MoldedDoubleQuintic_classname, METH_O, NULL},
	 { "MoldedDoubleQuintic_swigregister", MoldedDoubleQuintic_swigregister, METH_O, NULL},
	 { "MoldedDoubleQuintic_swiginit", MoldedDoubleQuintic_swiginit, METH_VARARGS, NULL},
	 { "new_SimpleDoubleQuintic", _wrap_new_SimpleDoubleQuintic, METH_VARARGS, NULL},
	 { "delete_SimpleDoubleQuintic", _wrap_delete_SimpleDoubleQuintic, METH_O, NULL},
	 { "SimpleDoubleQuintic_clone", _wrap_SimpleDoubleQuintic_clone, METH_O, NULL},
	 { "SimpleDoubleQuintic_classname", _wrap_SimpleDoubleQuintic_classname, METH_O, NULL},
	 { "SimpleDoubleQuintic_swigregister", SimpleDoubleQuintic_swigregister, METH_O, NULL},
	 { "SimpleDoubleQuintic_swiginit", SimpleDoubleQuintic_swiginit, METH_VARARGS, NULL},
	 { "new_Interpolated7thDegree", _wrap_new_Interpolated7thDegree, METH_VARARGS, NULL},
	 { "delete_Interpolated7thDegree", _wrap_delete_Interpolated7thDegree, METH_O, NULL},
	 { "Interpolated7thDegree_clone", _wrap_Interpolated7thDegree_clone, METH_O, NULL},
	 { "Interpolated7thDegree_stepSize", _wrap_Interpolated7thDegree_stepSize, METH_O, NULL},
	 { "Interpolated7thDegree_classname", _wrap_Interpolated7thDegree_classname, METH_O, NULL},
	 { "Interpolated7thDegree_swigregister", Interpolated7thDegree_swigregister, METH_O, NULL},
	 { "Interpolated7thDegree_swiginit", Interpolated7thDegree_swiginit, METH_VARARGS, NULL},
	 { "new_VariableSigmaLogli", _wrap_new_VariableSigmaLogli, METH_VARARGS, NULL},
	 { "delete_VariableSigmaLogli", _wrap_delete_VariableSigmaLogli, METH_O, NULL},
	 { "VariableSigmaLogli_clone", _wrap_VariableSigmaLogli_clone, METH_O, NULL},
	 { "VariableSigmaLogli_stepSize", _wrap_VariableSigmaLogli_stepSize, METH_O, NULL},
	 { "VariableSigmaLogli_classname", _wrap_VariableSigmaLogli_classname, METH_O, NULL},
	 { "VariableSigmaLogli_swigregister", VariableSigmaLogli_swigregister, METH_O, NULL},
	 { "VariableSigmaLogli_swiginit", VariableSigmaLogli_swiginit, METH_VARARGS, NULL},
	 { "new_VariableVarianceLogli", _wrap_new_VariableVarianceLogli, METH_VARARGS, NULL},
	 { "delete_VariableVarianceLogli", _wrap_delete_VariableVarianceLogli, METH_O, NULL},
	 { "VariableVarianceLogli_clone", _wrap_VariableVarianceLogli_clone, METH_O, NULL},
	 { "VariableVarianceLogli_stepSize", _wrap_VariableVarianceLogli_stepSize, METH_O, NULL},
	 { "VariableVarianceLogli_classname", _wrap_VariableVarianceLogli_classname, METH_O, NULL},
	 { "VariableVarianceLogli_swigregister", VariableVarianceLogli_swigregister, METH_O, NULL},
	 { "VariableVarianceLogli_swiginit", VariableVarianceLogli_swiginit, METH_VARARGS, NULL},
	 { "new_VariableLogSigma", _wrap_new_VariableLogSigma, METH_VARARGS, NULL},
	 { "delete_VariableLogSigma", _wrap_delete_VariableLogSigma, METH_O, NULL},
	 { "VariableLogSigma_clone", _wrap_VariableLogSigma_clone, METH_O, NULL},
	 { "VariableLogSigma_stepSize", _wrap_VariableLogSigma_stepSize, METH_O, NULL},
	 { "VariableLogSigma_classname", _wrap_VariableLogSigma_classname, METH_O, NULL},
	 { "VariableLogSigma_swigregister", VariableLogSigma_swigregister, METH_O, NULL},
	 { "VariableLogSigma_swiginit", VariableLogSigma_swiginit, METH_VARARGS, NULL},
	 { "delete_DoubleCubicLogSigma", _wrap_delete_DoubleCubicLogSigma, METH_O, NULL},
	 { "DoubleCubicLogSigma_clone", _wrap_DoubleCubicLogSigma_clone, METH_O, NULL},
	 { "DoubleCubicLogSigma_stepSize", _wrap_DoubleCubicLogSigma_stepSize, METH_O, NULL},
	 { "DoubleCubicLogSigma_classname", _wrap_DoubleCubicLogSigma_classname, METH_O, NULL},
	 { "DoubleCubicLogSigma_swigregister", DoubleCubicLogSigma_swigregister, METH_O, NULL},
	 { "new_MoldedCubicLogSigma", _wrap_new_MoldedCubicLogSigma, METH_VARARGS, NULL},
	 { "delete_MoldedCubicLogSigma", _wrap_delete_MoldedCubicLogSigma, METH_O, NULL},
	 { "MoldedCubicLogSigma_clone", _wrap_MoldedCubicLogSigma_clone, METH_O, NULL},
	 { "MoldedCubicLogSigma_classname", _wrap_MoldedCubicLogSigma_classname, METH_O, NULL},
	 { "MoldedCubicLogSigma_getEffectiveSigmaAt0", _wrap_MoldedCubicLogSigma_getEffectiveSigmaAt0, METH_VARARGS, NULL},
	 { "MoldedCubicLogSigma_swigregister", MoldedCubicLogSigma_swigregister, METH_O, NULL},
	 { "MoldedCubicLogSigma_swiginit", MoldedCubicLogSigma_swiginit, METH_VARARGS, NULL},
	 { "new_QuinticLogSigma", _wrap_new_QuinticLogSigma, METH_VARARGS, NULL},
	 { "delete_QuinticLogSigma", _wrap_delete_QuinticLogSigma, METH_O, NULL},
	 { "QuinticLogSigma_clone", _wrap_QuinticLogSigma_clone, METH_O, NULL},
	 { "QuinticLogSigma_stepSize", _wrap_QuinticLogSigma_stepSize, METH_O, NULL},
	 { "QuinticLogSigma_classname", _wrap_QuinticLogSigma_classname, METH_O, NULL},
	 { "QuinticLogSigma_swigregister", QuinticLogSigma_swigregister, METH_O, NULL},
	 { "QuinticLogSigma_swiginit", QuinticLogSigma_swiginit, METH_VARARGS, NULL},
	 { "new_PDGLogli", _wrap_new_PDGLogli, METH_VARARGS, NULL},
	 { "delete_PDGLogli", _wrap_delete_PDGLogli, METH_O, NULL},
	 { "PDGLogli_clone", _wrap_PDGLogli_clone, METH_O, NULL},
	 { "PDGLogli_stepSize", _wrap_PDGLogli_stepSize, METH_O, NULL},
	 { "PDGLogli_classname", _wrap_PDGLogli_classname, METH_O, NULL},
	 { "PDGLogli_swigregister", PDGLogli_swigregister, METH_O, NULL},
	 { "PDGLogli_swiginit", PDGLogli_swiginit, METH_VARARGS, NULL},
	 { "new_LogLogisticBeta", _wrap_new_LogLogisticBeta, METH_VARARGS, NULL},
	 { "delete_LogLogisticBeta", _wrap_delete_LogLogisticBeta, METH_O, NULL},
	 { "LogLogisticBeta_clone", _wrap_LogLogisticBeta_clone, METH_O, NULL},
	 { "LogLogisticBeta_stepSize", _wrap_LogLogisticBeta_stepSize, METH_O, NULL},
	 { "LogLogisticBeta_classname", _wrap_LogLogisticBeta_classname, METH_O, NULL},
	 { "LogLogisticBeta_swigregister", LogLogisticBeta_swigregister, METH_O, NULL},
	 { "LogLogisticBeta_swiginit", LogLogisticBeta_swiginit, METH_VARARGS, NULL},
	 { "new_DistributionLogli", _wrap_new_DistributionLogli, METH_VARARGS, NULL},
	 { "delete_DistributionLogli", _wrap_delete_DistributionLogli, METH_O, NULL},
	 { "DistributionLogli_clone", _wrap_DistributionLogli_clone, METH_O, NULL},
	 { "DistributionLogli_stepSize", _wrap_DistributionLogli_stepSize, METH_O, NULL},
	 { "DistributionLogli_classname", _wrap_DistributionLogli_classname, METH_O, NULL},
	 { "DistributionLogli_x0", _wrap_DistributionLogli_x0, METH_O, NULL},
	 { "DistributionLogli_distribution", _wrap_DistributionLogli_distribution, METH_O, NULL},
	 { "DistributionLogli_posteriorMean", _wrap_DistributionLogli_posteriorMean, METH_O, NULL},
	 { "DistributionLogli_posteriorVariance", _wrap_DistributionLogli_posteriorVariance, METH_O, NULL},
	 { "DistributionLogli_swigregister", DistributionLogli_swigregister, METH_O, NULL},
	 { "DistributionLogli_swiginit", DistributionLogli_swiginit, METH_VARARGS, NULL},
	 { "new_ConservativeSpline", _wrap_new_ConservativeSpline, METH_VARARGS, NULL},
	 { "delete_ConservativeSpline", _wrap_delete_ConservativeSpline, METH_O, NULL},
	 { "ConservativeSpline_clone", _wrap_ConservativeSpline_clone, METH_O, NULL},
	 { "ConservativeSpline_stepSize", _wrap_ConservativeSpline_stepSize, METH_O, NULL},
	 { "ConservativeSpline_classname", _wrap_ConservativeSpline_classname, METH_O, NULL},
	 { "ConservativeSpline_limitingFactor", _wrap_ConservativeSpline_limitingFactor, METH_O, NULL},
	 { "ConservativeSpline_maxDerivLimitFactor", _wrap_ConservativeSpline_maxDerivLimitFactor, METH_VARARGS, NULL},
	 { "ConservativeSpline_swigregister", ConservativeSpline_swigregister, METH_O, NULL},
	 { "ConservativeSpline_swiginit", ConservativeSpline_swiginit, METH_VARARGS, NULL},
	 { "new_ConservativeSigma05", _wrap_new_ConservativeSigma05, METH_VARARGS, NULL},
	 { "delete_ConservativeSigma05", _wrap_delete_ConservativeSigma05, METH_O, NULL},
	 { "ConservativeSigma05_clone", _wrap_ConservativeSigma05_clone, METH_O, NULL},
	 { "ConservativeSigma05_classname", _wrap_ConservativeSigma05_classname, METH_O, NULL},
	 { "ConservativeSigma05_swigregister", ConservativeSigma05_swigregister, METH_O, NULL},
	 { "ConservativeSigma05_swiginit", ConservativeSigma05_swiginit, METH_VARARGS, NULL},
	 { "new_ConservativeSigma10", _wrap_new_ConservativeSigma10, METH_VARARGS, NULL},
	 { "delete_ConservativeSigma10", _wrap_delete_ConservativeSigma10, METH_O, NULL},
	 { "ConservativeSigma10_clone", _wrap_ConservativeSigma10_clone, METH_O, NULL},
	 { "ConservativeSigma10_classname", _wrap_ConservativeSigma10_classname, METH_O, NULL},
	 { "ConservativeSigma10_swigregister", ConservativeSigma10_swigregister, METH_O, NULL},
	 { "ConservativeSigma10_swiginit", ConservativeSigma10_swiginit, METH_VARARGS, NULL},
	 { "new_ConservativeSigma15", _wrap_new_ConservativeSigma15, METH_VARARGS, NULL},
	 { "delete_ConservativeSigma15", _wrap_delete_ConservativeSigma15, METH_O, NULL},
	 { "ConservativeSigma15_clone", _wrap_ConservativeSigma15_clone, METH_O, NULL},
	 { "ConservativeSigma15_classname", _wrap_ConservativeSigma15_classname, METH_O, NULL},
	 { "ConservativeSigma15_swigregister", ConservativeSigma15_swigregister, METH_O, NULL},
	 { "ConservativeSigma15_swiginit", ConservativeSigma15_swiginit, METH_VARARGS, NULL},
	 { "new_ConservativeSigma20", _wrap_new_ConservativeSigma20, METH_VARARGS, NULL},
	 { "delete_ConservativeSigma20", _wrap_delete_ConservativeSigma20, METH_O, NULL},
	 { "ConservativeSigma20_clone", _wrap_ConservativeSigma20_clone, METH_O, NULL},
	 { "ConservativeSigma20_classname", _wrap_ConservativeSigma20_classname, METH_O, NULL},
	 { "ConservativeSigma20_swigregister", ConservativeSigma20_swigregister, METH_O, NULL},
	 { "ConservativeSigma20_swiginit", ConservativeSigma20_swiginit, METH_VARARGS, NULL},
	 { "new_ConservativeSigmaMax", _wrap_new_ConservativeSigmaMax, METH_VARARGS, NULL},
	 { "delete_ConservativeSigmaMax", _wrap_delete_ConservativeSigmaMax, METH_O, NULL},
	 { "ConservativeSigmaMax_clone", _wrap_ConservativeSigmaMax_clone, METH_O, NULL},
	 { "ConservativeSigmaMax_classname", _wrap_ConservativeSigmaMax_classname, METH_O, NULL},
	 { "ConservativeSigmaMax_swigregister", ConservativeSigmaMax_swigregister, METH_O, NULL},
	 { "ConservativeSigmaMax_swiginit", ConservativeSigmaMax_swiginit, METH_VARARGS, NULL},
	 { "new_EquidistantGrid", _wrap_new_EquidistantGrid, METH_VARARGS, NULL},
	 { "EquidistantGrid_nCoords", _wrap_EquidistantGrid_nCoords, METH_O, NULL},
	 { "EquidistantGrid_min", _wrap_EquidistantGrid_min, METH_O, NULL},
	 { "EquidistantGrid_max", _wrap_EquidistantGrid_max, METH_O, NULL},
	 { "EquidistantGrid_getInterval", _wrap_EquidistantGrid_getInterval, METH_VARARGS, NULL},
	 { "EquidistantGrid_coords", _wrap_EquidistantGrid_coords, METH_O, NULL},
	 { "EquidistantGrid_coordinate", _wrap_EquidistantGrid_coordinate, METH_VARARGS, NULL},
	 { "EquidistantGrid_length", _wrap_EquidistantGrid_length, METH_O, NULL},
	 { "EquidistantGrid_isUniform", _wrap_EquidistantGrid_isUniform, METH_O, NULL},
	 { "EquidistantGrid_nIntervals", _wrap_EquidistantGrid_nIntervals, METH_O, NULL},
	 { "EquidistantGrid_intervalWidth", _wrap_EquidistantGrid_intervalWidth, METH_VARARGS, NULL},
	 { "delete_EquidistantGrid", _wrap_delete_EquidistantGrid, METH_O, NULL},
	 { "EquidistantGrid_swigregister", EquidistantGrid_swigregister, METH_O, NULL},
	 { "EquidistantGrid_swiginit", EquidistantGrid_swiginit, METH_VARARGS, NULL},
	 { "kullbackLeiblerDivergence", _wrap_kullbackLeiblerDivergence, METH_VARARGS, NULL},
	 { "new_GaussLegendreQuadrature", _wrap_new_GaussLegendreQuadrature, METH_O, NULL},
	 { "delete_GaussLegendreQuadrature", _wrap_delete_GaussLegendreQuadrature, METH_O, NULL},
	 { "GaussLegendreQuadrature_npoints", _wrap_GaussLegendreQuadrature_npoints, METH_O, NULL},
	 { "GaussLegendreQuadrature_isAllowed", _wrap_GaussLegendreQuadrature_isAllowed, METH_O, NULL},
	 { "GaussLegendreQuadrature_allowedNPonts", _wrap_GaussLegendreQuadrature_allowedNPonts, METH_NOARGS, NULL},
	 { "GaussLegendreQuadrature_minimalExactRule", _wrap_GaussLegendreQuadrature_minimalExactRule, METH_O, NULL},
	 { "GaussLegendreQuadrature_integrate", _wrap_GaussLegendreQuadrature_integrate, METH_VARARGS, NULL},
	 { "GaussLegendreQuadrature_swigregister", GaussLegendreQuadrature_swigregister, METH_O, NULL},
	 { "GaussLegendreQuadrature_swiginit", GaussLegendreQuadrature_swiginit, METH_VARARGS, NULL},
	 { "new_DiscretizedConvolution", _wrap_new_DiscretizedConvolution, METH_VARARGS, NULL},
	 { "DiscretizedConvolution_normalize", _wrap_DiscretizedConvolution_normalize, METH_O, NULL},
	 { "DiscretizedConvolution___call__", _wrap_DiscretizedConvolution___call__, METH_VARARGS, NULL},
	 { "DiscretizedConvolution_densityIntegral", _wrap_DiscretizedConvolution_densityIntegral, METH_O, NULL},
	 { "DiscretizedConvolution_xmin", _wrap_DiscretizedConvolution_xmin, METH_O, NULL},
	 { "DiscretizedConvolution_xmax", _wrap_DiscretizedConvolution_xmax, METH_O, NULL},
	 { "DiscretizedConvolution_nIntervals", _wrap_DiscretizedConvolution_nIntervals, METH_O, NULL},
	 { "DiscretizedConvolution_intervalWidth", _wrap_DiscretizedConvolution_intervalWidth, METH_O, NULL},
	 { "DiscretizedConvolution_isNormalized", _wrap_DiscretizedConvolution_isNormalized, METH_O, NULL},
	 { "DiscretizedConvolution_convolvedValue", _wrap_DiscretizedConvolution_convolvedValue, METH_VARARGS, NULL},
	 { "DiscretizedConvolution_coordinateAt", _wrap_DiscretizedConvolution_coordinateAt, METH_VARARGS, NULL},
	 { "DiscretizedConvolution_constructTabulatedDensity", _wrap_DiscretizedConvolution_constructTabulatedDensity, METH_O, NULL},
	 { "DiscretizedConvolution_constructInterpolatedDensity", _wrap_DiscretizedConvolution_constructInterpolatedDensity, METH_O, NULL},
	 { "delete_DiscretizedConvolution", _wrap_delete_DiscretizedConvolution, METH_O, NULL},
	 { "DiscretizedConvolution_swigregister", DiscretizedConvolution_swigregister, METH_O, NULL},
	 { "DiscretizedConvolution_swiginit", DiscretizedConvolution_swiginit, METH_VARARGS, NULL},
	 { "new_TruncatedDistribution1D", _wrap_new_TruncatedDistribution1D, METH_VARARGS, NULL},
	 { "TruncatedDistribution1D_clone", _wrap_TruncatedDistribution1D_clone, METH_O, NULL},
	 { "delete_TruncatedDistribution1D", _wrap_delete_TruncatedDistribution1D, METH_O, NULL},
	 { "TruncatedDistribution1D_density", _wrap_TruncatedDistribution1D_density, METH_VARARGS, NULL},
	 { "TruncatedDistribution1D_isDensityContinuous", _wrap_TruncatedDistribution1D_isDensityContinuous, METH_O, NULL},
	 { "TruncatedDistribution1D_isNonNegative", _wrap_TruncatedDistribution1D_isNonNegative, METH_O, NULL},
	 { "TruncatedDistribution1D_isUnimodal", _wrap_TruncatedDistribution1D_isUnimodal, METH_O, NULL},
	 { "TruncatedDistribution1D_densityDerivative", _wrap_TruncatedDistribution1D_densityDerivative, METH_VARARGS, NULL},
	 { "TruncatedDistribution1D_cdf", _wrap_TruncatedDistribution1D_cdf, METH_VARARGS, NULL},
	 { "TruncatedDistribution1D_exceedance", _wrap_TruncatedDistribution1D_exceedance, METH_VARARGS, NULL},
	 { "TruncatedDistribution1D_quantile", _wrap_TruncatedDistribution1D_quantile, METH_VARARGS, NULL},
	 { "TruncatedDistribution1D_invExceedance", _wrap_TruncatedDistribution1D_invExceedance, METH_VARARGS, NULL},
	 { "TruncatedDistribution1D_cumulant", _wrap_TruncatedDistribution1D_cumulant, METH_VARARGS, NULL},
	 { "TruncatedDistribution1D_mode", _wrap_TruncatedDistribution1D_mode, METH_O, NULL},
	 { "TruncatedDistribution1D_descentDelta", _wrap_TruncatedDistribution1D_descentDelta, METH_VARARGS, NULL},
	 { "TruncatedDistribution1D_classname", _wrap_TruncatedDistribution1D_classname, METH_O, NULL},
	 { "TruncatedDistribution1D_swigregister", TruncatedDistribution1D_swigregister, METH_O, NULL},
	 { "TruncatedDistribution1D_swiginit", TruncatedDistribution1D_swiginit, METH_VARARGS, NULL},
	 { "new_Interval", _wrap_new_Interval, METH_VARARGS, NULL},
	 { "Interval_min", _wrap_Interval_min, METH_O, NULL},
	 { "Interval_max", _wrap_Interval_max, METH_O, NULL},
	 { "Interval_type", _wrap_Interval_type, METH_O, NULL},
	 { "Interval_length", _wrap_Interval_length, METH_O, NULL},
	 { "Interval_midpoint", _wrap_Interval_midpoint, METH_O, NULL},
	 { "Interval_empty", _wrap_Interval_empty, METH_O, NULL},
	 { "Interval_includesLeft", _wrap_Interval_includesLeft, METH_O, NULL},
	 { "Interval_includesRight", _wrap_Interval_includesRight, METH_O, NULL},
	 { "Interval_contains", _wrap_Interval_contains, METH_VARARGS, NULL},
	 { "Interval_distance", _wrap_Interval_distance, METH_VARARGS, NULL},
	 { "Interval_overlap", _wrap_Interval_overlap, METH_VARARGS, NULL},
	 { "Interval_fromInclusions", _wrap_Interval_fromInclusions, METH_VARARGS, NULL},
	 { "delete_Interval", _wrap_delete_Interval, METH_O, NULL},
	 { "Interval_swigregister", Interval_swigregister, METH_O, NULL},
	 { "Interval_swiginit", Interval_swiginit, METH_VARARGS, NULL},
	 { "new_MixtureModel1D", _wrap_new_MixtureModel1D, METH_NOARGS, NULL},
	 { "MixtureModel1D_clone", _wrap_MixtureModel1D_clone, METH_O, NULL},
	 { "delete_MixtureModel1D", _wrap_delete_MixtureModel1D, METH_O, NULL},
	 { "MixtureModel1D_add", _wrap_MixtureModel1D_add, METH_VARARGS, NULL},
	 { "MixtureModel1D_nComponents", _wrap_MixtureModel1D_nComponents, METH_O, NULL},
	 { "MixtureModel1D_getComponent", _wrap_MixtureModel1D_getComponent, METH_VARARGS, NULL},
	 { "MixtureModel1D_getWeight", _wrap_MixtureModel1D_getWeight, METH_VARARGS, NULL},
	 { "MixtureModel1D_density", _wrap_MixtureModel1D_density, METH_VARARGS, NULL},
	 { "MixtureModel1D_isDensityContinuous", _wrap_MixtureModel1D_isDensityContinuous, METH_O, NULL},
	 { "MixtureModel1D_isUnimodal", _wrap_MixtureModel1D_isUnimodal, METH_O, NULL},
	 { "MixtureModel1D_densityDerivative", _wrap_MixtureModel1D_densityDerivative, METH_VARARGS, NULL},
	 { "MixtureModel1D_cdf", _wrap_MixtureModel1D_cdf, METH_VARARGS, NULL},
	 { "MixtureModel1D_exceedance", _wrap_MixtureModel1D_exceedance, METH_VARARGS, NULL},
	 { "MixtureModel1D_quantile", _wrap_MixtureModel1D_quantile, METH_VARARGS, NULL},
	 { "MixtureModel1D_invExceedance", _wrap_MixtureModel1D_invExceedance, METH_VARARGS, NULL},
	 { "MixtureModel1D_cumulant", _wrap_MixtureModel1D_cumulant, METH_VARARGS, NULL},
	 { "MixtureModel1D_mode", _wrap_MixtureModel1D_mode, METH_O, NULL},
	 { "MixtureModel1D_descentDelta", _wrap_MixtureModel1D_descentDelta, METH_VARARGS, NULL},
	 { "MixtureModel1D_random", _wrap_MixtureModel1D_random, METH_VARARGS, NULL},
	 { "MixtureModel1D_classname", _wrap_MixtureModel1D_classname, METH_O, NULL},
	 { "MixtureModel1D_swigregister", MixtureModel1D_swigregister, METH_O, NULL},
	 { "MixtureModel1D_swiginit", MixtureModel1D_swiginit, METH_VARARGS, NULL},
	 { "new_DoubleFunctor1", _wrap_new_DoubleFunctor1, METH_O, NULL},
	 { "DoubleFunctor1___call__", _wrap_DoubleFunctor1___call__, METH_VARARGS, NULL},
	 { "delete_DoubleFunctor1", _wrap_delete_DoubleFunctor1, METH_O, NULL},
	 { "DoubleFunctor1_swigregister", DoubleFunctor1_swigregister, METH_O, NULL},
	 { "DoubleFunctor1_swiginit", DoubleFunctor1_swiginit, METH_VARARGS, NULL},
	 { "new_LongDoubleFunctor1", _wrap_new_LongDoubleFunctor1, METH_O, NULL},
	 { "LongDoubleFunctor1___call__", _wrap_LongDoubleFunctor1___call__, METH_VARARGS, NULL},
	 { "delete_LongDoubleFunctor1", _wrap_delete_LongDoubleFunctor1, METH_O, NULL},
	 { "LongDoubleFunctor1_swigregister", LongDoubleFunctor1_swigregister, METH_O, NULL},
	 { "LongDoubleFunctor1_swiginit", LongDoubleFunctor1_swiginit, METH_VARARGS, NULL},
	 { "new_AsymmetricEstimate", _wrap_new_AsymmetricEstimate, METH_VARARGS, NULL},
	 { "AsymmetricEstimate_location", _wrap_AsymmetricEstimate_location, METH_O, NULL},
	 { "AsymmetricEstimate_sigmaPlus", _wrap_AsymmetricEstimate_sigmaPlus, METH_O, NULL},
	 { "AsymmetricEstimate_sigmaMinus", _wrap_AsymmetricEstimate_sigmaMinus, METH_O, NULL},
	 { "AsymmetricEstimate_errorType", _wrap_AsymmetricEstimate_errorType, METH_O, NULL},
	 { "AsymmetricEstimate_intervalEstimate", _wrap_AsymmetricEstimate_intervalEstimate, METH_O, NULL},
	 { "AsymmetricEstimate_width", _wrap_AsymmetricEstimate_width, METH_O, NULL},
	 { "AsymmetricEstimate_asymmetry", _wrap_AsymmetricEstimate_asymmetry, METH_O, NULL},
	 { "AsymmetricEstimate___repr__", _wrap_AsymmetricEstimate___repr__, METH_O, NULL},
	 { "AsymmetricEstimate___eq__", _wrap_AsymmetricEstimate___eq__, METH_VARARGS, NULL},
	 { "AsymmetricEstimate___ne__", _wrap_AsymmetricEstimate___ne__, METH_VARARGS, NULL},
	 { "delete_AsymmetricEstimate", _wrap_delete_AsymmetricEstimate, METH_O, NULL},
	 { "AsymmetricEstimate_swigregister", AsymmetricEstimate_swigregister, METH_O, NULL},
	 { "AsymmetricEstimate_swiginit", AsymmetricEstimate_swiginit, METH_VARARGS, NULL},
	 { "parseAsymmetricEstimate", _wrap_parseAsymmetricEstimate, METH_O, NULL},
	 { "readAsymmetricEstimates", _wrap_readAsymmetricEstimates, METH_O, NULL},
	 { "new_DistributionModel1DCopy", _wrap_new_DistributionModel1DCopy, METH_VARARGS, NULL},
	 { "DistributionModel1DCopy_clone", _wrap_DistributionModel1DCopy_clone, METH_O, NULL},
	 { "delete_DistributionModel1DCopy", _wrap_delete_DistributionModel1DCopy, METH_O, NULL},
	 { "DistributionModel1DCopy_theCopy", _wrap_DistributionModel1DCopy_theCopy, METH_O, NULL},
	 { "DistributionModel1DCopy_density", _wrap_DistributionModel1DCopy_density, METH_VARARGS, NULL},
	 { "DistributionModel1DCopy_isDensityContinuous", _wrap_DistributionModel1DCopy_isDensityContinuous, METH_O, NULL},
	 { "DistributionModel1DCopy_isNonNegative", _wrap_DistributionModel1DCopy_isNonNegative, METH_O, NULL},
	 { "DistributionModel1DCopy_isUnimodal", _wrap_DistributionModel1DCopy_isUnimodal, METH_O, NULL},
	 { "DistributionModel1DCopy_densityDerivative", _wrap_DistributionModel1DCopy_densityDerivative, METH_VARARGS, NULL},
	 { "DistributionModel1DCopy_cdf", _wrap_DistributionModel1DCopy_cdf, METH_VARARGS, NULL},
	 { "DistributionModel1DCopy_exceedance", _wrap_DistributionModel1DCopy_exceedance, METH_VARARGS, NULL},
	 { "DistributionModel1DCopy_quantile", _wrap_DistributionModel1DCopy_quantile, METH_VARARGS, NULL},
	 { "DistributionModel1DCopy_invExceedance", _wrap_DistributionModel1DCopy_invExceedance, METH_VARARGS, NULL},
	 { "DistributionModel1DCopy_cumulant", _wrap_DistributionModel1DCopy_cumulant, METH_VARARGS, NULL},
	 { "DistributionModel1DCopy_mode", _wrap_DistributionModel1DCopy_mode, METH_O, NULL},
	 { "DistributionModel1DCopy_descentDelta", _wrap_DistributionModel1DCopy_descentDelta, METH_VARARGS, NULL},
	 { "DistributionModel1DCopy_classname", _wrap_DistributionModel1DCopy_classname, METH_O, NULL},
	 { "DistributionModel1DCopy_random", _wrap_DistributionModel1DCopy_random, METH_VARARGS, NULL},
	 { "DistributionModel1DCopy_qWidth", _wrap_DistributionModel1DCopy_qWidth, METH_O, NULL},
	 { "DistributionModel1DCopy_qAsymmetry", _wrap_DistributionModel1DCopy_qAsymmetry, METH_O, NULL},
	 { "DistributionModel1DCopy_swigregister", DistributionModel1DCopy_swigregister, METH_O, NULL},
	 { "DistributionModel1DCopy_swiginit", DistributionModel1DCopy_swiginit, METH_VARARGS, NULL},
	 { "getSeed", _wrap_getSeed, METH_O, NULL},
	 { "delete_DRand48", _wrap_delete_DRand48, METH_O, NULL},
	 { "DRand48___call__", _wrap_DRand48___call__, METH_O, NULL},
	 { "new_DRand48", _wrap_new_DRand48, METH_NOARGS, NULL},
	 { "DRand48_swigregister", DRand48_swigregister, METH_O, NULL},
	 { "DRand48_swiginit", DRand48_swiginit, METH_VARARGS, NULL},
	 { "new_MersenneTwister32", _wrap_new_MersenneTwister32, METH_VARARGS, NULL},
	 { "delete_MersenneTwister32", _wrap_delete_MersenneTwister32, METH_O, NULL},
	 { "MersenneTwister32___call__", _wrap_MersenneTwister32___call__, METH_O, NULL},
	 { "MersenneTwister32_swigregister", MersenneTwister32_swigregister, METH_O, NULL},
	 { "MersenneTwister32_swiginit", MersenneTwister32_swiginit, METH_VARARGS, NULL},
	 { "new_MersenneTwister64", _wrap_new_MersenneTwister64, METH_VARARGS, NULL},
	 { "delete_MersenneTwister64", _wrap_delete_MersenneTwister64, METH_O, NULL},
	 { "MersenneTwister64___call__", _wrap_MersenneTwister64___call__, METH_O, NULL},
	 { "MersenneTwister64_swigregister", MersenneTwister64_swigregister, METH_O, NULL},
	 { "MersenneTwister64_swiginit", MersenneTwister64_swiginit, METH_VARARGS, NULL},
	 { "scanFunctor1D", _wrap_scanFunctor1D, METH_VARARGS, NULL},
	 { "empiricalCdfOutline", _wrap_empiricalCdfOutline, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};

static PyMethodDef SwigMethods_proxydocs[] = {
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_asepy__MersenneTwister32To_p_ase__AbsRNG(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsRNG *)  ((asepy::MersenneTwister32 *) x));
}
static void *_p_asepy__MersenneTwister64To_p_ase__AbsRNG(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsRNG *)  ((asepy::MersenneTwister64 *) x));
}
static void *_p_asepy__DRand48To_p_ase__AbsRNG(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsRNG *)  ((asepy::DRand48 *) x));
}
static void *_p_ase__MoldedDoubleQuinticTo_p_ase__DoubleQuintic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::DoubleQuintic *)  ((ase::MoldedDoubleQuintic *) x));
}
static void *_p_ase__SimpleDoubleQuinticTo_p_ase__DoubleQuintic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::DoubleQuintic *)  ((ase::SimpleDoubleQuintic *) x));
}
static void *_p_ase__ConservativeSigma20To_p_ase__ConservativeSpline(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::ConservativeSpline *)  ((ase::ConservativeSigma20 *) x));
}
static void *_p_ase__ConservativeSigma15To_p_ase__ConservativeSpline(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::ConservativeSpline *)  ((ase::ConservativeSigma15 *) x));
}
static void *_p_ase__ConservativeSigma10To_p_ase__ConservativeSpline(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::ConservativeSpline *)  ((ase::ConservativeSigma10 *) x));
}
static void *_p_ase__ConservativeSigma05To_p_ase__ConservativeSpline(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::ConservativeSpline *)  ((ase::ConservativeSigma05 *) x));
}
static void *_p_ase__ConservativeSigmaMaxTo_p_ase__ConservativeSpline(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::ConservativeSpline *)  ((ase::ConservativeSigmaMax *) x));
}
static void *_p_ase__ConservativeSigma05To_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *) (ase::ConservativeSpline *) ((ase::ConservativeSigma05 *) x));
}
static void *_p_ase__VariableSigmaLogliTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *)  ((ase::VariableSigmaLogli *) x));
}
static void *_p_ase__SimpleDoubleQuinticTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *) (ase::DoubleQuintic *) ((ase::SimpleDoubleQuintic *) x));
}
static void *_p_ase__MoldedDoubleQuinticTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *) (ase::DoubleQuintic *) ((ase::MoldedDoubleQuintic *) x));
}
static void *_p_ase__DoubleQuinticTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *)  ((ase::DoubleQuintic *) x));
}
static void *_p_ase__MatchedQuinticTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *)  ((ase::MatchedQuintic *) x));
}
static void *_p_ase__ConservativeSplineTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *)  ((ase::ConservativeSpline *) x));
}
static void *_p_ase__LogarithmicLogliTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *)  ((ase::LogarithmicLogli *) x));
}
static void *_p_ase__TruncatedCubicLogliTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *)  ((ase::TruncatedCubicLogli *) x));
}
static void *_p_ase__BrokenParabolaTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *)  ((ase::BrokenParabola *) x));
}
static void *_p_ase__SymmetrizedParabolaTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *)  ((ase::SymmetrizedParabola *) x));
}
static void *_p_ase__ConservativeSigma20To_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *) (ase::ConservativeSpline *) ((ase::ConservativeSigma20 *) x));
}
static void *_p_ase__ConservativeSigmaMaxTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *) (ase::ConservativeSpline *) ((ase::ConservativeSigmaMax *) x));
}
static void *_p_ase__VariableVarianceLogliTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *)  ((ase::VariableVarianceLogli *) x));
}
static void *_p_ase__ConservativeSigma10To_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *) (ase::ConservativeSpline *) ((ase::ConservativeSigma10 *) x));
}
static void *_p_ase__VariableLogSigmaTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *)  ((ase::VariableLogSigma *) x));
}
static void *_p_ase__DoubleCubicLogSigmaTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *)  ((ase::DoubleCubicLogSigma *) x));
}
static void *_p_ase__MoldedCubicLogSigmaTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *) (ase::DoubleCubicLogSigma *) ((ase::MoldedCubicLogSigma *) x));
}
static void *_p_ase__QuinticLogSigmaTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *)  ((ase::QuinticLogSigma *) x));
}
static void *_p_ase__DistributionLogliTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *)  ((ase::DistributionLogli *) x));
}
static void *_p_ase__GeneralisedPoissonTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *)  ((ase::GeneralisedPoisson *) x));
}
static void *_p_ase__LogLogisticBetaTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *)  ((ase::LogLogisticBeta *) x));
}
static void *_p_ase__PDGLogliTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *)  ((ase::PDGLogli *) x));
}
static void *_p_ase__SimpleDoubleQuarticTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *) (ase::DoubleQuartic *) ((ase::SimpleDoubleQuartic *) x));
}
static void *_p_ase__MoldedDoubleQuarticTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *) (ase::DoubleQuartic *) ((ase::MoldedDoubleQuartic *) x));
}
static void *_p_ase__DoubleQuarticTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *)  ((ase::DoubleQuartic *) x));
}
static void *_p_ase__MoldedQuarticTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *)  ((ase::MoldedQuartic *) x));
}
static void *_p_ase__ConstrainedQuarticTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *)  ((ase::ConstrainedQuartic *) x));
}
static void *_p_ase__ConservativeSigma15To_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *) (ase::ConservativeSpline *) ((ase::ConservativeSigma15 *) x));
}
static void *_p_ase__Interpolated7thDegreeTo_p_ase__AbsShiftableLogli(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsShiftableLogli *)  ((ase::Interpolated7thDegree *) x));
}
static void *_p_ase__MoldedDoubleQuarticTo_p_ase__DoubleQuartic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::DoubleQuartic *)  ((ase::MoldedDoubleQuartic *) x));
}
static void *_p_ase__SimpleDoubleQuarticTo_p_ase__DoubleQuartic(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::DoubleQuartic *)  ((ase::SimpleDoubleQuartic *) x));
}
static void *_p_ase__DoubleCubicGaussianTo_p_ase__OPATGaussianT_ase__SmoothDoubleCubicT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > *)  ((ase::DoubleCubicGaussian *) x));
}
static void *_p_ase__SymmetricBetaGaussianTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)  ((ase::SymmetricBetaGaussian *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_2U_25U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) (ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 2U,25U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_1U_25U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) (ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 1U,25U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_3U_25U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) (ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 3U,25U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_4U_25U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) (ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 4U,25U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_3U_15U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) (ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 3U,15U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_2U_15U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) (ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 2U,15U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_1U_15U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) (ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 1U,15U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_4U_15U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) (ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 4U,15U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_2U_30U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) (ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 2U,30U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_1U_30U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) (ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 1U,30U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_3U_30U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) (ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 3U,30U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_4U_30U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) (ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 4U,30U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_3U_20U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) (ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 3U,20U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_2U_20U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) (ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 2U,20U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_1U_20U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) (ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 1U,20U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_4U_20U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) (ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 4U,20U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_3U_10U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) (ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 3U,10U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_2U_10U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) (ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 2U,10U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_1U_10U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) (ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 1U,10U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_4U_10U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) (ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 4U,10U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_3U_25U_tTo_p_ase__SymmetricBetaGaussian(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::SymmetricBetaGaussian *)  ((ase::SymmetricBetaGaussian_p_h< 3U,25U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_2U_25U_tTo_p_ase__SymmetricBetaGaussian(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::SymmetricBetaGaussian *)  ((ase::SymmetricBetaGaussian_p_h< 2U,25U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_1U_25U_tTo_p_ase__SymmetricBetaGaussian(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::SymmetricBetaGaussian *)  ((ase::SymmetricBetaGaussian_p_h< 1U,25U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_4U_25U_tTo_p_ase__SymmetricBetaGaussian(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::SymmetricBetaGaussian *)  ((ase::SymmetricBetaGaussian_p_h< 4U,25U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_3U_15U_tTo_p_ase__SymmetricBetaGaussian(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::SymmetricBetaGaussian *)  ((ase::SymmetricBetaGaussian_p_h< 3U,15U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_2U_15U_tTo_p_ase__SymmetricBetaGaussian(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::SymmetricBetaGaussian *)  ((ase::SymmetricBetaGaussian_p_h< 2U,15U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_1U_15U_tTo_p_ase__SymmetricBetaGaussian(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::SymmetricBetaGaussian *)  ((ase::SymmetricBetaGaussian_p_h< 1U,15U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_4U_15U_tTo_p_ase__SymmetricBetaGaussian(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::SymmetricBetaGaussian *)  ((ase::SymmetricBetaGaussian_p_h< 4U,15U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_2U_30U_tTo_p_ase__SymmetricBetaGaussian(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::SymmetricBetaGaussian *)  ((ase::SymmetricBetaGaussian_p_h< 2U,30U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_1U_30U_tTo_p_ase__SymmetricBetaGaussian(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::SymmetricBetaGaussian *)  ((ase::SymmetricBetaGaussian_p_h< 1U,30U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_3U_30U_tTo_p_ase__SymmetricBetaGaussian(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::SymmetricBetaGaussian *)  ((ase::SymmetricBetaGaussian_p_h< 3U,30U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_4U_30U_tTo_p_ase__SymmetricBetaGaussian(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::SymmetricBetaGaussian *)  ((ase::SymmetricBetaGaussian_p_h< 4U,30U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_3U_20U_tTo_p_ase__SymmetricBetaGaussian(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::SymmetricBetaGaussian *)  ((ase::SymmetricBetaGaussian_p_h< 3U,20U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_2U_20U_tTo_p_ase__SymmetricBetaGaussian(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::SymmetricBetaGaussian *)  ((ase::SymmetricBetaGaussian_p_h< 2U,20U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_1U_20U_tTo_p_ase__SymmetricBetaGaussian(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::SymmetricBetaGaussian *)  ((ase::SymmetricBetaGaussian_p_h< 1U,20U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_4U_20U_tTo_p_ase__SymmetricBetaGaussian(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::SymmetricBetaGaussian *)  ((ase::SymmetricBetaGaussian_p_h< 4U,20U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_3U_10U_tTo_p_ase__SymmetricBetaGaussian(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::SymmetricBetaGaussian *)  ((ase::SymmetricBetaGaussian_p_h< 3U,10U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_2U_10U_tTo_p_ase__SymmetricBetaGaussian(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::SymmetricBetaGaussian *)  ((ase::SymmetricBetaGaussian_p_h< 2U,10U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_1U_10U_tTo_p_ase__SymmetricBetaGaussian(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::SymmetricBetaGaussian *)  ((ase::SymmetricBetaGaussian_p_h< 1U,10U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_4U_10U_tTo_p_ase__SymmetricBetaGaussian(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::SymmetricBetaGaussian *)  ((ase::SymmetricBetaGaussian_p_h< 4U,10U > *) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &))  ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &))  ((std::basic_ostringstream< char,std::char_traits< char >,std::allocator< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)) (std::basic_iostream< char > *) ((std::basic_stringstream< char,std::char_traits< char >,std::allocator< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &))  ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &))  ((std::basic_istringstream< char,std::char_traits< char >,std::allocator< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)) (std::basic_iostream< char > *) ((std::basic_stringstream< char,std::char_traits< char >,std::allocator< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)) x));
}
static void *_p_ase__MoldedCubicLogSigmaTo_p_ase__DoubleCubicLogSigma(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::DoubleCubicLogSigma *)  ((ase::MoldedCubicLogSigma *) x));
}
static void *_p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *) ((std::basic_ostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *) ((std::basic_istream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *)(std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *)  ((std::basic_ios< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *)(std::basic_istream< char > *) ((std::basic_istringstream< char,std::char_traits< char >,std::allocator< char > > *) x));
}
static void *_p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *)(std::basic_ostream< char > *) ((std::basic_ostringstream< char,std::char_traits< char >,std::allocator< char > > *) x));
}
static void *_p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base *) (std::basic_ios< char > *)(std::basic_istream< char > *)(std::basic_iostream< char > *) ((std::basic_stringstream< char,std::char_traits< char >,std::allocator< char > > *) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *) ((std::basic_ostream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *) ((std::basic_istream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *)(std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &))  ((std::basic_ios< char,std::char_traits< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *)(std::basic_istream< char > *) ((std::basic_istringstream< char,std::char_traits< char >,std::allocator< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *)(std::basic_ostream< char > *) ((std::basic_ostringstream< char,std::char_traits< char >,std::allocator< char > > &(*)(std::ios_base &)) x));
}
static void *_p_f_r_std__ios_base__r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::ios_base &(*)(std::ios_base &)) (std::basic_ios< char > *)(std::basic_istream< char > *)(std::basic_iostream< char > *) ((std::basic_stringstream< char,std::char_traits< char >,std::allocator< char > > &(*)(std::ios_base &)) x));
}
static void *_p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *)  ((std::basic_ostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *)  ((std::basic_istream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *) (std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *) (std::basic_istream< char > *) ((std::basic_istringstream< char,std::char_traits< char >,std::allocator< char > > *) x));
}
static void *_p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *) (std::basic_ostream< char > *) ((std::basic_ostringstream< char,std::char_traits< char >,std::allocator< char > > *) x));
}
static void *_p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > *) (std::basic_istream< char > *)(std::basic_iostream< char > *) ((std::basic_stringstream< char,std::char_traits< char >,std::allocator< char > > *) x));
}
static void *_p_ase__SkewNormalTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *)  ((ase::SkewNormal *) x));
}
static void *_p_ase__LogNormalTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *)  ((ase::LogNormal *) x));
}
static void *_p_ase__JohnsonSbTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *)  ((ase::JohnsonSb *) x));
}
static void *_p_ase__SymmetricBetaGaussianTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) ((ase::SymmetricBetaGaussian *) x));
}
static void *_p_ase__GaussianTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *)  ((ase::Gaussian *) x));
}
static void *_p_ase__DimidiatedGaussianTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *)  ((ase::DimidiatedGaussian *) x));
}
static void *_p_ase__DistortedGaussianTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *)  ((ase::DistortedGaussian *) x));
}
static void *_p_ase__RailwayGaussianTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > *) ((ase::RailwayGaussian *) x));
}
static void *_p_ase__DoubleCubicGaussianTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > *) ((ase::DoubleCubicGaussian *) x));
}
static void *_p_ase__QVWGaussianTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *)  ((ase::QVWGaussian *) x));
}
static void *_p_ase__InterpolatedDensity1DTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *)  ((ase::InterpolatedDensity1D *) x));
}
static void *_p_ase__TabulatedDensity1DTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *)  ((ase::TabulatedDensity1D *) x));
}
static void *_p_ase__OPATGaussianT_ase__ParabolicRailwayCurveT_long_double_t_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *)  ((ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > *) x));
}
static void *_p_ase__JohnsonSystemTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *)  ((ase::JohnsonSystem *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_2U_30U_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 2U,30U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_1U_30U_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 1U,30U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_3U_30U_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 3U,30U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_4U_30U_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 4U,30U > *) x));
}
static void *_p_ase__ExponentialDistributionTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *)  ((ase::ExponentialDistribution *) x));
}
static void *_p_ase__UniformDistributionTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *)  ((ase::UniformDistribution *) x));
}
static void *_p_ase__FechnerDistributionTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *)  ((ase::FechnerDistribution *) x));
}
static void *_p_ase__GammaDistributionTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *)  ((ase::GammaDistribution *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_2U_20U_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 2U,20U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_1U_20U_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 1U,20U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_3U_20U_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 3U,20U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_4U_20U_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 4U,20U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_3U_10U_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 3U,10U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_2U_10U_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 2U,10U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_1U_10U_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 1U,10U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_2U_25U_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 2U,25U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_1U_25U_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 1U,25U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_3U_25U_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 3U,25U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_4U_10U_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 4U,10U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_4U_25U_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 4U,25U > *) x));
}
static void *_p_ase__OPATGaussianT_ase__SmoothDoubleCubicT_long_double_t_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *)  ((ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_3U_15U_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 3U,15U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_2U_15U_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 2U,15U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_1U_15U_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 1U,15U > *) x));
}
static void *_p_ase__JohnsonSuTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *)  ((ase::JohnsonSu *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_4U_15U_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *) (ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 4U,15U > *) x));
}
static void *_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_tTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *)  ((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) x));
}
static void *_p_ase__LegendreDistro1DTo_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *)  ((ase::LegendreDistro1D *) x));
}
static void *_p_ase__EdgeworthExpansion3To_p_ase__AbsLocationScaleFamily(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLocationScaleFamily *)  ((ase::EdgeworthExpansion3 *) x));
}
static void *_p_ase__RailwayGaussianTo_p_ase__OPATGaussianT_ase__ParabolicRailwayCurveT_long_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > *)  ((ase::RailwayGaussian *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > *)  ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > *)  ((std::basic_istringstream< char,std::char_traits< char >,std::allocator< char > > *) x));
}
static void *_p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_istream< char,std::char_traits< char > > *) (std::basic_iostream< char > *) ((std::basic_stringstream< char,std::char_traits< char >,std::allocator< char > > *) x));
}
static void *_p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > *)  ((std::basic_iostream< char,std::char_traits< char > > *) x));
}
static void *_p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > *)  ((std::basic_ostringstream< char,std::char_traits< char >,std::allocator< char > > *) x));
}
static void *_p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ostream< char,std::char_traits< char > > *) (std::basic_iostream< char > *) ((std::basic_stringstream< char,std::char_traits< char >,std::allocator< char > > *) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &))  ((std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &))  ((std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) (std::basic_istream< char > *) ((std::basic_iostream< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) (std::basic_istream< char > *) ((std::basic_istringstream< char,std::char_traits< char >,std::allocator< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) (std::basic_ostream< char > *) ((std::basic_ostringstream< char,std::char_traits< char >,std::allocator< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) (std::basic_istream< char > *)(std::basic_iostream< char > *) ((std::basic_stringstream< char,std::char_traits< char >,std::allocator< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)) x));
}
static void *_p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::basic_iostream< char,std::char_traits< char > > *)  ((std::basic_stringstream< char,std::char_traits< char >,std::allocator< char > > *) x));
}
static void *_p_ase__TruncatedDistribution1DTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *)  ((ase::TruncatedDistribution1D *) x));
}
static void *_p_ase__SkewNormalTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *) ((ase::SkewNormal *) x));
}
static void *_p_ase__LogNormalTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *) ((ase::LogNormal *) x));
}
static void *_p_ase__JohnsonSbTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *) ((ase::JohnsonSb *) x));
}
static void *_p_ase__SymmetricBetaGaussianTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) ((ase::SymmetricBetaGaussian *) x));
}
static void *_p_ase__GaussianTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *) ((ase::Gaussian *) x));
}
static void *_p_ase__DimidiatedGaussianTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *) ((ase::DimidiatedGaussian *) x));
}
static void *_p_ase__DistortedGaussianTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *) ((ase::DistortedGaussian *) x));
}
static void *_p_ase__RailwayGaussianTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > *) ((ase::RailwayGaussian *) x));
}
static void *_p_ase__DoubleCubicGaussianTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > *) ((ase::DoubleCubicGaussian *) x));
}
static void *_p_ase__QVWGaussianTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *) ((ase::QVWGaussian *) x));
}
static void *_p_ase__MixtureModel1DTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *)  ((ase::MixtureModel1D *) x));
}
static void *_p_ase__InterpolatedDensity1DTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *) ((ase::InterpolatedDensity1D *) x));
}
static void *_p_ase__TabulatedDensity1DTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *) ((ase::TabulatedDensity1D *) x));
}
static void *_p_ase__OPATGaussianT_ase__ParabolicRailwayCurveT_long_double_t_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *) ((ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > *) x));
}
static void *_p_ase__JohnsonSystemTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *) ((ase::JohnsonSystem *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_2U_30U_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 2U,30U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_1U_30U_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 1U,30U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_3U_30U_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 3U,30U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_4U_30U_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 4U,30U > *) x));
}
static void *_p_ase__AbsLocationScaleFamilyTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *)  ((ase::AbsLocationScaleFamily *) x));
}
static void *_p_ase__ExponentialDistributionTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *) ((ase::ExponentialDistribution *) x));
}
static void *_p_ase__UniformDistributionTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *) ((ase::UniformDistribution *) x));
}
static void *_p_ase__EmpiricalDistributionTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *)  ((ase::EmpiricalDistribution *) x));
}
static void *_p_ase__FechnerDistributionTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *) ((ase::FechnerDistribution *) x));
}
static void *_p_ase__GammaDistributionTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *) ((ase::GammaDistribution *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_2U_20U_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 2U,20U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_1U_20U_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 1U,20U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_3U_20U_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 3U,20U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_4U_20U_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 4U,20U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_2U_10U_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 2U,10U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_1U_10U_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 1U,10U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_2U_25U_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 2U,25U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_1U_25U_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 1U,25U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_3U_10U_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 3U,10U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_3U_25U_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 3U,25U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_4U_10U_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 4U,10U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_4U_25U_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 4U,25U > *) x));
}
static void *_p_ase__OPATGaussianT_ase__SmoothDoubleCubicT_long_double_t_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *) ((ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_2U_15U_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 2U,15U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_1U_15U_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 1U,15U > *) x));
}
static void *_p_ase__JohnsonSuTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *) ((ase::JohnsonSu *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_3U_15U_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 3U,15U > *) x));
}
static void *_p_ase__SymmetricBetaGaussian_p_hT_4U_15U_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *)(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *)(ase::SymmetricBetaGaussian *) ((ase::SymmetricBetaGaussian_p_h< 4U,15U > *) x));
}
static void *_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_tTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *) ((ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *) x));
}
static void *_p_ase__LegendreDistro1DTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *) ((ase::LegendreDistro1D *) x));
}
static void *_p_ase__EdgeworthExpansion3To_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *) (ase::AbsLocationScaleFamily *) ((ase::EdgeworthExpansion3 *) x));
}
static void *_p_ase__DistributionModel1DCopyTo_p_ase__AbsDistributionModel1D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsDistributionModel1D *)  ((ase::DistributionModel1DCopy *) x));
}
static void *_p_ase__LikelihoodCurveCopyTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *)  ((ase::LikelihoodCurveCopy *) x));
}
static void *_p_ase__VariableSigmaLogliTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *) ((ase::VariableSigmaLogli *) x));
}
static void *_p_ase__DistributionLogliTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *) ((ase::DistributionLogli *) x));
}
static void *_p_ase__PoissonLogliTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *)  ((ase::PoissonLogli *) x));
}
static void *_p_ase__SymmetrizedParabolaTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *) ((ase::SymmetrizedParabola *) x));
}
static void *_p_ase__BrokenParabolaTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *) ((ase::BrokenParabola *) x));
}
static void *_p_ase__GeneralisedPoissonTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *) ((ase::GeneralisedPoisson *) x));
}
static void *_p_ase__TruncatedCubicLogliTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *) ((ase::TruncatedCubicLogli *) x));
}
static void *_p_ase__LogarithmicLogliTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *) ((ase::LogarithmicLogli *) x));
}
static void *_p_ase__SimpleDoubleQuinticTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *)(ase::DoubleQuintic *) ((ase::SimpleDoubleQuintic *) x));
}
static void *_p_ase__MoldedDoubleQuinticTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *)(ase::DoubleQuintic *) ((ase::MoldedDoubleQuintic *) x));
}
static void *_p_ase__DoubleQuinticTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *) ((ase::DoubleQuintic *) x));
}
static void *_p_ase__MatchedQuinticTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *) ((ase::MatchedQuintic *) x));
}
static void *_p_ase__VariableVarianceLogliTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *) ((ase::VariableVarianceLogli *) x));
}
static void *_p_ase__Interpolated7thDegreeTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *) ((ase::Interpolated7thDegree *) x));
}
static void *_p_ase__PDGLogliTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *) ((ase::PDGLogli *) x));
}
static void *_p_ase__ConservativeSplineTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *) ((ase::ConservativeSpline *) x));
}
static void *_p_ase__LikelihoodAccumulatorTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *)  ((ase::LikelihoodAccumulator *) x));
}
static void *_p_ase__ConservativeSigmaMaxTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *)(ase::ConservativeSpline *) ((ase::ConservativeSigmaMax *) x));
}
static void *_p_ase__QuinticLogSigmaTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *) ((ase::QuinticLogSigma *) x));
}
static void *_p_ase__MoldedCubicLogSigmaTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *)(ase::DoubleCubicLogSigma *) ((ase::MoldedCubicLogSigma *) x));
}
static void *_p_ase__DoubleCubicLogSigmaTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *) ((ase::DoubleCubicLogSigma *) x));
}
static void *_p_ase__VariableLogSigmaTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *) ((ase::VariableLogSigma *) x));
}
static void *_p_ase__ConservativeSigma20To_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *)(ase::ConservativeSpline *) ((ase::ConservativeSigma20 *) x));
}
static void *_p_ase__SimpleDoubleQuarticTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *)(ase::DoubleQuartic *) ((ase::SimpleDoubleQuartic *) x));
}
static void *_p_ase__MoldedDoubleQuarticTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *)(ase::DoubleQuartic *) ((ase::MoldedDoubleQuartic *) x));
}
static void *_p_ase__ConstrainedQuarticTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *) ((ase::ConstrainedQuartic *) x));
}
static void *_p_ase__MoldedQuarticTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *) ((ase::MoldedQuartic *) x));
}
static void *_p_ase__DoubleQuarticTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *) ((ase::DoubleQuartic *) x));
}
static void *_p_ase__AbsShiftableLogliTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *)  ((ase::AbsShiftableLogli *) x));
}
static void *_p_ase__LogLogisticBetaTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *) ((ase::LogLogisticBeta *) x));
}
static void *_p_ase__ConservativeSigma10To_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *)(ase::ConservativeSpline *) ((ase::ConservativeSigma10 *) x));
}
static void *_p_ase__ConservativeSigma15To_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *)(ase::ConservativeSpline *) ((ase::ConservativeSigma15 *) x));
}
static void *_p_ase__CubicHermiteInterpolatorEGTo_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *)  ((ase::CubicHermiteInterpolatorEG *) x));
}
static void *_p_ase__ConservativeSigma05To_p_ase__AbsLogLikelihoodCurve(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ase::AbsLogLikelihoodCurve *) (ase::AbsShiftableLogli *)(ase::ConservativeSpline *) ((ase::ConservativeSigma05 *) x));
}
static swig_type_info _swigt__p_Base = {"_p_Base", "Base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Transform = {"_p_Transform", "Transform *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__AbsDistributionModel1D = {"_p_ase__AbsDistributionModel1D", "ase::AbsDistributionModel1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__AbsLocationScaleFamily = {"_p_ase__AbsLocationScaleFamily", "ase::AbsLocationScaleFamily *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__AbsLogLikelihoodCurve = {"_p_ase__AbsLogLikelihoodCurve", "ase::AbsLogLikelihoodCurve *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__AbsRNG = {"_p_ase__AbsRNG", "ase::AbsRNG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__AbsShiftableLogli = {"_p_ase__AbsShiftableLogli", "ase::AbsShiftableLogli *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__AsymmetricEstimate = {"_p_ase__AsymmetricEstimate", "ase::AsymmetricEstimate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__BrokenParabola = {"_p_ase__BrokenParabola", "ase::BrokenParabola *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__CdfFunctor1D = {"_p_ase__CdfFunctor1D", "ase::CdfFunctor1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__ConservativeSigma05 = {"_p_ase__ConservativeSigma05", "ase::ConservativeSigma05 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__ConservativeSigma10 = {"_p_ase__ConservativeSigma10", "ase::ConservativeSigma10 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__ConservativeSigma15 = {"_p_ase__ConservativeSigma15", "ase::ConservativeSigma15 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__ConservativeSigma20 = {"_p_ase__ConservativeSigma20", "ase::ConservativeSigma20 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__ConservativeSigmaMax = {"_p_ase__ConservativeSigmaMax", "ase::ConservativeSigmaMax *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__ConservativeSpline = {"_p_ase__ConservativeSpline", "ase::ConservativeSpline *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__ConstrainedQuartic = {"_p_ase__ConstrainedQuartic", "ase::ConstrainedQuartic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__CubicHermiteInterpolatorEG = {"_p_ase__CubicHermiteInterpolatorEG", "ase::CubicHermiteInterpolatorEG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__DensityDerivativeFunctor1D = {"_p_ase__DensityDerivativeFunctor1D", "ase::DensityDerivativeFunctor1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__DensityFunctor1D = {"_p_ase__DensityFunctor1D", "ase::DensityFunctor1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__DerivativeFunctorHelperT_ase__DoubleCubicInner_t = {"_p_ase__DerivativeFunctorHelperT_ase__DoubleCubicInner_t", "ase::DerivativeFunctorHelper< ase::DoubleCubicInner > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__DerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t = {"_p_ase__DerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t", "ase::DerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__DerivativeFunctorHelperT_ase__QuinticInner_t = {"_p_ase__DerivativeFunctorHelperT_ase__QuinticInner_t", "ase::DerivativeFunctorHelper< ase::QuinticInner > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__DerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t = {"_p_ase__DerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t", "ase::DerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__DerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t = {"_p_ase__DerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t", "ase::DerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__DerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t = {"_p_ase__DerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t", "ase::DerivativeFunctorHelper< ase::TransitionCubic< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__DimidiatedGaussian = {"_p_ase__DimidiatedGaussian", "ase::DimidiatedGaussian *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__DiscretizedConvolution = {"_p_ase__DiscretizedConvolution", "ase::DiscretizedConvolution *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__DistortedGaussian = {"_p_ase__DistortedGaussian", "ase::DistortedGaussian *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__DistributionLogli = {"_p_ase__DistributionLogli", "ase::DistributionLogli *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__DistributionModel1DCopy = {"_p_ase__DistributionModel1DCopy", "ase::DistributionModel1DCopy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__DoubleCubicGaussian = {"_p_ase__DoubleCubicGaussian", "ase::DoubleCubicGaussian *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__DoubleCubicInner = {"_p_ase__DoubleCubicInner", "ase::DoubleCubicInner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__DoubleCubicLogSigma = {"_p_ase__DoubleCubicLogSigma", "ase::DoubleCubicLogSigma *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__DoubleFunctor1 = {"_p_ase__DoubleFunctor1", "ase::DoubleFunctor1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__DoubleQuartic = {"_p_ase__DoubleQuartic", "ase::DoubleQuartic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__DoubleQuintic = {"_p_ase__DoubleQuintic", "ase::DoubleQuintic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__EdgeworthExpansion3 = {"_p_ase__EdgeworthExpansion3", "ase::EdgeworthExpansion3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__EmpiricalDistribution = {"_p_ase__EmpiricalDistribution", "ase::EmpiricalDistribution *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__EntropyFunctor1D = {"_p_ase__EntropyFunctor1D", "ase::EntropyFunctor1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__EquidistantGrid = {"_p_ase__EquidistantGrid", "ase::EquidistantGrid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__ExceedanceFunctor1D = {"_p_ase__ExceedanceFunctor1D", "ase::ExceedanceFunctor1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__ExponentialDistribution = {"_p_ase__ExponentialDistribution", "ase::ExponentialDistribution *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__FechnerDistribution = {"_p_ase__FechnerDistribution", "ase::FechnerDistribution *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__FunctorTimesShiftedXHelperT_ase__GaussianConvolution_t = {"_p_ase__FunctorTimesShiftedXHelperT_ase__GaussianConvolution_t", "ase::FunctorTimesShiftedXHelper< ase::GaussianConvolution > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__FunctorTimesShiftedXHelperT_ase__NumericalConvolution_t = {"_p_ase__FunctorTimesShiftedXHelperT_ase__NumericalConvolution_t", "ase::FunctorTimesShiftedXHelper< ase::NumericalConvolution > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__FunctorTimesShiftedXRatioHelperT_ase__GaussianConvolution_t = {"_p_ase__FunctorTimesShiftedXRatioHelperT_ase__GaussianConvolution_t", "ase::FunctorTimesShiftedXRatioHelper< ase::GaussianConvolution > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__FunctorTimesShiftedXRatioHelperT_ase__NumericalConvolution_t = {"_p_ase__FunctorTimesShiftedXRatioHelperT_ase__NumericalConvolution_t", "ase::FunctorTimesShiftedXRatioHelper< ase::NumericalConvolution > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__GammaDistribution = {"_p_ase__GammaDistribution", "ase::GammaDistribution *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__GaussHermiteQuadrature = {"_p_ase__GaussHermiteQuadrature", "ase::GaussHermiteQuadrature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__GaussLegendreQuadrature = {"_p_ase__GaussLegendreQuadrature", "ase::GaussLegendreQuadrature *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__Gaussian = {"_p_ase__Gaussian", "ase::Gaussian *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__GaussianConvolution = {"_p_ase__GaussianConvolution", "ase::GaussianConvolution *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__GeneralisedPoisson = {"_p_ase__GeneralisedPoisson", "ase::GeneralisedPoisson *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__Interpolated7thDegree = {"_p_ase__Interpolated7thDegree", "ase::Interpolated7thDegree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__InterpolatedDensity1D = {"_p_ase__InterpolatedDensity1D", "ase::InterpolatedDensity1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__IntervalT_double_t = {"_p_ase__IntervalT_double_t", "ase::Interval< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__InvExceedanceFunctor1D = {"_p_ase__InvExceedanceFunctor1D", "ase::InvExceedanceFunctor1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__JohnsonSb = {"_p_ase__JohnsonSb", "ase::JohnsonSb *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__JohnsonSu = {"_p_ase__JohnsonSu", "ase::JohnsonSu *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__JohnsonSystem = {"_p_ase__JohnsonSystem", "ase::JohnsonSystem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__LegendreDistro1D = {"_p_ase__LegendreDistro1D", "ase::LegendreDistro1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__LikelihoodAccumulator = {"_p_ase__LikelihoodAccumulator", "ase::LikelihoodAccumulator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__LikelihoodCurveCopy = {"_p_ase__LikelihoodCurveCopy", "ase::LikelihoodCurveCopy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__LogDensityFunctor1D = {"_p_ase__LogDensityFunctor1D", "ase::LogDensityFunctor1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__LogLikelihoodDerivative = {"_p_ase__LogLikelihoodDerivative", "ase::LogLikelihoodDerivative *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__LogLikelihoodSecondDerivative = {"_p_ase__LogLikelihoodSecondDerivative", "ase::LogLikelihoodSecondDerivative *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__LogLogisticBeta = {"_p_ase__LogLogisticBeta", "ase::LogLogisticBeta *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__LogNormal = {"_p_ase__LogNormal", "ase::LogNormal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__LogarithmicLogli = {"_p_ase__LogarithmicLogli", "ase::LogarithmicLogli *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__LongDoubleFunctor1 = {"_p_ase__LongDoubleFunctor1", "ase::LongDoubleFunctor1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__MatchedQuintic = {"_p_ase__MatchedQuintic", "ase::MatchedQuintic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__MixtureModel1D = {"_p_ase__MixtureModel1D", "ase::MixtureModel1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__MoldedCubicLogSigma = {"_p_ase__MoldedCubicLogSigma", "ase::MoldedCubicLogSigma *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__MoldedDoubleQuartic = {"_p_ase__MoldedDoubleQuartic", "ase::MoldedDoubleQuartic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__MoldedDoubleQuintic = {"_p_ase__MoldedDoubleQuintic", "ase::MoldedDoubleQuintic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__MoldedQuartic = {"_p_ase__MoldedQuartic", "ase::MoldedQuartic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__MomentFunctor1D = {"_p_ase__MomentFunctor1D", "ase::MomentFunctor1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__NumericalConvolution = {"_p_ase__NumericalConvolution", "ase::NumericalConvolution *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__OPATGaussianT_ase__ParabolicRailwayCurveT_long_double_t_t = {"_p_ase__OPATGaussianT_ase__ParabolicRailwayCurveT_long_double_t_t", "ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__OPATGaussianT_ase__SmoothDoubleCubicT_long_double_t_t = {"_p_ase__OPATGaussianT_ase__SmoothDoubleCubicT_long_double_t_t", "ase::OPATGaussian< ase::SmoothDoubleCubic< long double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t = {"_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t", "ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__PDGLogli = {"_p_ase__PDGLogli", "ase::PDGLogli *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__ParabolicRailwayCurveT_double_t = {"_p_ase__ParabolicRailwayCurveT_double_t", "ase::ParabolicRailwayCurve< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__ParabolicRailwayCurveT_long_double_t = {"_p_ase__ParabolicRailwayCurveT_long_double_t", "ase::ParabolicRailwayCurve< long double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__PoissonLogli = {"_p_ase__PoissonLogli", "ase::PoissonLogli *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__Poly1D = {"_p_ase__Poly1D", "ase::Poly1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__Poly1DShifted = {"_p_ase__Poly1DShifted", "ase::Poly1DShifted *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__QVWGaussian = {"_p_ase__QVWGaussian", "ase::QVWGaussian *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__QuantileFunctor1D = {"_p_ase__QuantileFunctor1D", "ase::QuantileFunctor1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__QuinticInner = {"_p_ase__QuinticInner", "ase::QuinticInner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__QuinticLogSigma = {"_p_ase__QuinticLogSigma", "ase::QuinticLogSigma *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__RailwayGaussian = {"_p_ase__RailwayGaussian", "ase::RailwayGaussian *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__RailwayZoneFunctorT_double_t = {"_p_ase__RailwayZoneFunctorT_double_t", "ase::RailwayZoneFunctor< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__RailwayZoneFunctorT_long_double_t = {"_p_ase__RailwayZoneFunctorT_long_double_t", "ase::RailwayZoneFunctor< long double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__RatioMomentFunctor1D = {"_p_ase__RatioMomentFunctor1D", "ase::RatioMomentFunctor1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SDCZoneFunctorT_double_t = {"_p_ase__SDCZoneFunctorT_double_t", "ase::SDCZoneFunctor< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SDCZoneFunctorT_long_double_t = {"_p_ase__SDCZoneFunctorT_long_double_t", "ase::SDCZoneFunctor< long double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SDIZoneFunctorT_double_t = {"_p_ase__SDIZoneFunctorT_double_t", "ase::SDIZoneFunctor< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SDIZoneFunctorT_long_double_t = {"_p_ase__SDIZoneFunctorT_long_double_t", "ase::SDIZoneFunctor< long double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SecondDerivativeFunctorHelperT_ase__DoubleCubicInner_t = {"_p_ase__SecondDerivativeFunctorHelperT_ase__DoubleCubicInner_t", "ase::SecondDerivativeFunctorHelper< ase::DoubleCubicInner > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SecondDerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t = {"_p_ase__SecondDerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t", "ase::SecondDerivativeFunctorHelper< ase::ParabolicRailwayCurve< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SecondDerivativeFunctorHelperT_ase__QuinticInner_t = {"_p_ase__SecondDerivativeFunctorHelperT_ase__QuinticInner_t", "ase::SecondDerivativeFunctorHelper< ase::QuinticInner > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SecondDerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t = {"_p_ase__SecondDerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t", "ase::SecondDerivativeFunctorHelper< ase::SmoothDoubleCubic< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SecondDerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t = {"_p_ase__SecondDerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t", "ase::SecondDerivativeFunctorHelper< ase::SymbetaDoubleIntegral< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SecondDerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t = {"_p_ase__SecondDerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t", "ase::SecondDerivativeFunctorHelper< ase::TransitionCubic< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__ShiftedDensityFunctor1D = {"_p_ase__ShiftedDensityFunctor1D", "ase::ShiftedDensityFunctor1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SimpleDoubleQuartic = {"_p_ase__SimpleDoubleQuartic", "ase::SimpleDoubleQuartic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SimpleDoubleQuintic = {"_p_ase__SimpleDoubleQuintic", "ase::SimpleDoubleQuintic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SkewNormal = {"_p_ase__SkewNormal", "ase::SkewNormal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SmoothDoubleCubicT_double_t = {"_p_ase__SmoothDoubleCubicT_double_t", "ase::SmoothDoubleCubic< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SmoothDoubleCubicT_long_double_t = {"_p_ase__SmoothDoubleCubicT_long_double_t", "ase::SmoothDoubleCubic< long double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymbetaDoubleIntegralT_double_t = {"_p_ase__SymbetaDoubleIntegralT_double_t", "ase::SymbetaDoubleIntegral< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymbetaDoubleIntegralT_long_double_t = {"_p_ase__SymbetaDoubleIntegralT_long_double_t", "ase::SymbetaDoubleIntegral< long double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetricBetaGaussian = {"_p_ase__SymmetricBetaGaussian", "ase::SymmetricBetaGaussian *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_10U_t = {"_p_ase__SymmetricBetaGaussian_p_hT_1U_10U_t", "ase::SymmetricBetaGaussian_1_10 *|ase::SymmetricBetaGaussian_p_h< 1U,10U > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_15U_t = {"_p_ase__SymmetricBetaGaussian_p_hT_1U_15U_t", "ase::SymmetricBetaGaussian_p_h< 1U,15U > *|ase::SymmetricBetaGaussian_1_15 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_20U_t = {"_p_ase__SymmetricBetaGaussian_p_hT_1U_20U_t", "ase::SymmetricBetaGaussian_1_20 *|ase::SymmetricBetaGaussian_p_h< 1U,20U > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_25U_t = {"_p_ase__SymmetricBetaGaussian_p_hT_1U_25U_t", "ase::SymmetricBetaGaussian_p_h< 1U,25U > *|ase::SymmetricBetaGaussian_1_25 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_30U_t = {"_p_ase__SymmetricBetaGaussian_p_hT_1U_30U_t", "ase::SymmetricBetaGaussian_1_30 *|ase::SymmetricBetaGaussian_p_h< 1U,30U > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_10U_t = {"_p_ase__SymmetricBetaGaussian_p_hT_2U_10U_t", "ase::SymmetricBetaGaussian_2_10 *|ase::SymmetricBetaGaussian_p_h< 2U,10U > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_15U_t = {"_p_ase__SymmetricBetaGaussian_p_hT_2U_15U_t", "ase::SymmetricBetaGaussian_p_h< 2U,15U > *|ase::SymmetricBetaGaussian_2_15 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_20U_t = {"_p_ase__SymmetricBetaGaussian_p_hT_2U_20U_t", "ase::SymmetricBetaGaussian_2_20 *|ase::SymmetricBetaGaussian_p_h< 2U,20U > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_25U_t = {"_p_ase__SymmetricBetaGaussian_p_hT_2U_25U_t", "ase::SymmetricBetaGaussian_2_25 *|ase::SymmetricBetaGaussian_p_h< 2U,25U > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_30U_t = {"_p_ase__SymmetricBetaGaussian_p_hT_2U_30U_t", "ase::SymmetricBetaGaussian_p_h< 2U,30U > *|ase::SymmetricBetaGaussian_2_30 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_10U_t = {"_p_ase__SymmetricBetaGaussian_p_hT_3U_10U_t", "ase::SymmetricBetaGaussian_p_h< 3U,10U > *|ase::SymmetricBetaGaussian_3_10 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_15U_t = {"_p_ase__SymmetricBetaGaussian_p_hT_3U_15U_t", "ase::SymmetricBetaGaussian_p_h< 3U,15U > *|ase::SymmetricBetaGaussian_3_15 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_20U_t = {"_p_ase__SymmetricBetaGaussian_p_hT_3U_20U_t", "ase::SymmetricBetaGaussian_p_h< 3U,20U > *|ase::SymmetricBetaGaussian_3_20 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_25U_t = {"_p_ase__SymmetricBetaGaussian_p_hT_3U_25U_t", "ase::SymmetricBetaGaussian_p_h< 3U,25U > *|ase::SymmetricBetaGaussian_3_25 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_30U_t = {"_p_ase__SymmetricBetaGaussian_p_hT_3U_30U_t", "ase::SymmetricBetaGaussian_3_30 *|ase::SymmetricBetaGaussian_p_h< 3U,30U > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_10U_t = {"_p_ase__SymmetricBetaGaussian_p_hT_4U_10U_t", "ase::SymmetricBetaGaussian_4_10 *|ase::SymmetricBetaGaussian_p_h< 4U,10U > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_15U_t = {"_p_ase__SymmetricBetaGaussian_p_hT_4U_15U_t", "ase::SymmetricBetaGaussian_p_h< 4U,15U > *|ase::SymmetricBetaGaussian_4_15 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_20U_t = {"_p_ase__SymmetricBetaGaussian_p_hT_4U_20U_t", "ase::SymmetricBetaGaussian_4_20 *|ase::SymmetricBetaGaussian_p_h< 4U,20U > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_25U_t = {"_p_ase__SymmetricBetaGaussian_p_hT_4U_25U_t", "ase::SymmetricBetaGaussian_p_h< 4U,25U > *|ase::SymmetricBetaGaussian_4_25 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_30U_t = {"_p_ase__SymmetricBetaGaussian_p_hT_4U_30U_t", "ase::SymmetricBetaGaussian_4_30 *|ase::SymmetricBetaGaussian_p_h< 4U,30U > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__SymmetrizedParabola = {"_p_ase__SymmetrizedParabola", "ase::SymmetrizedParabola *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__TabulatedDensity1D = {"_p_ase__TabulatedDensity1D", "ase::TabulatedDensity1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__TransitionCubicT_double_t = {"_p_ase__TransitionCubicT_double_t", "ase::TransitionCubic< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__TruncatedCubicLogli = {"_p_ase__TruncatedCubicLogli", "ase::TruncatedCubicLogli *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__TruncatedDistribution1D = {"_p_ase__TruncatedDistribution1D", "ase::TruncatedDistribution1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__UniformDistribution = {"_p_ase__UniformDistribution", "ase::UniformDistribution *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__UnscaledCdfFunctor1D = {"_p_ase__UnscaledCdfFunctor1D", "ase::UnscaledCdfFunctor1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__UnscaledDensityDerivativeFunctor1D = {"_p_ase__UnscaledDensityDerivativeFunctor1D", "ase::UnscaledDensityDerivativeFunctor1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__UnscaledDensityFunctor1D = {"_p_ase__UnscaledDensityFunctor1D", "ase::UnscaledDensityFunctor1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__UnscaledEntropyFunctor1D = {"_p_ase__UnscaledEntropyFunctor1D", "ase::UnscaledEntropyFunctor1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__UnscaledExceedanceFunctor1D = {"_p_ase__UnscaledExceedanceFunctor1D", "ase::UnscaledExceedanceFunctor1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__UnscaledInvExceedanceFunctor1D = {"_p_ase__UnscaledInvExceedanceFunctor1D", "ase::UnscaledInvExceedanceFunctor1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__UnscaledMomentFunctor1D = {"_p_ase__UnscaledMomentFunctor1D", "ase::UnscaledMomentFunctor1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__UnscaledQuantileFunctor1D = {"_p_ase__UnscaledQuantileFunctor1D", "ase::UnscaledQuantileFunctor1D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__VariableLogSigma = {"_p_ase__VariableLogSigma", "ase::VariableLogSigma *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__VariableSigmaLogli = {"_p_ase__VariableSigmaLogli", "ase::VariableSigmaLogli *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ase__VariableVarianceLogli = {"_p_ase__VariableVarianceLogli", "ase::VariableVarianceLogli *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_asepy__DRand48 = {"_p_asepy__DRand48", "asepy::DRand48 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_asepy__MersenneTwister32 = {"_p_asepy__MersenneTwister32", "asepy::MersenneTwister32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_asepy__MersenneTwister64 = {"_p_asepy__MersenneTwister64", "asepy::MersenneTwister64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_asepy__PyFunctor1 = {"_p_asepy__PyFunctor1", "asepy::PyFunctor1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "std::basic_istream< char >::char_type *|char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char_type = {"_p_char_type", "char_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reference = {"_p_const_reference", "const_reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_double__double = {"_p_f_double__double", "double (*)(double)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void = {"_p_f_enum_std__ios_base__event_r_std__ios_base_int__void", "void (*)(enum std::ios_base::event,std::ios_base &,int)|std::ios_base::event_callback", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_long_double__long_double = {"_p_f_long_double__long_double", "long double (*)(long double)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t", "std::basic_ios< char,std::char_traits< char > > &(*)(std::basic_ios< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t", "std::basic_istream< char,std::char_traits< char > > &(*)(std::basic_istream< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", "std::basic_ostream< char,std::char_traits< char > > &(*)(std::basic_ostream< char,std::char_traits< char > > &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__ios_base = {"_p_f_r_std__ios_base__r_std__ios_base", "std::ios_base &(*)(std::ios_base &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fmtflags = {"_p_fmtflags", "fmtflags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int_type = {"_p_int_type", "int_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iostate = {"_p_iostate", "iostate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "long double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_off_type = {"_p_off_type", "off_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_openmode = {"_p_openmode", "openmode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pos_type = {"_p_pos_type", "pos_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reference = {"_p_reference", "reference *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_seekdir = {"_p_seekdir", "seekdir *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "std::streamsize *|size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_state_type = {"_p_state_type", "state_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_char_t = {"_p_std__allocatorT_char_t", "std::basic_string< char >::allocator_type *|std::allocator< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_double_t = {"_p_std__allocatorT_double_t", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t = {"_p_std__basic_iosT_char_std__char_traitsT_char_t_t", "std::basic_ios< char > *|std::basic_ios< char,std::char_traits< char > > *|std::ios *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t", "std::basic_iostream< char,std::char_traits< char > > *|std::basic_iostream< char > *|std::iostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_istreamT_char_std__char_traitsT_char_t_t", "std::basic_istream< char > *|std::basic_istream< char,std::char_traits< char > > *|std::istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", "std::basic_istringstream< char > *|std::basic_istringstream< char,std::char_traits< char >,std::allocator< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t", "std::basic_ostream< char > *|std::basic_ostream< char,std::char_traits< char > > *|std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", "std::basic_ostringstream< char > *|std::basic_ostringstream< char,std::char_traits< char >,std::allocator< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t = {"_p_std__basic_streambufT_char_std__char_traitsT_char_t_t", "std::basic_streambuf< char,std::char_traits< char > > *|std::basic_streambuf< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", "std::basic_string< char > *|std::basic_string< char,std::char_traits< char >,std::allocator< char > > *|std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator = {"_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator", "std::basic_string< char >::iterator *|std::basic_string< char,std::char_traits< char >,std::allocator< char > >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__reverse_iterator = {"_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__reverse_iterator", "std::basic_string< char >::reverse_iterator *|std::basic_string< char,std::char_traits< char >,std::allocator< char > >::reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_stringbufT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_std__basic_stringbufT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", "std::basic_stringbuf< char,std::char_traits< char >,std::allocator< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", "std::basic_stringstream< char > *|std::basic_stringstream< char,std::char_traits< char >,std::allocator< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ios_base = {"_p_std__ios_base", "std::ios_base *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__locale = {"_p_std__locale", "std::locale *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_bool_double_t = {"_p_std__pairT_bool_double_t", "std::pair< bool,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_double_double_t = {"_p_std__pairT_double_double_t", "std::pair< double,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_long_double_long_double_t = {"_p_std__pairT_long_double_long_double_t", "std::pair< long double,long double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_unsigned_int_double_t = {"_p_std__pairT_unsigned_int_double_t", "std::pair< unsigned int,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ase__AsymmetricEstimate_std__allocatorT_ase__AsymmetricEstimate_t_t = {"_p_std__vectorT_ase__AsymmetricEstimate_std__allocatorT_ase__AsymmetricEstimate_t_t", "std::vector< ase::AsymmetricEstimate,std::allocator< ase::AsymmetricEstimate > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_long_double_std__allocatorT_long_double_t_t = {"_p_std__vectorT_long_double_std__allocatorT_long_double_t_t", "std::vector< long double,std::allocator< long double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t = {"_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t", "std::vector< unsigned int,std::allocator< unsigned int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_streamoff = {"_p_streamoff", "std::basic_streambuf< char >::off_type *|std::basic_ostream< char >::off_type *|std::basic_istream< char >::off_type *|streamoff *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_streampos = {"_p_streampos", "std::basic_streambuf< char >::pos_type *|std::basic_ostream< char >::pos_type *|std::basic_istream< char >::pos_type *|streampos *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_traits_type = {"_p_traits_type", "traits_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Base,
  &_swigt__p_Transform,
  &_swigt__p_allocator_type,
  &_swigt__p_ase__AbsDistributionModel1D,
  &_swigt__p_ase__AbsLocationScaleFamily,
  &_swigt__p_ase__AbsLogLikelihoodCurve,
  &_swigt__p_ase__AbsRNG,
  &_swigt__p_ase__AbsShiftableLogli,
  &_swigt__p_ase__AsymmetricEstimate,
  &_swigt__p_ase__BrokenParabola,
  &_swigt__p_ase__CdfFunctor1D,
  &_swigt__p_ase__ConservativeSigma05,
  &_swigt__p_ase__ConservativeSigma10,
  &_swigt__p_ase__ConservativeSigma15,
  &_swigt__p_ase__ConservativeSigma20,
  &_swigt__p_ase__ConservativeSigmaMax,
  &_swigt__p_ase__ConservativeSpline,
  &_swigt__p_ase__ConstrainedQuartic,
  &_swigt__p_ase__CubicHermiteInterpolatorEG,
  &_swigt__p_ase__DensityDerivativeFunctor1D,
  &_swigt__p_ase__DensityFunctor1D,
  &_swigt__p_ase__DerivativeFunctorHelperT_ase__DoubleCubicInner_t,
  &_swigt__p_ase__DerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t,
  &_swigt__p_ase__DerivativeFunctorHelperT_ase__QuinticInner_t,
  &_swigt__p_ase__DerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t,
  &_swigt__p_ase__DerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t,
  &_swigt__p_ase__DerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t,
  &_swigt__p_ase__DimidiatedGaussian,
  &_swigt__p_ase__DiscretizedConvolution,
  &_swigt__p_ase__DistortedGaussian,
  &_swigt__p_ase__DistributionLogli,
  &_swigt__p_ase__DistributionModel1DCopy,
  &_swigt__p_ase__DoubleCubicGaussian,
  &_swigt__p_ase__DoubleCubicInner,
  &_swigt__p_ase__DoubleCubicLogSigma,
  &_swigt__p_ase__DoubleFunctor1,
  &_swigt__p_ase__DoubleQuartic,
  &_swigt__p_ase__DoubleQuintic,
  &_swigt__p_ase__EdgeworthExpansion3,
  &_swigt__p_ase__EmpiricalDistribution,
  &_swigt__p_ase__EntropyFunctor1D,
  &_swigt__p_ase__EquidistantGrid,
  &_swigt__p_ase__ExceedanceFunctor1D,
  &_swigt__p_ase__ExponentialDistribution,
  &_swigt__p_ase__FechnerDistribution,
  &_swigt__p_ase__FunctorTimesShiftedXHelperT_ase__GaussianConvolution_t,
  &_swigt__p_ase__FunctorTimesShiftedXHelperT_ase__NumericalConvolution_t,
  &_swigt__p_ase__FunctorTimesShiftedXRatioHelperT_ase__GaussianConvolution_t,
  &_swigt__p_ase__FunctorTimesShiftedXRatioHelperT_ase__NumericalConvolution_t,
  &_swigt__p_ase__GammaDistribution,
  &_swigt__p_ase__GaussHermiteQuadrature,
  &_swigt__p_ase__GaussLegendreQuadrature,
  &_swigt__p_ase__Gaussian,
  &_swigt__p_ase__GaussianConvolution,
  &_swigt__p_ase__GeneralisedPoisson,
  &_swigt__p_ase__Interpolated7thDegree,
  &_swigt__p_ase__InterpolatedDensity1D,
  &_swigt__p_ase__IntervalT_double_t,
  &_swigt__p_ase__InvExceedanceFunctor1D,
  &_swigt__p_ase__JohnsonSb,
  &_swigt__p_ase__JohnsonSu,
  &_swigt__p_ase__JohnsonSystem,
  &_swigt__p_ase__LegendreDistro1D,
  &_swigt__p_ase__LikelihoodAccumulator,
  &_swigt__p_ase__LikelihoodCurveCopy,
  &_swigt__p_ase__LogDensityFunctor1D,
  &_swigt__p_ase__LogLikelihoodDerivative,
  &_swigt__p_ase__LogLikelihoodSecondDerivative,
  &_swigt__p_ase__LogLogisticBeta,
  &_swigt__p_ase__LogNormal,
  &_swigt__p_ase__LogarithmicLogli,
  &_swigt__p_ase__LongDoubleFunctor1,
  &_swigt__p_ase__MatchedQuintic,
  &_swigt__p_ase__MixtureModel1D,
  &_swigt__p_ase__MoldedCubicLogSigma,
  &_swigt__p_ase__MoldedDoubleQuartic,
  &_swigt__p_ase__MoldedDoubleQuintic,
  &_swigt__p_ase__MoldedQuartic,
  &_swigt__p_ase__MomentFunctor1D,
  &_swigt__p_ase__NumericalConvolution,
  &_swigt__p_ase__OPATGaussianT_ase__ParabolicRailwayCurveT_long_double_t_t,
  &_swigt__p_ase__OPATGaussianT_ase__SmoothDoubleCubicT_long_double_t_t,
  &_swigt__p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t,
  &_swigt__p_ase__PDGLogli,
  &_swigt__p_ase__ParabolicRailwayCurveT_double_t,
  &_swigt__p_ase__ParabolicRailwayCurveT_long_double_t,
  &_swigt__p_ase__PoissonLogli,
  &_swigt__p_ase__Poly1D,
  &_swigt__p_ase__Poly1DShifted,
  &_swigt__p_ase__QVWGaussian,
  &_swigt__p_ase__QuantileFunctor1D,
  &_swigt__p_ase__QuinticInner,
  &_swigt__p_ase__QuinticLogSigma,
  &_swigt__p_ase__RailwayGaussian,
  &_swigt__p_ase__RailwayZoneFunctorT_double_t,
  &_swigt__p_ase__RailwayZoneFunctorT_long_double_t,
  &_swigt__p_ase__RatioMomentFunctor1D,
  &_swigt__p_ase__SDCZoneFunctorT_double_t,
  &_swigt__p_ase__SDCZoneFunctorT_long_double_t,
  &_swigt__p_ase__SDIZoneFunctorT_double_t,
  &_swigt__p_ase__SDIZoneFunctorT_long_double_t,
  &_swigt__p_ase__SecondDerivativeFunctorHelperT_ase__DoubleCubicInner_t,
  &_swigt__p_ase__SecondDerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t,
  &_swigt__p_ase__SecondDerivativeFunctorHelperT_ase__QuinticInner_t,
  &_swigt__p_ase__SecondDerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t,
  &_swigt__p_ase__SecondDerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t,
  &_swigt__p_ase__SecondDerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t,
  &_swigt__p_ase__ShiftedDensityFunctor1D,
  &_swigt__p_ase__SimpleDoubleQuartic,
  &_swigt__p_ase__SimpleDoubleQuintic,
  &_swigt__p_ase__SkewNormal,
  &_swigt__p_ase__SmoothDoubleCubicT_double_t,
  &_swigt__p_ase__SmoothDoubleCubicT_long_double_t,
  &_swigt__p_ase__SymbetaDoubleIntegralT_double_t,
  &_swigt__p_ase__SymbetaDoubleIntegralT_long_double_t,
  &_swigt__p_ase__SymmetricBetaGaussian,
  &_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_10U_t,
  &_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_15U_t,
  &_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_20U_t,
  &_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_25U_t,
  &_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_30U_t,
  &_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_10U_t,
  &_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_15U_t,
  &_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_20U_t,
  &_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_25U_t,
  &_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_30U_t,
  &_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_10U_t,
  &_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_15U_t,
  &_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_20U_t,
  &_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_25U_t,
  &_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_30U_t,
  &_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_10U_t,
  &_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_15U_t,
  &_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_20U_t,
  &_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_25U_t,
  &_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_30U_t,
  &_swigt__p_ase__SymmetrizedParabola,
  &_swigt__p_ase__TabulatedDensity1D,
  &_swigt__p_ase__TransitionCubicT_double_t,
  &_swigt__p_ase__TruncatedCubicLogli,
  &_swigt__p_ase__TruncatedDistribution1D,
  &_swigt__p_ase__UniformDistribution,
  &_swigt__p_ase__UnscaledCdfFunctor1D,
  &_swigt__p_ase__UnscaledDensityDerivativeFunctor1D,
  &_swigt__p_ase__UnscaledDensityFunctor1D,
  &_swigt__p_ase__UnscaledEntropyFunctor1D,
  &_swigt__p_ase__UnscaledExceedanceFunctor1D,
  &_swigt__p_ase__UnscaledInvExceedanceFunctor1D,
  &_swigt__p_ase__UnscaledMomentFunctor1D,
  &_swigt__p_ase__UnscaledQuantileFunctor1D,
  &_swigt__p_ase__VariableLogSigma,
  &_swigt__p_ase__VariableSigmaLogli,
  &_swigt__p_ase__VariableVarianceLogli,
  &_swigt__p_asepy__DRand48,
  &_swigt__p_asepy__MersenneTwister32,
  &_swigt__p_asepy__MersenneTwister64,
  &_swigt__p_asepy__PyFunctor1,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_char_type,
  &_swigt__p_const_reference,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_f_double__double,
  &_swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void,
  &_swigt__p_f_long_double__long_double,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_f_r_std__ios_base__r_std__ios_base,
  &_swigt__p_first_type,
  &_swigt__p_float,
  &_swigt__p_fmtflags,
  &_swigt__p_int,
  &_swigt__p_int_type,
  &_swigt__p_iostate,
  &_swigt__p_long,
  &_swigt__p_long_double,
  &_swigt__p_long_long,
  &_swigt__p_off_type,
  &_swigt__p_openmode,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_void,
  &_swigt__p_pos_type,
  &_swigt__p_reference,
  &_swigt__p_second_type,
  &_swigt__p_seekdir,
  &_swigt__p_short,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_state_type,
  &_swigt__p_std__allocatorT_char_t,
  &_swigt__p_std__allocatorT_double_t,
  &_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator,
  &_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__reverse_iterator,
  &_swigt__p_std__basic_stringbufT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__ios_base,
  &_swigt__p_std__locale,
  &_swigt__p_std__pairT_bool_double_t,
  &_swigt__p_std__pairT_double_double_t,
  &_swigt__p_std__pairT_long_double_long_double_t,
  &_swigt__p_std__pairT_unsigned_int_double_t,
  &_swigt__p_std__vectorT_ase__AsymmetricEstimate_std__allocatorT_ase__AsymmetricEstimate_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_long_double_std__allocatorT_long_double_t_t,
  &_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  &_swigt__p_streamoff,
  &_swigt__p_streampos,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_traits_type,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_Base[] = {  {&_swigt__p_Base, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Transform[] = {  {&_swigt__p_Transform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__AbsDistributionModel1D[] = {  {&_swigt__p_ase__TruncatedDistribution1D, _p_ase__TruncatedDistribution1DTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SkewNormal, _p_ase__SkewNormalTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__LogNormal, _p_ase__LogNormalTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__JohnsonSb, _p_ase__JohnsonSbTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__QVWGaussian, _p_ase__QVWGaussianTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__DoubleCubicGaussian, _p_ase__DoubleCubicGaussianTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__RailwayGaussian, _p_ase__RailwayGaussianTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__DistortedGaussian, _p_ase__DistortedGaussianTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__DimidiatedGaussian, _p_ase__DimidiatedGaussianTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__Gaussian, _p_ase__GaussianTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian, _p_ase__SymmetricBetaGaussianTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__MixtureModel1D, _p_ase__MixtureModel1DTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__AbsDistributionModel1D, 0, 0, 0},  {&_swigt__p_ase__TabulatedDensity1D, _p_ase__TabulatedDensity1DTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__InterpolatedDensity1D, _p_ase__InterpolatedDensity1DTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__JohnsonSystem, _p_ase__JohnsonSystemTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__AbsLocationScaleFamily, _p_ase__AbsLocationScaleFamilyTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__GammaDistribution, _p_ase__GammaDistributionTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__FechnerDistribution, _p_ase__FechnerDistributionTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__UniformDistribution, _p_ase__UniformDistributionTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__ExponentialDistribution, _p_ase__ExponentialDistributionTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__EmpiricalDistribution, _p_ase__EmpiricalDistributionTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_30U_t, _p_ase__SymmetricBetaGaussian_p_hT_2U_30U_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_30U_t, _p_ase__SymmetricBetaGaussian_p_hT_1U_30U_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_30U_t, _p_ase__SymmetricBetaGaussian_p_hT_3U_30U_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_30U_t, _p_ase__SymmetricBetaGaussian_p_hT_4U_30U_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_20U_t, _p_ase__SymmetricBetaGaussian_p_hT_3U_20U_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_20U_t, _p_ase__SymmetricBetaGaussian_p_hT_2U_20U_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_20U_t, _p_ase__SymmetricBetaGaussian_p_hT_1U_20U_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_20U_t, _p_ase__SymmetricBetaGaussian_p_hT_4U_20U_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__JohnsonSu, _p_ase__JohnsonSuTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_25U_t, _p_ase__SymmetricBetaGaussian_p_hT_3U_25U_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_25U_t, _p_ase__SymmetricBetaGaussian_p_hT_2U_25U_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_25U_t, _p_ase__SymmetricBetaGaussian_p_hT_1U_25U_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_25U_t, _p_ase__SymmetricBetaGaussian_p_hT_4U_25U_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_10U_t, _p_ase__SymmetricBetaGaussian_p_hT_3U_10U_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_10U_t, _p_ase__SymmetricBetaGaussian_p_hT_2U_10U_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_10U_t, _p_ase__SymmetricBetaGaussian_p_hT_1U_10U_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_10U_t, _p_ase__SymmetricBetaGaussian_p_hT_4U_10U_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__LegendreDistro1D, _p_ase__LegendreDistro1DTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_15U_t, _p_ase__SymmetricBetaGaussian_p_hT_3U_15U_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_15U_t, _p_ase__SymmetricBetaGaussian_p_hT_2U_15U_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_15U_t, _p_ase__SymmetricBetaGaussian_p_hT_1U_15U_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_15U_t, _p_ase__SymmetricBetaGaussian_p_hT_4U_15U_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__OPATGaussianT_ase__ParabolicRailwayCurveT_long_double_t_t, _p_ase__OPATGaussianT_ase__ParabolicRailwayCurveT_long_double_t_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__OPATGaussianT_ase__SmoothDoubleCubicT_long_double_t_t, _p_ase__OPATGaussianT_ase__SmoothDoubleCubicT_long_double_t_tTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__EdgeworthExpansion3, _p_ase__EdgeworthExpansion3To_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__DistributionModel1DCopy, _p_ase__DistributionModel1DCopyTo_p_ase__AbsDistributionModel1D, 0, 0},  {&_swigt__p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, _p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_tTo_p_ase__AbsDistributionModel1D, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__AbsLocationScaleFamily[] = {  {&_swigt__p_ase__SkewNormal, _p_ase__SkewNormalTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__LogNormal, _p_ase__LogNormalTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__JohnsonSb, _p_ase__JohnsonSbTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__QVWGaussian, _p_ase__QVWGaussianTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__DoubleCubicGaussian, _p_ase__DoubleCubicGaussianTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__RailwayGaussian, _p_ase__RailwayGaussianTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__DistortedGaussian, _p_ase__DistortedGaussianTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__DimidiatedGaussian, _p_ase__DimidiatedGaussianTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__Gaussian, _p_ase__GaussianTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian, _p_ase__SymmetricBetaGaussianTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__TabulatedDensity1D, _p_ase__TabulatedDensity1DTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__InterpolatedDensity1D, _p_ase__InterpolatedDensity1DTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__JohnsonSystem, _p_ase__JohnsonSystemTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__AbsLocationScaleFamily, 0, 0, 0},  {&_swigt__p_ase__GammaDistribution, _p_ase__GammaDistributionTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__FechnerDistribution, _p_ase__FechnerDistributionTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__UniformDistribution, _p_ase__UniformDistributionTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__ExponentialDistribution, _p_ase__ExponentialDistributionTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_30U_t, _p_ase__SymmetricBetaGaussian_p_hT_2U_30U_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_30U_t, _p_ase__SymmetricBetaGaussian_p_hT_1U_30U_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_30U_t, _p_ase__SymmetricBetaGaussian_p_hT_3U_30U_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_30U_t, _p_ase__SymmetricBetaGaussian_p_hT_4U_30U_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_20U_t, _p_ase__SymmetricBetaGaussian_p_hT_3U_20U_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_20U_t, _p_ase__SymmetricBetaGaussian_p_hT_2U_20U_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_20U_t, _p_ase__SymmetricBetaGaussian_p_hT_1U_20U_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_20U_t, _p_ase__SymmetricBetaGaussian_p_hT_4U_20U_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__JohnsonSu, _p_ase__JohnsonSuTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_25U_t, _p_ase__SymmetricBetaGaussian_p_hT_3U_25U_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_25U_t, _p_ase__SymmetricBetaGaussian_p_hT_2U_25U_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_25U_t, _p_ase__SymmetricBetaGaussian_p_hT_1U_25U_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_25U_t, _p_ase__SymmetricBetaGaussian_p_hT_4U_25U_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_10U_t, _p_ase__SymmetricBetaGaussian_p_hT_3U_10U_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_10U_t, _p_ase__SymmetricBetaGaussian_p_hT_2U_10U_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_10U_t, _p_ase__SymmetricBetaGaussian_p_hT_1U_10U_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_10U_t, _p_ase__SymmetricBetaGaussian_p_hT_4U_10U_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__LegendreDistro1D, _p_ase__LegendreDistro1DTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_15U_t, _p_ase__SymmetricBetaGaussian_p_hT_3U_15U_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_15U_t, _p_ase__SymmetricBetaGaussian_p_hT_2U_15U_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_15U_t, _p_ase__SymmetricBetaGaussian_p_hT_1U_15U_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_15U_t, _p_ase__SymmetricBetaGaussian_p_hT_4U_15U_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__OPATGaussianT_ase__ParabolicRailwayCurveT_long_double_t_t, _p_ase__OPATGaussianT_ase__ParabolicRailwayCurveT_long_double_t_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__OPATGaussianT_ase__SmoothDoubleCubicT_long_double_t_t, _p_ase__OPATGaussianT_ase__SmoothDoubleCubicT_long_double_t_tTo_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__EdgeworthExpansion3, _p_ase__EdgeworthExpansion3To_p_ase__AbsLocationScaleFamily, 0, 0},  {&_swigt__p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, _p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_tTo_p_ase__AbsLocationScaleFamily, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__AbsLogLikelihoodCurve[] = {  {&_swigt__p_ase__LikelihoodCurveCopy, _p_ase__LikelihoodCurveCopyTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__VariableSigmaLogli, _p_ase__VariableSigmaLogliTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__DistributionLogli, _p_ase__DistributionLogliTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__PoissonLogli, _p_ase__PoissonLogliTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__SymmetrizedParabola, _p_ase__SymmetrizedParabolaTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__BrokenParabola, _p_ase__BrokenParabolaTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__GeneralisedPoisson, _p_ase__GeneralisedPoissonTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__TruncatedCubicLogli, _p_ase__TruncatedCubicLogliTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__LogarithmicLogli, _p_ase__LogarithmicLogliTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__SimpleDoubleQuintic, _p_ase__SimpleDoubleQuinticTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__MoldedDoubleQuintic, _p_ase__MoldedDoubleQuinticTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__DoubleQuintic, _p_ase__DoubleQuinticTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__MatchedQuintic, _p_ase__MatchedQuinticTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__VariableVarianceLogli, _p_ase__VariableVarianceLogliTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__Interpolated7thDegree, _p_ase__Interpolated7thDegreeTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__PDGLogli, _p_ase__PDGLogliTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__ConservativeSpline, _p_ase__ConservativeSplineTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__LikelihoodAccumulator, _p_ase__LikelihoodAccumulatorTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__ConservativeSigmaMax, _p_ase__ConservativeSigmaMaxTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__AbsLogLikelihoodCurve, 0, 0, 0},  {&_swigt__p_ase__QuinticLogSigma, _p_ase__QuinticLogSigmaTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__MoldedCubicLogSigma, _p_ase__MoldedCubicLogSigmaTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__DoubleCubicLogSigma, _p_ase__DoubleCubicLogSigmaTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__VariableLogSigma, _p_ase__VariableLogSigmaTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__ConservativeSigma20, _p_ase__ConservativeSigma20To_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__ConstrainedQuartic, _p_ase__ConstrainedQuarticTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__MoldedQuartic, _p_ase__MoldedQuarticTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__SimpleDoubleQuartic, _p_ase__SimpleDoubleQuarticTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__MoldedDoubleQuartic, _p_ase__MoldedDoubleQuarticTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__DoubleQuartic, _p_ase__DoubleQuarticTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__AbsShiftableLogli, _p_ase__AbsShiftableLogliTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__LogLogisticBeta, _p_ase__LogLogisticBetaTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__ConservativeSigma10, _p_ase__ConservativeSigma10To_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__ConservativeSigma15, _p_ase__ConservativeSigma15To_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__CubicHermiteInterpolatorEG, _p_ase__CubicHermiteInterpolatorEGTo_p_ase__AbsLogLikelihoodCurve, 0, 0},  {&_swigt__p_ase__ConservativeSigma05, _p_ase__ConservativeSigma05To_p_ase__AbsLogLikelihoodCurve, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__AbsRNG[] = {  {&_swigt__p_ase__AbsRNG, 0, 0, 0},  {&_swigt__p_asepy__MersenneTwister32, _p_asepy__MersenneTwister32To_p_ase__AbsRNG, 0, 0},  {&_swigt__p_asepy__MersenneTwister64, _p_asepy__MersenneTwister64To_p_ase__AbsRNG, 0, 0},  {&_swigt__p_asepy__DRand48, _p_asepy__DRand48To_p_ase__AbsRNG, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__AbsShiftableLogli[] = {  {&_swigt__p_ase__ConservativeSigma05, _p_ase__ConservativeSigma05To_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__VariableSigmaLogli, _p_ase__VariableSigmaLogliTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__ConservativeSpline, _p_ase__ConservativeSplineTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__SimpleDoubleQuintic, _p_ase__SimpleDoubleQuinticTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__MoldedDoubleQuintic, _p_ase__MoldedDoubleQuinticTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__DoubleQuintic, _p_ase__DoubleQuinticTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__MatchedQuintic, _p_ase__MatchedQuinticTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__LogarithmicLogli, _p_ase__LogarithmicLogliTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__TruncatedCubicLogli, _p_ase__TruncatedCubicLogliTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__AbsShiftableLogli, 0, 0, 0},  {&_swigt__p_ase__SymmetrizedParabola, _p_ase__SymmetrizedParabolaTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__BrokenParabola, _p_ase__BrokenParabolaTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__ConservativeSigma20, _p_ase__ConservativeSigma20To_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__ConservativeSigmaMax, _p_ase__ConservativeSigmaMaxTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__ConservativeSigma10, _p_ase__ConservativeSigma10To_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__VariableVarianceLogli, _p_ase__VariableVarianceLogliTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__VariableLogSigma, _p_ase__VariableLogSigmaTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__DoubleCubicLogSigma, _p_ase__DoubleCubicLogSigmaTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__MoldedCubicLogSigma, _p_ase__MoldedCubicLogSigmaTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__QuinticLogSigma, _p_ase__QuinticLogSigmaTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__DistributionLogli, _p_ase__DistributionLogliTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__GeneralisedPoisson, _p_ase__GeneralisedPoissonTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__LogLogisticBeta, _p_ase__LogLogisticBetaTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__PDGLogli, _p_ase__PDGLogliTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__ConservativeSigma15, _p_ase__ConservativeSigma15To_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__SimpleDoubleQuartic, _p_ase__SimpleDoubleQuarticTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__MoldedDoubleQuartic, _p_ase__MoldedDoubleQuarticTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__DoubleQuartic, _p_ase__DoubleQuarticTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__MoldedQuartic, _p_ase__MoldedQuarticTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__ConstrainedQuartic, _p_ase__ConstrainedQuarticTo_p_ase__AbsShiftableLogli, 0, 0},  {&_swigt__p_ase__Interpolated7thDegree, _p_ase__Interpolated7thDegreeTo_p_ase__AbsShiftableLogli, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__AsymmetricEstimate[] = {  {&_swigt__p_ase__AsymmetricEstimate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__BrokenParabola[] = {  {&_swigt__p_ase__BrokenParabola, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__CdfFunctor1D[] = {  {&_swigt__p_ase__CdfFunctor1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__ConservativeSigma05[] = {  {&_swigt__p_ase__ConservativeSigma05, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__ConservativeSigma10[] = {  {&_swigt__p_ase__ConservativeSigma10, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__ConservativeSigma15[] = {  {&_swigt__p_ase__ConservativeSigma15, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__ConservativeSigma20[] = {  {&_swigt__p_ase__ConservativeSigma20, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__ConservativeSigmaMax[] = {  {&_swigt__p_ase__ConservativeSigmaMax, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__ConservativeSpline[] = {  {&_swigt__p_ase__ConservativeSigma20, _p_ase__ConservativeSigma20To_p_ase__ConservativeSpline, 0, 0},  {&_swigt__p_ase__ConservativeSpline, 0, 0, 0},  {&_swigt__p_ase__ConservativeSigma15, _p_ase__ConservativeSigma15To_p_ase__ConservativeSpline, 0, 0},  {&_swigt__p_ase__ConservativeSigma10, _p_ase__ConservativeSigma10To_p_ase__ConservativeSpline, 0, 0},  {&_swigt__p_ase__ConservativeSigma05, _p_ase__ConservativeSigma05To_p_ase__ConservativeSpline, 0, 0},  {&_swigt__p_ase__ConservativeSigmaMax, _p_ase__ConservativeSigmaMaxTo_p_ase__ConservativeSpline, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__ConstrainedQuartic[] = {  {&_swigt__p_ase__ConstrainedQuartic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__CubicHermiteInterpolatorEG[] = {  {&_swigt__p_ase__CubicHermiteInterpolatorEG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__DensityDerivativeFunctor1D[] = {  {&_swigt__p_ase__DensityDerivativeFunctor1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__DensityFunctor1D[] = {  {&_swigt__p_ase__DensityFunctor1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__DerivativeFunctorHelperT_ase__DoubleCubicInner_t[] = {  {&_swigt__p_ase__DerivativeFunctorHelperT_ase__DoubleCubicInner_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__DerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t[] = {  {&_swigt__p_ase__DerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__DerivativeFunctorHelperT_ase__QuinticInner_t[] = {  {&_swigt__p_ase__DerivativeFunctorHelperT_ase__QuinticInner_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__DerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t[] = {  {&_swigt__p_ase__DerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__DerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t[] = {  {&_swigt__p_ase__DerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__DerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t[] = {  {&_swigt__p_ase__DerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__DimidiatedGaussian[] = {  {&_swigt__p_ase__DimidiatedGaussian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__DiscretizedConvolution[] = {  {&_swigt__p_ase__DiscretizedConvolution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__DistortedGaussian[] = {  {&_swigt__p_ase__DistortedGaussian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__DistributionLogli[] = {  {&_swigt__p_ase__DistributionLogli, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__DistributionModel1DCopy[] = {  {&_swigt__p_ase__DistributionModel1DCopy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__DoubleCubicGaussian[] = {  {&_swigt__p_ase__DoubleCubicGaussian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__DoubleCubicInner[] = {  {&_swigt__p_ase__DoubleCubicInner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__DoubleCubicLogSigma[] = {  {&_swigt__p_ase__DoubleCubicLogSigma, 0, 0, 0},  {&_swigt__p_ase__MoldedCubicLogSigma, _p_ase__MoldedCubicLogSigmaTo_p_ase__DoubleCubicLogSigma, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__DoubleFunctor1[] = {  {&_swigt__p_ase__DoubleFunctor1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__DoubleQuartic[] = {  {&_swigt__p_ase__DoubleQuartic, 0, 0, 0},  {&_swigt__p_ase__MoldedDoubleQuartic, _p_ase__MoldedDoubleQuarticTo_p_ase__DoubleQuartic, 0, 0},  {&_swigt__p_ase__SimpleDoubleQuartic, _p_ase__SimpleDoubleQuarticTo_p_ase__DoubleQuartic, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__DoubleQuintic[] = {  {&_swigt__p_ase__DoubleQuintic, 0, 0, 0},  {&_swigt__p_ase__MoldedDoubleQuintic, _p_ase__MoldedDoubleQuinticTo_p_ase__DoubleQuintic, 0, 0},  {&_swigt__p_ase__SimpleDoubleQuintic, _p_ase__SimpleDoubleQuinticTo_p_ase__DoubleQuintic, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__EdgeworthExpansion3[] = {  {&_swigt__p_ase__EdgeworthExpansion3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__EmpiricalDistribution[] = {  {&_swigt__p_ase__EmpiricalDistribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__EntropyFunctor1D[] = {  {&_swigt__p_ase__EntropyFunctor1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__EquidistantGrid[] = {  {&_swigt__p_ase__EquidistantGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__ExceedanceFunctor1D[] = {  {&_swigt__p_ase__ExceedanceFunctor1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__ExponentialDistribution[] = {  {&_swigt__p_ase__ExponentialDistribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__FechnerDistribution[] = {  {&_swigt__p_ase__FechnerDistribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__FunctorTimesShiftedXHelperT_ase__GaussianConvolution_t[] = {  {&_swigt__p_ase__FunctorTimesShiftedXHelperT_ase__GaussianConvolution_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__FunctorTimesShiftedXHelperT_ase__NumericalConvolution_t[] = {  {&_swigt__p_ase__FunctorTimesShiftedXHelperT_ase__NumericalConvolution_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__FunctorTimesShiftedXRatioHelperT_ase__GaussianConvolution_t[] = {  {&_swigt__p_ase__FunctorTimesShiftedXRatioHelperT_ase__GaussianConvolution_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__FunctorTimesShiftedXRatioHelperT_ase__NumericalConvolution_t[] = {  {&_swigt__p_ase__FunctorTimesShiftedXRatioHelperT_ase__NumericalConvolution_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__GammaDistribution[] = {  {&_swigt__p_ase__GammaDistribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__GaussHermiteQuadrature[] = {  {&_swigt__p_ase__GaussHermiteQuadrature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__GaussLegendreQuadrature[] = {  {&_swigt__p_ase__GaussLegendreQuadrature, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__Gaussian[] = {  {&_swigt__p_ase__Gaussian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__GaussianConvolution[] = {  {&_swigt__p_ase__GaussianConvolution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__GeneralisedPoisson[] = {  {&_swigt__p_ase__GeneralisedPoisson, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__Interpolated7thDegree[] = {  {&_swigt__p_ase__Interpolated7thDegree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__InterpolatedDensity1D[] = {  {&_swigt__p_ase__InterpolatedDensity1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__IntervalT_double_t[] = {  {&_swigt__p_ase__IntervalT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__InvExceedanceFunctor1D[] = {  {&_swigt__p_ase__InvExceedanceFunctor1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__JohnsonSb[] = {  {&_swigt__p_ase__JohnsonSb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__JohnsonSu[] = {  {&_swigt__p_ase__JohnsonSu, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__JohnsonSystem[] = {  {&_swigt__p_ase__JohnsonSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__LegendreDistro1D[] = {  {&_swigt__p_ase__LegendreDistro1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__LikelihoodAccumulator[] = {  {&_swigt__p_ase__LikelihoodAccumulator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__LikelihoodCurveCopy[] = {  {&_swigt__p_ase__LikelihoodCurveCopy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__LogDensityFunctor1D[] = {  {&_swigt__p_ase__LogDensityFunctor1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__LogLikelihoodDerivative[] = {  {&_swigt__p_ase__LogLikelihoodDerivative, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__LogLikelihoodSecondDerivative[] = {  {&_swigt__p_ase__LogLikelihoodSecondDerivative, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__LogLogisticBeta[] = {  {&_swigt__p_ase__LogLogisticBeta, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__LogNormal[] = {  {&_swigt__p_ase__LogNormal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__LogarithmicLogli[] = {  {&_swigt__p_ase__LogarithmicLogli, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__LongDoubleFunctor1[] = {  {&_swigt__p_ase__LongDoubleFunctor1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__MatchedQuintic[] = {  {&_swigt__p_ase__MatchedQuintic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__MixtureModel1D[] = {  {&_swigt__p_ase__MixtureModel1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__MoldedCubicLogSigma[] = {  {&_swigt__p_ase__MoldedCubicLogSigma, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__MoldedDoubleQuartic[] = {  {&_swigt__p_ase__MoldedDoubleQuartic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__MoldedDoubleQuintic[] = {  {&_swigt__p_ase__MoldedDoubleQuintic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__MoldedQuartic[] = {  {&_swigt__p_ase__MoldedQuartic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__MomentFunctor1D[] = {  {&_swigt__p_ase__MomentFunctor1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__NumericalConvolution[] = {  {&_swigt__p_ase__NumericalConvolution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__OPATGaussianT_ase__ParabolicRailwayCurveT_long_double_t_t[] = {  {&_swigt__p_ase__RailwayGaussian, _p_ase__RailwayGaussianTo_p_ase__OPATGaussianT_ase__ParabolicRailwayCurveT_long_double_t_t, 0, 0},  {&_swigt__p_ase__OPATGaussianT_ase__ParabolicRailwayCurveT_long_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__OPATGaussianT_ase__SmoothDoubleCubicT_long_double_t_t[] = {  {&_swigt__p_ase__DoubleCubicGaussian, _p_ase__DoubleCubicGaussianTo_p_ase__OPATGaussianT_ase__SmoothDoubleCubicT_long_double_t_t, 0, 0},  {&_swigt__p_ase__OPATGaussianT_ase__SmoothDoubleCubicT_long_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_20U_t, _p_ase__SymmetricBetaGaussian_p_hT_4U_20U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_20U_t, _p_ase__SymmetricBetaGaussian_p_hT_1U_20U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_20U_t, _p_ase__SymmetricBetaGaussian_p_hT_2U_20U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_20U_t, _p_ase__SymmetricBetaGaussian_p_hT_3U_20U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_10U_t, _p_ase__SymmetricBetaGaussian_p_hT_4U_10U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_10U_t, _p_ase__SymmetricBetaGaussian_p_hT_1U_10U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_10U_t, _p_ase__SymmetricBetaGaussian_p_hT_2U_10U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_10U_t, _p_ase__SymmetricBetaGaussian_p_hT_3U_10U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian, _p_ase__SymmetricBetaGaussianTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0},  {&_swigt__p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_25U_t, _p_ase__SymmetricBetaGaussian_p_hT_3U_25U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_25U_t, _p_ase__SymmetricBetaGaussian_p_hT_2U_25U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_25U_t, _p_ase__SymmetricBetaGaussian_p_hT_1U_25U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_25U_t, _p_ase__SymmetricBetaGaussian_p_hT_4U_25U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_15U_t, _p_ase__SymmetricBetaGaussian_p_hT_4U_15U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_15U_t, _p_ase__SymmetricBetaGaussian_p_hT_1U_15U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_15U_t, _p_ase__SymmetricBetaGaussian_p_hT_2U_15U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_15U_t, _p_ase__SymmetricBetaGaussian_p_hT_3U_15U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_30U_t, _p_ase__SymmetricBetaGaussian_p_hT_4U_30U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_30U_t, _p_ase__SymmetricBetaGaussian_p_hT_3U_30U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_30U_t, _p_ase__SymmetricBetaGaussian_p_hT_1U_30U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_30U_t, _p_ase__SymmetricBetaGaussian_p_hT_2U_30U_tTo_p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__PDGLogli[] = {  {&_swigt__p_ase__PDGLogli, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__ParabolicRailwayCurveT_double_t[] = {  {&_swigt__p_ase__ParabolicRailwayCurveT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__ParabolicRailwayCurveT_long_double_t[] = {  {&_swigt__p_ase__ParabolicRailwayCurveT_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__PoissonLogli[] = {  {&_swigt__p_ase__PoissonLogli, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__Poly1D[] = {  {&_swigt__p_ase__Poly1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__Poly1DShifted[] = {  {&_swigt__p_ase__Poly1DShifted, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__QVWGaussian[] = {  {&_swigt__p_ase__QVWGaussian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__QuantileFunctor1D[] = {  {&_swigt__p_ase__QuantileFunctor1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__QuinticInner[] = {  {&_swigt__p_ase__QuinticInner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__QuinticLogSigma[] = {  {&_swigt__p_ase__QuinticLogSigma, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__RailwayGaussian[] = {  {&_swigt__p_ase__RailwayGaussian, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__RailwayZoneFunctorT_double_t[] = {  {&_swigt__p_ase__RailwayZoneFunctorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__RailwayZoneFunctorT_long_double_t[] = {  {&_swigt__p_ase__RailwayZoneFunctorT_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__RatioMomentFunctor1D[] = {  {&_swigt__p_ase__RatioMomentFunctor1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SDCZoneFunctorT_double_t[] = {  {&_swigt__p_ase__SDCZoneFunctorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SDCZoneFunctorT_long_double_t[] = {  {&_swigt__p_ase__SDCZoneFunctorT_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SDIZoneFunctorT_double_t[] = {  {&_swigt__p_ase__SDIZoneFunctorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SDIZoneFunctorT_long_double_t[] = {  {&_swigt__p_ase__SDIZoneFunctorT_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SecondDerivativeFunctorHelperT_ase__DoubleCubicInner_t[] = {  {&_swigt__p_ase__SecondDerivativeFunctorHelperT_ase__DoubleCubicInner_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SecondDerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t[] = {  {&_swigt__p_ase__SecondDerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SecondDerivativeFunctorHelperT_ase__QuinticInner_t[] = {  {&_swigt__p_ase__SecondDerivativeFunctorHelperT_ase__QuinticInner_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SecondDerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t[] = {  {&_swigt__p_ase__SecondDerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SecondDerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t[] = {  {&_swigt__p_ase__SecondDerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SecondDerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t[] = {  {&_swigt__p_ase__SecondDerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__ShiftedDensityFunctor1D[] = {  {&_swigt__p_ase__ShiftedDensityFunctor1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SimpleDoubleQuartic[] = {  {&_swigt__p_ase__SimpleDoubleQuartic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SimpleDoubleQuintic[] = {  {&_swigt__p_ase__SimpleDoubleQuintic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SkewNormal[] = {  {&_swigt__p_ase__SkewNormal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SmoothDoubleCubicT_double_t[] = {  {&_swigt__p_ase__SmoothDoubleCubicT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SmoothDoubleCubicT_long_double_t[] = {  {&_swigt__p_ase__SmoothDoubleCubicT_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymbetaDoubleIntegralT_double_t[] = {  {&_swigt__p_ase__SymbetaDoubleIntegralT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymbetaDoubleIntegralT_long_double_t[] = {  {&_swigt__p_ase__SymbetaDoubleIntegralT_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetricBetaGaussian[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_20U_t, _p_ase__SymmetricBetaGaussian_p_hT_4U_20U_tTo_p_ase__SymmetricBetaGaussian, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_20U_t, _p_ase__SymmetricBetaGaussian_p_hT_1U_20U_tTo_p_ase__SymmetricBetaGaussian, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_20U_t, _p_ase__SymmetricBetaGaussian_p_hT_2U_20U_tTo_p_ase__SymmetricBetaGaussian, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_20U_t, _p_ase__SymmetricBetaGaussian_p_hT_3U_20U_tTo_p_ase__SymmetricBetaGaussian, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_10U_t, _p_ase__SymmetricBetaGaussian_p_hT_4U_10U_tTo_p_ase__SymmetricBetaGaussian, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_10U_t, _p_ase__SymmetricBetaGaussian_p_hT_1U_10U_tTo_p_ase__SymmetricBetaGaussian, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_10U_t, _p_ase__SymmetricBetaGaussian_p_hT_2U_10U_tTo_p_ase__SymmetricBetaGaussian, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_10U_t, _p_ase__SymmetricBetaGaussian_p_hT_3U_10U_tTo_p_ase__SymmetricBetaGaussian, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian, 0, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_25U_t, _p_ase__SymmetricBetaGaussian_p_hT_3U_25U_tTo_p_ase__SymmetricBetaGaussian, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_25U_t, _p_ase__SymmetricBetaGaussian_p_hT_2U_25U_tTo_p_ase__SymmetricBetaGaussian, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_25U_t, _p_ase__SymmetricBetaGaussian_p_hT_1U_25U_tTo_p_ase__SymmetricBetaGaussian, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_25U_t, _p_ase__SymmetricBetaGaussian_p_hT_4U_25U_tTo_p_ase__SymmetricBetaGaussian, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_15U_t, _p_ase__SymmetricBetaGaussian_p_hT_4U_15U_tTo_p_ase__SymmetricBetaGaussian, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_15U_t, _p_ase__SymmetricBetaGaussian_p_hT_1U_15U_tTo_p_ase__SymmetricBetaGaussian, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_15U_t, _p_ase__SymmetricBetaGaussian_p_hT_2U_15U_tTo_p_ase__SymmetricBetaGaussian, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_15U_t, _p_ase__SymmetricBetaGaussian_p_hT_3U_15U_tTo_p_ase__SymmetricBetaGaussian, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_30U_t, _p_ase__SymmetricBetaGaussian_p_hT_4U_30U_tTo_p_ase__SymmetricBetaGaussian, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_30U_t, _p_ase__SymmetricBetaGaussian_p_hT_3U_30U_tTo_p_ase__SymmetricBetaGaussian, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_30U_t, _p_ase__SymmetricBetaGaussian_p_hT_1U_30U_tTo_p_ase__SymmetricBetaGaussian, 0, 0},  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_30U_t, _p_ase__SymmetricBetaGaussian_p_hT_2U_30U_tTo_p_ase__SymmetricBetaGaussian, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetricBetaGaussian_p_hT_1U_10U_t[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_10U_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetricBetaGaussian_p_hT_1U_15U_t[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_15U_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetricBetaGaussian_p_hT_1U_20U_t[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_20U_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetricBetaGaussian_p_hT_1U_25U_t[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_25U_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetricBetaGaussian_p_hT_1U_30U_t[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_1U_30U_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetricBetaGaussian_p_hT_2U_10U_t[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_10U_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetricBetaGaussian_p_hT_2U_15U_t[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_15U_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetricBetaGaussian_p_hT_2U_20U_t[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_20U_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetricBetaGaussian_p_hT_2U_25U_t[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_25U_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetricBetaGaussian_p_hT_2U_30U_t[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_2U_30U_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetricBetaGaussian_p_hT_3U_10U_t[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_10U_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetricBetaGaussian_p_hT_3U_15U_t[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_15U_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetricBetaGaussian_p_hT_3U_20U_t[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_20U_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetricBetaGaussian_p_hT_3U_25U_t[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_25U_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetricBetaGaussian_p_hT_3U_30U_t[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_3U_30U_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetricBetaGaussian_p_hT_4U_10U_t[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_10U_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetricBetaGaussian_p_hT_4U_15U_t[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_15U_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetricBetaGaussian_p_hT_4U_20U_t[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_20U_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetricBetaGaussian_p_hT_4U_25U_t[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_25U_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetricBetaGaussian_p_hT_4U_30U_t[] = {  {&_swigt__p_ase__SymmetricBetaGaussian_p_hT_4U_30U_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__SymmetrizedParabola[] = {  {&_swigt__p_ase__SymmetrizedParabola, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__TabulatedDensity1D[] = {  {&_swigt__p_ase__TabulatedDensity1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__TransitionCubicT_double_t[] = {  {&_swigt__p_ase__TransitionCubicT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__TruncatedCubicLogli[] = {  {&_swigt__p_ase__TruncatedCubicLogli, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__TruncatedDistribution1D[] = {  {&_swigt__p_ase__TruncatedDistribution1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__UniformDistribution[] = {  {&_swigt__p_ase__UniformDistribution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__UnscaledCdfFunctor1D[] = {  {&_swigt__p_ase__UnscaledCdfFunctor1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__UnscaledDensityDerivativeFunctor1D[] = {  {&_swigt__p_ase__UnscaledDensityDerivativeFunctor1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__UnscaledDensityFunctor1D[] = {  {&_swigt__p_ase__UnscaledDensityFunctor1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__UnscaledEntropyFunctor1D[] = {  {&_swigt__p_ase__UnscaledEntropyFunctor1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__UnscaledExceedanceFunctor1D[] = {  {&_swigt__p_ase__UnscaledExceedanceFunctor1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__UnscaledInvExceedanceFunctor1D[] = {  {&_swigt__p_ase__UnscaledInvExceedanceFunctor1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__UnscaledMomentFunctor1D[] = {  {&_swigt__p_ase__UnscaledMomentFunctor1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__UnscaledQuantileFunctor1D[] = {  {&_swigt__p_ase__UnscaledQuantileFunctor1D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__VariableLogSigma[] = {  {&_swigt__p_ase__VariableLogSigma, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__VariableSigmaLogli[] = {  {&_swigt__p_ase__VariableSigmaLogli, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ase__VariableVarianceLogli[] = {  {&_swigt__p_ase__VariableVarianceLogli, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_asepy__DRand48[] = {  {&_swigt__p_asepy__DRand48, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_asepy__MersenneTwister32[] = {  {&_swigt__p_asepy__MersenneTwister32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_asepy__MersenneTwister64[] = {  {&_swigt__p_asepy__MersenneTwister64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_asepy__PyFunctor1[] = {  {&_swigt__p_asepy__PyFunctor1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char_type[] = {  {&_swigt__p_char_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reference[] = {  {&_swigt__p_const_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_double__double[] = {  {&_swigt__p_f_double__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_enum_std__ios_base__event_r_std__ios_base_int__void[] = {  {&_swigt__p_f_enum_std__ios_base__event_r_std__ios_base_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_long_double__long_double[] = {  {&_swigt__p_f_long_double__long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, _p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {{&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {{&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, _p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, _p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {{&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, _p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {{&_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_std__ios_base__r_std__ios_base[] = {  {&_swigt__p_f_r_std__ios_base__r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, _p_f_r_std__ios_base__r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__ios_base, 0, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, _p_f_r_std__ios_base__r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, _p_f_r_std__ios_base__r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},  {&_swigt__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_f_r_std__ios_base__r_std__ios_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fmtflags[] = {  {&_swigt__p_fmtflags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int_type[] = {  {&_swigt__p_int_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iostate[] = {  {&_swigt__p_iostate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_off_type[] = {  {&_swigt__p_off_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_openmode[] = {  {&_swigt__p_openmode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pos_type[] = {  {&_swigt__p_pos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reference[] = {  {&_swigt__p_reference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_seekdir[] = {  {&_swigt__p_seekdir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_state_type[] = {  {&_swigt__p_state_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_char_t[] = {  {&_swigt__p_std__allocatorT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_double_t[] = {  {&_swigt__p_std__allocatorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iosT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, _p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, _p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, _p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_iosT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, _p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, _p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, _p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {  {&_swigt__p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, _p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, _p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {  {&_swigt__p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_streambufT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_streambufT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {  {&_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator[] = {  {&_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__reverse_iterator[] = {  {&_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringbufT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {  {&_swigt__p_std__basic_stringbufT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {  {&_swigt__p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ios_base[] = {  {&_swigt__p_std__basic_iosT_char_std__char_traitsT_char_t_t, _p_std__basic_iosT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, _p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, _p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__ios_base, 0, 0, 0},  {&_swigt__p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, _p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_ostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t, _p_std__basic_iostreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, _p_std__basic_istreamT_char_std__char_traitsT_char_t_tTo_p_std__ios_base, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__locale[] = {  {&_swigt__p_std__locale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_bool_double_t[] = {  {&_swigt__p_std__pairT_bool_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_double_double_t[] = {  {&_swigt__p_std__pairT_double_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_long_double_long_double_t[] = {  {&_swigt__p_std__pairT_long_double_long_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_unsigned_int_double_t[] = {  {&_swigt__p_std__pairT_unsigned_int_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ase__AsymmetricEstimate_std__allocatorT_ase__AsymmetricEstimate_t_t[] = {  {&_swigt__p_std__vectorT_ase__AsymmetricEstimate_std__allocatorT_ase__AsymmetricEstimate_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_double_std__allocatorT_long_double_t_t[] = {  {&_swigt__p_std__vectorT_long_double_std__allocatorT_long_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_streamoff[] = {  {&_swigt__p_streamoff, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_streampos[] = {  {&_swigt__p_streampos, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_traits_type[] = {  {&_swigt__p_traits_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Base,
  _swigc__p_Transform,
  _swigc__p_allocator_type,
  _swigc__p_ase__AbsDistributionModel1D,
  _swigc__p_ase__AbsLocationScaleFamily,
  _swigc__p_ase__AbsLogLikelihoodCurve,
  _swigc__p_ase__AbsRNG,
  _swigc__p_ase__AbsShiftableLogli,
  _swigc__p_ase__AsymmetricEstimate,
  _swigc__p_ase__BrokenParabola,
  _swigc__p_ase__CdfFunctor1D,
  _swigc__p_ase__ConservativeSigma05,
  _swigc__p_ase__ConservativeSigma10,
  _swigc__p_ase__ConservativeSigma15,
  _swigc__p_ase__ConservativeSigma20,
  _swigc__p_ase__ConservativeSigmaMax,
  _swigc__p_ase__ConservativeSpline,
  _swigc__p_ase__ConstrainedQuartic,
  _swigc__p_ase__CubicHermiteInterpolatorEG,
  _swigc__p_ase__DensityDerivativeFunctor1D,
  _swigc__p_ase__DensityFunctor1D,
  _swigc__p_ase__DerivativeFunctorHelperT_ase__DoubleCubicInner_t,
  _swigc__p_ase__DerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t,
  _swigc__p_ase__DerivativeFunctorHelperT_ase__QuinticInner_t,
  _swigc__p_ase__DerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t,
  _swigc__p_ase__DerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t,
  _swigc__p_ase__DerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t,
  _swigc__p_ase__DimidiatedGaussian,
  _swigc__p_ase__DiscretizedConvolution,
  _swigc__p_ase__DistortedGaussian,
  _swigc__p_ase__DistributionLogli,
  _swigc__p_ase__DistributionModel1DCopy,
  _swigc__p_ase__DoubleCubicGaussian,
  _swigc__p_ase__DoubleCubicInner,
  _swigc__p_ase__DoubleCubicLogSigma,
  _swigc__p_ase__DoubleFunctor1,
  _swigc__p_ase__DoubleQuartic,
  _swigc__p_ase__DoubleQuintic,
  _swigc__p_ase__EdgeworthExpansion3,
  _swigc__p_ase__EmpiricalDistribution,
  _swigc__p_ase__EntropyFunctor1D,
  _swigc__p_ase__EquidistantGrid,
  _swigc__p_ase__ExceedanceFunctor1D,
  _swigc__p_ase__ExponentialDistribution,
  _swigc__p_ase__FechnerDistribution,
  _swigc__p_ase__FunctorTimesShiftedXHelperT_ase__GaussianConvolution_t,
  _swigc__p_ase__FunctorTimesShiftedXHelperT_ase__NumericalConvolution_t,
  _swigc__p_ase__FunctorTimesShiftedXRatioHelperT_ase__GaussianConvolution_t,
  _swigc__p_ase__FunctorTimesShiftedXRatioHelperT_ase__NumericalConvolution_t,
  _swigc__p_ase__GammaDistribution,
  _swigc__p_ase__GaussHermiteQuadrature,
  _swigc__p_ase__GaussLegendreQuadrature,
  _swigc__p_ase__Gaussian,
  _swigc__p_ase__GaussianConvolution,
  _swigc__p_ase__GeneralisedPoisson,
  _swigc__p_ase__Interpolated7thDegree,
  _swigc__p_ase__InterpolatedDensity1D,
  _swigc__p_ase__IntervalT_double_t,
  _swigc__p_ase__InvExceedanceFunctor1D,
  _swigc__p_ase__JohnsonSb,
  _swigc__p_ase__JohnsonSu,
  _swigc__p_ase__JohnsonSystem,
  _swigc__p_ase__LegendreDistro1D,
  _swigc__p_ase__LikelihoodAccumulator,
  _swigc__p_ase__LikelihoodCurveCopy,
  _swigc__p_ase__LogDensityFunctor1D,
  _swigc__p_ase__LogLikelihoodDerivative,
  _swigc__p_ase__LogLikelihoodSecondDerivative,
  _swigc__p_ase__LogLogisticBeta,
  _swigc__p_ase__LogNormal,
  _swigc__p_ase__LogarithmicLogli,
  _swigc__p_ase__LongDoubleFunctor1,
  _swigc__p_ase__MatchedQuintic,
  _swigc__p_ase__MixtureModel1D,
  _swigc__p_ase__MoldedCubicLogSigma,
  _swigc__p_ase__MoldedDoubleQuartic,
  _swigc__p_ase__MoldedDoubleQuintic,
  _swigc__p_ase__MoldedQuartic,
  _swigc__p_ase__MomentFunctor1D,
  _swigc__p_ase__NumericalConvolution,
  _swigc__p_ase__OPATGaussianT_ase__ParabolicRailwayCurveT_long_double_t_t,
  _swigc__p_ase__OPATGaussianT_ase__SmoothDoubleCubicT_long_double_t_t,
  _swigc__p_ase__OPATGaussianT_ase__SymbetaDoubleIntegralT_long_double_t_t,
  _swigc__p_ase__PDGLogli,
  _swigc__p_ase__ParabolicRailwayCurveT_double_t,
  _swigc__p_ase__ParabolicRailwayCurveT_long_double_t,
  _swigc__p_ase__PoissonLogli,
  _swigc__p_ase__Poly1D,
  _swigc__p_ase__Poly1DShifted,
  _swigc__p_ase__QVWGaussian,
  _swigc__p_ase__QuantileFunctor1D,
  _swigc__p_ase__QuinticInner,
  _swigc__p_ase__QuinticLogSigma,
  _swigc__p_ase__RailwayGaussian,
  _swigc__p_ase__RailwayZoneFunctorT_double_t,
  _swigc__p_ase__RailwayZoneFunctorT_long_double_t,
  _swigc__p_ase__RatioMomentFunctor1D,
  _swigc__p_ase__SDCZoneFunctorT_double_t,
  _swigc__p_ase__SDCZoneFunctorT_long_double_t,
  _swigc__p_ase__SDIZoneFunctorT_double_t,
  _swigc__p_ase__SDIZoneFunctorT_long_double_t,
  _swigc__p_ase__SecondDerivativeFunctorHelperT_ase__DoubleCubicInner_t,
  _swigc__p_ase__SecondDerivativeFunctorHelperT_ase__ParabolicRailwayCurveT_double_t_t,
  _swigc__p_ase__SecondDerivativeFunctorHelperT_ase__QuinticInner_t,
  _swigc__p_ase__SecondDerivativeFunctorHelperT_ase__SmoothDoubleCubicT_double_t_t,
  _swigc__p_ase__SecondDerivativeFunctorHelperT_ase__SymbetaDoubleIntegralT_double_t_t,
  _swigc__p_ase__SecondDerivativeFunctorHelperT_ase__TransitionCubicT_double_t_t,
  _swigc__p_ase__ShiftedDensityFunctor1D,
  _swigc__p_ase__SimpleDoubleQuartic,
  _swigc__p_ase__SimpleDoubleQuintic,
  _swigc__p_ase__SkewNormal,
  _swigc__p_ase__SmoothDoubleCubicT_double_t,
  _swigc__p_ase__SmoothDoubleCubicT_long_double_t,
  _swigc__p_ase__SymbetaDoubleIntegralT_double_t,
  _swigc__p_ase__SymbetaDoubleIntegralT_long_double_t,
  _swigc__p_ase__SymmetricBetaGaussian,
  _swigc__p_ase__SymmetricBetaGaussian_p_hT_1U_10U_t,
  _swigc__p_ase__SymmetricBetaGaussian_p_hT_1U_15U_t,
  _swigc__p_ase__SymmetricBetaGaussian_p_hT_1U_20U_t,
  _swigc__p_ase__SymmetricBetaGaussian_p_hT_1U_25U_t,
  _swigc__p_ase__SymmetricBetaGaussian_p_hT_1U_30U_t,
  _swigc__p_ase__SymmetricBetaGaussian_p_hT_2U_10U_t,
  _swigc__p_ase__SymmetricBetaGaussian_p_hT_2U_15U_t,
  _swigc__p_ase__SymmetricBetaGaussian_p_hT_2U_20U_t,
  _swigc__p_ase__SymmetricBetaGaussian_p_hT_2U_25U_t,
  _swigc__p_ase__SymmetricBetaGaussian_p_hT_2U_30U_t,
  _swigc__p_ase__SymmetricBetaGaussian_p_hT_3U_10U_t,
  _swigc__p_ase__SymmetricBetaGaussian_p_hT_3U_15U_t,
  _swigc__p_ase__SymmetricBetaGaussian_p_hT_3U_20U_t,
  _swigc__p_ase__SymmetricBetaGaussian_p_hT_3U_25U_t,
  _swigc__p_ase__SymmetricBetaGaussian_p_hT_3U_30U_t,
  _swigc__p_ase__SymmetricBetaGaussian_p_hT_4U_10U_t,
  _swigc__p_ase__SymmetricBetaGaussian_p_hT_4U_15U_t,
  _swigc__p_ase__SymmetricBetaGaussian_p_hT_4U_20U_t,
  _swigc__p_ase__SymmetricBetaGaussian_p_hT_4U_25U_t,
  _swigc__p_ase__SymmetricBetaGaussian_p_hT_4U_30U_t,
  _swigc__p_ase__SymmetrizedParabola,
  _swigc__p_ase__TabulatedDensity1D,
  _swigc__p_ase__TransitionCubicT_double_t,
  _swigc__p_ase__TruncatedCubicLogli,
  _swigc__p_ase__TruncatedDistribution1D,
  _swigc__p_ase__UniformDistribution,
  _swigc__p_ase__UnscaledCdfFunctor1D,
  _swigc__p_ase__UnscaledDensityDerivativeFunctor1D,
  _swigc__p_ase__UnscaledDensityFunctor1D,
  _swigc__p_ase__UnscaledEntropyFunctor1D,
  _swigc__p_ase__UnscaledExceedanceFunctor1D,
  _swigc__p_ase__UnscaledInvExceedanceFunctor1D,
  _swigc__p_ase__UnscaledMomentFunctor1D,
  _swigc__p_ase__UnscaledQuantileFunctor1D,
  _swigc__p_ase__VariableLogSigma,
  _swigc__p_ase__VariableSigmaLogli,
  _swigc__p_ase__VariableVarianceLogli,
  _swigc__p_asepy__DRand48,
  _swigc__p_asepy__MersenneTwister32,
  _swigc__p_asepy__MersenneTwister64,
  _swigc__p_asepy__PyFunctor1,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_char_type,
  _swigc__p_const_reference,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_f_double__double,
  _swigc__p_f_enum_std__ios_base__event_r_std__ios_base_int__void,
  _swigc__p_f_long_double__long_double,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_f_r_std__basic_ios__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_f_r_std__basic_istream__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_f_r_std__ios_base__r_std__ios_base,
  _swigc__p_first_type,
  _swigc__p_float,
  _swigc__p_fmtflags,
  _swigc__p_int,
  _swigc__p_int_type,
  _swigc__p_iostate,
  _swigc__p_long,
  _swigc__p_long_double,
  _swigc__p_long_long,
  _swigc__p_off_type,
  _swigc__p_openmode,
  _swigc__p_p_PyObject,
  _swigc__p_p_void,
  _swigc__p_pos_type,
  _swigc__p_reference,
  _swigc__p_second_type,
  _swigc__p_seekdir,
  _swigc__p_short,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_state_type,
  _swigc__p_std__allocatorT_char_t,
  _swigc__p_std__allocatorT_double_t,
  _swigc__p_std__basic_iosT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_iostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_istringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_ostringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_std__basic_streambufT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__iterator,
  _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t__reverse_iterator,
  _swigc__p_std__basic_stringbufT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_std__basic_stringstreamT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__ios_base,
  _swigc__p_std__locale,
  _swigc__p_std__pairT_bool_double_t,
  _swigc__p_std__pairT_double_double_t,
  _swigc__p_std__pairT_long_double_long_double_t,
  _swigc__p_std__pairT_unsigned_int_double_t,
  _swigc__p_std__vectorT_ase__AsymmetricEstimate_std__allocatorT_ase__AsymmetricEstimate_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_long_double_std__allocatorT_long_double_t_t,
  _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  _swigc__p_streamoff,
  _swigc__p_streampos,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_traits_type,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_POINTER, "endl_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &value))(std::endl< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{ SWIG_PY_POINTER, "ends_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &value))(std::ends< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{ SWIG_PY_POINTER, "flush_cb_ptr", 0, 0, (void *)((std::basic_ostream< char,std::char_traits< char > > & (*)(std::basic_ostream< char,std::char_traits< char > > &value))(std::flush< char,std::char_traits< char > >)), &SWIGTYPE_p_f_r_std__basic_ostream__char_std__char_traits__char______r_std__basic_ostreamT_char_std__char_traitsT_char_t_t },
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        "swigvarlink",                      /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        0,                                  /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
        0,                                  /* tp_del */
        0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
        0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
        0,                                  /* tp_print */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
        0,                                  /* tp_prev */
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        memcpy(gv->name, name, size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *globals = 0;
    if (!globals) {
      globals = SWIG_newvarlink();
    }
    return globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
  /* -----------------------------------------------------------------------------
   * Method creation and docstring support functions
   * ----------------------------------------------------------------------------- */
  
  /* -----------------------------------------------------------------------------
   * Function to find the method definition with the correct docstring for the
   * proxy module as opposed to the low-level API
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name) {
    /* Find the function in the modified method table */
    size_t offset = 0;
    int found = 0;
    while (SwigMethods_proxydocs[offset].ml_meth != NULL) {
      if (strcmp(SwigMethods_proxydocs[offset].ml_name, name) == 0) {
        found = 1;
        break;
      }
      offset++;
    }
    /* Use the copy with the modified docstring if available */
    return found ? &SwigMethods_proxydocs[offset] : NULL;
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyInstanceMethod_New() used in Python 3
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
#if PY_VERSION_HEX >= 0x03000000
    return PyInstanceMethod_New(func);
#else
    return PyMethod_New(func, NULL, NULL);
#endif
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyStaticMethod_New()
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
    return PyStaticMethod_New(func);
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  import_array();
  
  globals = SWIG_globals();
  if (!globals) {
    PyErr_SetString(PyExc_TypeError, "Failure to create SWIG globals.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  PyDict_SetItemString(md, "cvar", globals);
  Py_DECREF(globals);
  SWIG_addvarlink(globals, "string_npos", Swig_var_string_npos_get, Swig_var_string_npos_set);
  SWIG_addvarlink(globals, "ios_base_boolalpha", Swig_var_ios_base_boolalpha_get, Swig_var_ios_base_boolalpha_set);
  SWIG_addvarlink(globals, "ios_base_dec", Swig_var_ios_base_dec_get, Swig_var_ios_base_dec_set);
  SWIG_addvarlink(globals, "ios_base_fixed", Swig_var_ios_base_fixed_get, Swig_var_ios_base_fixed_set);
  SWIG_addvarlink(globals, "ios_base_hex", Swig_var_ios_base_hex_get, Swig_var_ios_base_hex_set);
  SWIG_addvarlink(globals, "ios_base_internal", Swig_var_ios_base_internal_get, Swig_var_ios_base_internal_set);
  SWIG_addvarlink(globals, "ios_base_left", Swig_var_ios_base_left_get, Swig_var_ios_base_left_set);
  SWIG_addvarlink(globals, "ios_base_oct", Swig_var_ios_base_oct_get, Swig_var_ios_base_oct_set);
  SWIG_addvarlink(globals, "ios_base_right", Swig_var_ios_base_right_get, Swig_var_ios_base_right_set);
  SWIG_addvarlink(globals, "ios_base_scientific", Swig_var_ios_base_scientific_get, Swig_var_ios_base_scientific_set);
  SWIG_addvarlink(globals, "ios_base_showbase", Swig_var_ios_base_showbase_get, Swig_var_ios_base_showbase_set);
  SWIG_addvarlink(globals, "ios_base_showpoint", Swig_var_ios_base_showpoint_get, Swig_var_ios_base_showpoint_set);
  SWIG_addvarlink(globals, "ios_base_showpos", Swig_var_ios_base_showpos_get, Swig_var_ios_base_showpos_set);
  SWIG_addvarlink(globals, "ios_base_skipws", Swig_var_ios_base_skipws_get, Swig_var_ios_base_skipws_set);
  SWIG_addvarlink(globals, "ios_base_unitbuf", Swig_var_ios_base_unitbuf_get, Swig_var_ios_base_unitbuf_set);
  SWIG_addvarlink(globals, "ios_base_uppercase", Swig_var_ios_base_uppercase_get, Swig_var_ios_base_uppercase_set);
  SWIG_addvarlink(globals, "ios_base_adjustfield", Swig_var_ios_base_adjustfield_get, Swig_var_ios_base_adjustfield_set);
  SWIG_addvarlink(globals, "ios_base_basefield", Swig_var_ios_base_basefield_get, Swig_var_ios_base_basefield_set);
  SWIG_addvarlink(globals, "ios_base_floatfield", Swig_var_ios_base_floatfield_get, Swig_var_ios_base_floatfield_set);
  SWIG_addvarlink(globals, "ios_base_badbit", Swig_var_ios_base_badbit_get, Swig_var_ios_base_badbit_set);
  SWIG_addvarlink(globals, "ios_base_eofbit", Swig_var_ios_base_eofbit_get, Swig_var_ios_base_eofbit_set);
  SWIG_addvarlink(globals, "ios_base_failbit", Swig_var_ios_base_failbit_get, Swig_var_ios_base_failbit_set);
  SWIG_addvarlink(globals, "ios_base_goodbit", Swig_var_ios_base_goodbit_get, Swig_var_ios_base_goodbit_set);
  SWIG_addvarlink(globals, "ios_base_app", Swig_var_ios_base_app_get, Swig_var_ios_base_app_set);
  SWIG_addvarlink(globals, "ios_base_ate", Swig_var_ios_base_ate_get, Swig_var_ios_base_ate_set);
  SWIG_addvarlink(globals, "ios_base_binary", Swig_var_ios_base_binary_get, Swig_var_ios_base_binary_set);
  SWIG_addvarlink(globals, "ios_base_ios_base_in", Swig_var_ios_base_ios_base_in_get, Swig_var_ios_base_ios_base_in_set);
  SWIG_addvarlink(globals, "ios_base_out", Swig_var_ios_base_out_get, Swig_var_ios_base_out_set);
  SWIG_addvarlink(globals, "ios_base_trunc", Swig_var_ios_base_trunc_get, Swig_var_ios_base_trunc_set);
  SWIG_addvarlink(globals, "ios_base_beg", Swig_var_ios_base_beg_get, Swig_var_ios_base_beg_set);
  SWIG_addvarlink(globals, "ios_base_cur", Swig_var_ios_base_cur_get, Swig_var_ios_base_cur_set);
  SWIG_addvarlink(globals, "ios_base_end", Swig_var_ios_base_end_get, Swig_var_ios_base_end_set);
  SWIG_Python_SetConstant(d, "ios_base_erase_event",SWIG_From_int(static_cast< int >(std::ios_base::erase_event)));
  SWIG_Python_SetConstant(d, "ios_base_imbue_event",SWIG_From_int(static_cast< int >(std::ios_base::imbue_event)));
  SWIG_Python_SetConstant(d, "ios_base_copyfmt_event",SWIG_From_int(static_cast< int >(std::ios_base::copyfmt_event)));
  SWIG_addvarlink(globals, "cin", Swig_var_cin_get, Swig_var_cin_set);
  SWIG_addvarlink(globals, "cout", Swig_var_cout_get, Swig_var_cout_set);
  SWIG_addvarlink(globals, "cerr", Swig_var_cerr_get, Swig_var_cerr_set);
  SWIG_addvarlink(globals, "clog", Swig_var_clog_get, Swig_var_clog_set);
  
  
  
  
  // thread safe initialization
  swig::container_owner_attribute();
  
  SWIG_Python_SetConstant(d, "Gaussian_isFullOPAT",SWIG_From_bool(static_cast< bool >(ase::Gaussian::isFullOPAT)));
  SWIG_Python_SetConstant(d, "OPATGaussian0_isFullOPAT",SWIG_From_bool(static_cast< bool >(ase::OPATGaussian< ase::SymbetaDoubleIntegral< long double > >::isFullOPAT)));
  SWIG_Python_SetConstant(d, "OPATGaussian1_isFullOPAT",SWIG_From_bool(static_cast< bool >(ase::OPATGaussian< ase::ParabolicRailwayCurve< long double > >::isFullOPAT)));
  SWIG_Python_SetConstant(d, "OPATGaussian2_isFullOPAT",SWIG_From_bool(static_cast< bool >(ase::OPATGaussian< ase::SmoothDoubleCubic< long double > >::isFullOPAT)));
  SWIG_Python_SetConstant(d, "DimidiatedGaussian_isFullOPAT",SWIG_From_bool(static_cast< bool >(ase::DimidiatedGaussian::isFullOPAT)));
  SWIG_Python_SetConstant(d, "DistortedGaussian_isFullOPAT",SWIG_From_bool(static_cast< bool >(ase::DistortedGaussian::isFullOPAT)));
  SWIG_Python_SetConstant(d, "SkewNormal_isFullOPAT",SWIG_From_bool(static_cast< bool >(ase::SkewNormal::isFullOPAT)));
  SWIG_Python_SetConstant(d, "QVWGaussian_isFullOPAT",SWIG_From_bool(static_cast< bool >(ase::QVWGaussian::isFullOPAT)));
  SWIG_Python_SetConstant(d, "GammaDistribution_isFullOPAT",SWIG_From_bool(static_cast< bool >(ase::GammaDistribution::isFullOPAT)));
  SWIG_Python_SetConstant(d, "LogNormal_isFullOPAT",SWIG_From_bool(static_cast< bool >(ase::LogNormal::isFullOPAT)));
  SWIG_Python_SetConstant(d, "JohnsonSu_isFullOPAT",SWIG_From_bool(static_cast< bool >(ase::JohnsonSu::isFullOPAT)));
  SWIG_Python_SetConstant(d, "JohnsonSb_isFullOPAT",SWIG_From_bool(static_cast< bool >(ase::JohnsonSb::isFullOPAT)));
  SWIG_Python_SetConstant(d, "JohnsonSystem_isFullOPAT",SWIG_From_bool(static_cast< bool >(ase::JohnsonSystem::isFullOPAT)));
  SWIG_Python_SetConstant(d, "JohnsonSystem_GAUSSIAN",SWIG_From_int(static_cast< int >(ase::JohnsonSystem::GAUSSIAN)));
  SWIG_Python_SetConstant(d, "JohnsonSystem_LOGNORMAL",SWIG_From_int(static_cast< int >(ase::JohnsonSystem::LOGNORMAL)));
  SWIG_Python_SetConstant(d, "JohnsonSystem_SU",SWIG_From_int(static_cast< int >(ase::JohnsonSystem::SU)));
  SWIG_Python_SetConstant(d, "JohnsonSystem_SB",SWIG_From_int(static_cast< int >(ase::JohnsonSystem::SB)));
  SWIG_Python_SetConstant(d, "JohnsonSystem_INVALID",SWIG_From_int(static_cast< int >(ase::JohnsonSystem::INVALID)));
  SWIG_Python_SetConstant(d, "EdgeworthExpansion3_isFullOPAT",SWIG_From_bool(static_cast< bool >(ase::EdgeworthExpansion3::isFullOPAT)));
  SWIG_Python_SetConstant(d, "FechnerDistribution_isFullOPAT",SWIG_From_bool(static_cast< bool >(ase::FechnerDistribution::isFullOPAT)));
  SWIG_Python_SetConstant(d, "EmpiricalDistribution_isFullOPAT",SWIG_From_bool(static_cast< bool >(ase::EmpiricalDistribution::isFullOPAT)));
  SWIG_Python_SetConstant(d, "UniformDistribution_isFullOPAT",SWIG_From_bool(static_cast< bool >(ase::UniformDistribution::isFullOPAT)));
  SWIG_Python_SetConstant(d, "ExponentialDistribution_isFullOPAT",SWIG_From_bool(static_cast< bool >(ase::ExponentialDistribution::isFullOPAT)));
  SWIG_Python_SetConstant(d, "LegendreDistro1D_isFullOPAT",SWIG_From_bool(static_cast< bool >(ase::LegendreDistro1D::isFullOPAT)));
  SWIG_Python_SetConstant(d, "GCDF16",SWIG_From_double(static_cast< double >(0.15865525393145705141)));
  SWIG_Python_SetConstant(d, "GCDF84",SWIG_From_double(static_cast< double >(0.84134474606854294859)));
  SWIG_Python_SetConstant(d, "TruncatedDistribution1D_isFullOPAT",SWIG_From_bool(static_cast< bool >(ase::TruncatedDistribution1D::isFullOPAT)));
  SWIG_Python_SetConstant(d, "OPEN_INTERVAL",SWIG_From_int(static_cast< int >(ase::OPEN_INTERVAL)));
  SWIG_Python_SetConstant(d, "CLOSED_INTERVAL",SWIG_From_int(static_cast< int >(ase::CLOSED_INTERVAL)));
  SWIG_Python_SetConstant(d, "LEFT_CLOSED_INTERVAL",SWIG_From_int(static_cast< int >(ase::LEFT_CLOSED_INTERVAL)));
  SWIG_Python_SetConstant(d, "RIGHT_CLOSED_INTERVAL",SWIG_From_int(static_cast< int >(ase::RIGHT_CLOSED_INTERVAL)));
  SWIG_Python_SetConstant(d, "RIGHT_OPEN_INTERVAL",SWIG_From_int(static_cast< int >(ase::RIGHT_OPEN_INTERVAL)));
  SWIG_Python_SetConstant(d, "LEFT_OPEN_INTERVAL",SWIG_From_int(static_cast< int >(ase::LEFT_OPEN_INTERVAL)));
  SWIG_Python_SetConstant(d, "MixtureModel1D_isFullOPAT",SWIG_From_bool(static_cast< bool >(ase::MixtureModel1D::isFullOPAT)));
  SWIG_Python_SetConstant(d, "P",SWIG_From_int(static_cast< int >(ase::P)));
  SWIG_Python_SetConstant(d, "L",SWIG_From_int(static_cast< int >(ase::L)));
  SWIG_Python_SetConstant(d, "N_ERROR_TYPES",SWIG_From_int(static_cast< int >(ase::N_ERROR_TYPES)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

